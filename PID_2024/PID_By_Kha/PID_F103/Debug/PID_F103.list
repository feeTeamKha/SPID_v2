
PID_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080083d0  080083d0  000093d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800858c  0800858c  0000a1b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800858c  0800858c  0000958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008594  08008594  0000a1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  0800859c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002494  200001b8  08008754  0000a1b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000264c  08008754  0000a64c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002deb8  00000000  00000000  0000a1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dce  00000000  00000000  00038099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001fd29  00000000  00000000  0003ee67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a58  00000000  00000000  0005eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003b68  00000000  00000000  000605e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e591  00000000  00000000  00064150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003250f  00000000  00000000  000826e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf23  00000000  00000000  000b4bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00151b13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e64  00000000  00000000  00151b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001b8 	.word	0x200001b8
 800012c:	00000000 	.word	0x00000000
 8000130:	080083b8 	.word	0x080083b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001bc 	.word	0x200001bc
 800014c:	080083b8 	.word	0x080083b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_f2iz>:
 8000de0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000de8:	d30f      	bcc.n	8000e0a <__aeabi_f2iz+0x2a>
 8000dea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000df2:	d90d      	bls.n	8000e10 <__aeabi_f2iz+0x30>
 8000df4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000df8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dfc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e00:	fa23 f002 	lsr.w	r0, r3, r2
 8000e04:	bf18      	it	ne
 8000e06:	4240      	negne	r0, r0
 8000e08:	4770      	bx	lr
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	4770      	bx	lr
 8000e10:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e14:	d101      	bne.n	8000e1a <__aeabi_f2iz+0x3a>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	d105      	bne.n	8000e26 <__aeabi_f2iz+0x46>
 8000e1a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e1e:	bf08      	it	eq
 8000e20:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f04f 0000 	mov.w	r0, #0
 8000e2a:	4770      	bx	lr

08000e2c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000e2c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 8000e2e:	2210      	movs	r2, #16
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e30:	2300      	movs	r3, #0
  hcan.Instance = CAN1;
 8000e32:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <MX_CAN_Init+0x28>)
 8000e34:	4908      	ldr	r1, [pc, #32]	@ (8000e58 <MX_CAN_Init+0x2c>)
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e36:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcan.Init.Prescaler = 16;
 8000e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e3e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e42:	8383      	strh	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e44:	f000 fd7a 	bl	800193c <HAL_CAN_Init>
 8000e48:	b900      	cbnz	r0, 8000e4c <MX_CAN_Init+0x20>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e4a:	bd08      	pop	{r3, pc}
 8000e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e50:	f000 b9e0 	b.w	8001214 <Error_Handler>
 8000e54:	200001d4 	.word	0x200001d4
 8000e58:	40006400 	.word	0x40006400

08000e5c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN1)
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_CAN_MspInit+0x8c>)
 8000e62:	6802      	ldr	r2, [r0, #0]
{
 8000e64:	b087      	sub	sp, #28
  if(canHandle->Instance==CAN1)
 8000e66:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000e6c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(canHandle->Instance==CAN1)
 8000e70:	d001      	beq.n	8000e76 <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e72:	b007      	add	sp, #28
 8000e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e76:	f44f 7580 	mov.w	r5, #256	@ 0x100
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e7a:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 8000e7e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e82:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000e86:	61da      	str	r2, [r3, #28]
 8000e88:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	4818      	ldr	r0, [pc, #96]	@ (8000eec <HAL_CAN_MspInit+0x90>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e8c:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e96:	f44f 7600 	mov.w	r6, #512	@ 0x200
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	f042 0208 	orr.w	r2, r2, #8
 8000e9e:	619a      	str	r2, [r3, #24]
 8000ea0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ea2:	2702      	movs	r7, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eac:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f001 f835 	bl	8001f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb2:	2303      	movs	r3, #3
    __HAL_AFIO_REMAP_CAN1_2();
 8000eb4:	4d0e      	ldr	r5, [pc, #56]	@ (8000ef0 <HAL_CAN_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	a902      	add	r1, sp, #8
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <HAL_CAN_MspInit+0x90>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ebc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f001 f82c 	bl	8001f1c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 8000ec4:	686b      	ldr	r3, [r5, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000ec6:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_CAN1_2();
 8000ec8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000ecc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000ed4:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_CAN1_2();
 8000ed6:	606b      	str	r3, [r5, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000ed8:	2014      	movs	r0, #20
 8000eda:	f000 ff3b 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f000 ff74 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 8000ee4:	b007      	add	sp, #28
 8000ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee8:	40006400 	.word	0x40006400
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ef4:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_CRC_Init+0x18>)
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <MX_CRC_Init+0x1c>)
 8000efa:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efc:	f000 ff8c 	bl	8001e18 <HAL_CRC_Init>
 8000f00:	b900      	cbnz	r0, 8000f04 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f02:	bd08      	pop	{r3, pc}
 8000f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f08:	f000 b984 	b.w	8001214 <Error_Handler>
 8000f0c:	200001fc 	.word	0x200001fc
 8000f10:	40023000 	.word	0x40023000

08000f14 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_CRC_MspInit+0x28>)
 8000f16:	6802      	ldr	r2, [r0, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d000      	beq.n	8000f1e <HAL_CRC_MspInit+0xa>
 8000f1c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f1e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8000f22:	695a      	ldr	r2, [r3, #20]
{
 8000f24:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f2a:	615a      	str	r2, [r3, #20]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f36:	b002      	add	sp, #8
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023000 	.word	0x40023000

08000f40 <USBtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBtask */
void USBtask(void const * argument)
{
 8000f40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USBtask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f005 f88c 	bl	8006060 <osDelay>
  for(;;)
 8000f48:	e7fb      	b.n	8000f42 <USBtask+0x2>
 8000f4a:	bf00      	nop

08000f4c <PIDTask>:
{
 8000f4c:	b508      	push	{r3, lr}
  MX_USB_DEVICE_Init();
 8000f4e:	f005 fffb 	bl	8006f48 <MX_USB_DEVICE_Init>
 8000f52:	4c08      	ldr	r4, [pc, #32]	@ (8000f74 <PIDTask+0x28>)
 8000f54:	4d08      	ldr	r5, [pc, #32]	@ (8000f78 <PIDTask+0x2c>)
    osDelay(0);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f005 f882 	bl	8006060 <osDelay>
    if(PID.enablePID == 1)
 8000f5c:	78e3      	ldrb	r3, [r4, #3]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d1f9      	bne.n	8000f56 <PIDTask+0xa>
    	Update_Encoder(&PID);
 8000f62:	4620      	mov	r0, r4
 8000f64:	f006 f9b4 	bl	80072d0 <Update_Encoder>
    	PID.f_cal_pid(&PID,(int32_t*)set_speed);
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8000f6e:	6829      	ldr	r1, [r5, #0]
 8000f70:	4798      	blx	r3
 8000f72:	e7f0      	b.n	8000f56 <PIDTask+0xa>
 8000f74:	200004b0 	.word	0x200004b0
 8000f78:	200005e0 	.word	0x200005e0

08000f7c <vApplicationGetIdleTaskMemory>:
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f7c:	2380      	movs	r3, #128	@ 0x80
{
 8000f7e:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f80:	4d03      	ldr	r5, [pc, #12]	@ (8000f90 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f82:	4c04      	ldr	r4, [pc, #16]	@ (8000f94 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f84:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f86:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f88:	6013      	str	r3, [r2, #0]
}
 8000f8a:	bc30      	pop	{r4, r5}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000404 	.word	0x20000404
 8000f94:	20000204 	.word	0x20000204

08000f98 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000f98:	b510      	push	{r4, lr}
  osThreadDef(taskPID, PIDTask, osPriorityRealtime, 0, 512);
 8000f9a:	4c13      	ldr	r4, [pc, #76]	@ (8000fe8 <MX_FREERTOS_Init+0x50>)
void MX_FREERTOS_Init(void) {
 8000f9c:	b08e      	sub	sp, #56	@ 0x38
  osThreadDef(taskPID, PIDTask, osPriorityRealtime, 0, 512);
 8000f9e:	46ec      	mov	ip, sp
 8000fa0:	46a6      	mov	lr, r4
 8000fa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000fa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000faa:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000fae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  taskPIDHandle = osThreadCreate(osThread(taskPID), NULL);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4668      	mov	r0, sp
 8000fb6:	f005 f823 	bl	8006000 <osThreadCreate>
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_FREERTOS_Init+0x54>)
  osThreadDef(taskUSB, USBtask, osPriorityIdle, 0, 128);
 8000fbc:	f10d 0e1c 	add.w	lr, sp, #28
 8000fc0:	f104 0c1c 	add.w	ip, r4, #28
  taskPIDHandle = osThreadCreate(osThread(taskPID), NULL);
 8000fc4:	6018      	str	r0, [r3, #0]
  osThreadDef(taskUSB, USBtask, osPriorityIdle, 0, 128);
 8000fc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000fce:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8000fd2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  taskUSBHandle = osThreadCreate(osThread(taskUSB), NULL);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	a807      	add	r0, sp, #28
 8000fda:	f005 f811 	bl	8006000 <osThreadCreate>
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <MX_FREERTOS_Init+0x58>)
 8000fe0:	6018      	str	r0, [r3, #0]
}
 8000fe2:	b00e      	add	sp, #56	@ 0x38
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	bf00      	nop
 8000fe8:	080083d0 	.word	0x080083d0
 8000fec:	200004a8 	.word	0x200004a8
 8000ff0:	200004a4 	.word	0x200004a4

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	2400      	movs	r4, #0
{
 8000ffa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001000:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001006:	4f32      	ldr	r7, [pc, #200]	@ (80010d0 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800100a:	4e32      	ldr	r6, [pc, #200]	@ (80010d4 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	f042 0220 	orr.w	r2, r2, #32
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001014:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	f002 0220 	and.w	r2, r2, #32
 800101a:	9201      	str	r2, [sp, #4]
 800101c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001020:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	f042 0204 	orr.w	r2, r2, #4
 8001026:	619a      	str	r2, [r3, #24]
 8001028:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	f002 0204 	and.w	r2, r2, #4
 8001030:	9202      	str	r2, [sp, #8]
 8001032:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	f042 0208 	orr.w	r2, r2, #8
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001042:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	9303      	str	r3, [sp, #12]
 800104a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800104c:	f001 f882 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001050:	4622      	mov	r2, r4
 8001052:	4630      	mov	r0, r6
 8001054:	2130      	movs	r1, #48	@ 0x30
 8001056:	f001 f87d 	bl	8002154 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800105a:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	4638      	mov	r0, r7
 800105e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001060:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	e9cd 5405 	strd	r5, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f000 ff57 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	4638      	mov	r0, r7
 8001074:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001076:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f000 ff4e 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001080:	2203      	movs	r2, #3
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	4630      	mov	r0, r6
 8001086:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001088:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f000 ff45 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001092:	2330      	movs	r3, #48	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	4630      	mov	r0, r6
 8001096:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001098:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	e9cd 4806 	strd	r4, r8, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f000 ff3c 	bl	8001f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010a4:	4622      	mov	r2, r4
 80010a6:	2105      	movs	r1, #5
 80010a8:	2006      	movs	r0, #6
 80010aa:	f000 fe53 	bl	8001d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ae:	2006      	movs	r0, #6
 80010b0:	f000 fe8c 	bl	8001dcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80010b4:	4622      	mov	r2, r4
 80010b6:	2105      	movs	r1, #5
 80010b8:	2007      	movs	r0, #7
 80010ba:	f000 fe4b 	bl	8001d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010be:	2007      	movs	r0, #7
 80010c0:	f000 fe84 	bl	8001dcc <HAL_NVIC_EnableIRQ>

}
 80010c4:	b008      	add	sp, #32
 80010c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40010c00 	.word	0x40010c00
 80010d8:	10110000 	.word	0x10110000

080010dc <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010dc:	2300      	movs	r3, #0
{
 80010de:	b5d0      	push	{r4, r6, r7, lr}
 80010e0:	b094      	sub	sp, #80	@ 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e2:	2601      	movs	r6, #1
 80010e4:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2402      	movs	r4, #2
 80010ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80010f8:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001100:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001102:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800110a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001110:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	9411      	str	r4, [sp, #68]	@ 0x44
 8001118:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800111a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f001 ffaa 	bl	8003074 <HAL_RCC_OscConfig>
 8001120:	b108      	cbz	r0, 8001126 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001122:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	4603      	mov	r3, r0
 8001128:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001132:	4621      	mov	r1, r4
 8001134:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001136:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113c:	f002 f988 	bl	8003450 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	b108      	cbz	r0, 8001148 <SystemClock_Config+0x6c>
 8001144:	b672      	cpsid	i
  while (1)
 8001146:	e7fe      	b.n	8001146 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001148:	2210      	movs	r2, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114a:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800114c:	9304      	str	r3, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800114e:	9201      	str	r2, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	f002 fa60 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	b108      	cbz	r0, 800115a <SystemClock_Config+0x7e>
 8001156:	b672      	cpsid	i
  while (1)
 8001158:	e7fe      	b.n	8001158 <SystemClock_Config+0x7c>
}
 800115a:	b014      	add	sp, #80	@ 0x50
 800115c:	bdd0      	pop	{r4, r6, r7, pc}
 800115e:	bf00      	nop

08001160 <main>:
{
 8001160:	b508      	push	{r3, lr}
  HAL_Init();
 8001162:	f000 fbc7 	bl	80018f4 <HAL_Init>
  SystemClock_Config();
 8001166:	f7ff ffb9 	bl	80010dc <SystemClock_Config>
  MX_GPIO_Init();
 800116a:	f7ff ff43 	bl	8000ff4 <MX_GPIO_Init>
  MX_CAN_Init();
 800116e:	f7ff fe5d 	bl	8000e2c <MX_CAN_Init>
  MX_TIM1_Init();
 8001172:	f000 f919 	bl	80013a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001176:	f000 f9bb 	bl	80014f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800117a:	f000 f9f1 	bl	8001560 <MX_TIM3_Init>
  MX_TIM4_Init();
 800117e:	f000 fa41 	bl	8001604 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001182:	f000 fb05 	bl	8001790 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8001186:	f7ff feb5 	bl	8000ef4 <MX_CRC_Init>
  MX_SPI2_Init();
 800118a:	f000 f845 	bl	8001218 <MX_SPI2_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800118e:	2100      	movs	r1, #0
 8001190:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <main+0x94>)
 8001192:	f002 fc19 	bl	80039c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001196:	2104      	movs	r1, #4
 8001198:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <main+0x94>)
 800119a:	f002 fc15 	bl	80039c8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 800119e:	2201      	movs	r2, #1
  PID_Init(&PID,PID_Speed);
 80011a0:	4c15      	ldr	r4, [pc, #84]	@ (80011f8 <main+0x98>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80011a2:	4611      	mov	r1, r2
 80011a4:	4815      	ldr	r0, [pc, #84]	@ (80011fc <main+0x9c>)
 80011a6:	f000 ffd5 	bl	8002154 <HAL_GPIO_WritePin>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80011aa:	213c      	movs	r1, #60	@ 0x3c
 80011ac:	4814      	ldr	r0, [pc, #80]	@ (8001200 <main+0xa0>)
 80011ae:	f002 fd57 	bl	8003c60 <HAL_TIM_Encoder_Start>
  PID_Init(&PID,PID_Speed);
 80011b2:	2100      	movs	r1, #0
 80011b4:	4620      	mov	r0, r4
 80011b6:	f006 ffcf 	bl	8008158 <PID_Init>
  PID_Init(&PID,PID_Position);
 80011ba:	2101      	movs	r1, #1
 80011bc:	4620      	mov	r0, r4
 80011be:	f006 ffcb 	bl	8008158 <PID_Init>
  PID_Motor_Ctrl(PID.Motor_Duty);
 80011c2:	f9b4 304a 	ldrsh.w	r3, [r4, #74]	@ 0x4a
 80011c6:	2100      	movs	r1, #0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <main+0xa4>)
 80011cc:	db0e      	blt.n	80011ec <main+0x8c>
 80011ce:	6351      	str	r1, [r2, #52]	@ 0x34
 80011d0:	6393      	str	r3, [r2, #56]	@ 0x38
  HAL_TIM_Base_Start_IT(&htim4);
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <main+0xa8>)
 80011d4:	f002 fb64 	bl	80038a0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1,PID.pid_rev.rxData,len(PID.pid_rev.rxData));
 80011d8:	2204      	movs	r2, #4
 80011da:	490c      	ldr	r1, [pc, #48]	@ (800120c <main+0xac>)
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <main+0xb0>)
 80011de:	f003 f97f 	bl	80044e0 <HAL_UART_Receive_IT>
  MX_FREERTOS_Init();
 80011e2:	f7ff fed9 	bl	8000f98 <MX_FREERTOS_Init>
  osKernelStart();
 80011e6:	f004 ff05 	bl	8005ff4 <osKernelStart>
  while (1)
 80011ea:	e7fe      	b.n	80011ea <main+0x8a>
  PID_Motor_Ctrl(PID.Motor_Duty);
 80011ec:	425b      	negs	r3, r3
 80011ee:	6391      	str	r1, [r2, #56]	@ 0x38
 80011f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80011f2:	e7ee      	b.n	80011d2 <main+0x72>
 80011f4:	20000718 	.word	0x20000718
 80011f8:	200004b0 	.word	0x200004b0
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	200006d0 	.word	0x200006d0
 8001204:	40012c00 	.word	0x40012c00
 8001208:	20000640 	.word	0x20000640
 800120c:	200005a8 	.word	0x200005a8
 8001210:	20000760 	.word	0x20000760

08001214 <Error_Handler>:
 8001214:	b672      	cpsid	i
  while (1)
 8001216:	e7fe      	b.n	8001216 <Error_Handler+0x2>

08001218 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001218:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	2300      	movs	r3, #0
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800121c:	f44f 7482 	mov.w	r4, #260	@ 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001220:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8001224:	220a      	movs	r2, #10
  hspi2.Instance = SPI2;
 8001226:	480b      	ldr	r0, [pc, #44]	@ (8001254 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001228:	e9c0 4301 	strd	r4, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001230:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001234:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001238:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hspi2.Instance = SPI2;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_SPI2_Init+0x40>)
  hspi2.Init.CRCPolynomial = 10;
 800123e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Instance = SPI2;
 8001240:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001242:	f002 fa67 	bl	8003714 <HAL_SPI_Init>
 8001246:	b900      	cbnz	r0, 800124a <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001248:	bd10      	pop	{r4, pc}
 800124a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800124e:	f7ff bfe1 	b.w	8001214 <Error_Handler>
 8001252:	bf00      	nop
 8001254:	200005e8 	.word	0x200005e8
 8001258:	40003800 	.word	0x40003800

0800125c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800125c:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI2)
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <HAL_SPI_MspInit+0x70>)
 8001262:	6802      	ldr	r2, [r0, #0]
{
 8001264:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI2)
 8001266:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800126c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(spiHandle->Instance==SPI2)
 8001270:	d001      	beq.n	8001276 <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001272:	b006      	add	sp, #24
 8001274:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001276:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
 800127a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800127c:	f44f 4620 	mov.w	r6, #40960	@ 0xa000
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001280:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001284:	61da      	str	r2, [r3, #28]
 8001286:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001288:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 800128a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	f042 0208 	orr.w	r2, r2, #8
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012ac:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f000 fe34 	bl	8001f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012b8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <HAL_SPI_MspInit+0x74>)
 80012bc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f000 fe2a 	bl	8001f1c <HAL_GPIO_Init>
}
 80012c8:	b006      	add	sp, #24
 80012ca:	bdd0      	pop	{r4, r6, r7, pc}
 80012cc:	40003800 	.word	0x40003800
 80012d0:	40010c00 	.word	0x40010c00

080012d4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_MspInit+0x48>)
{
 80012d6:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d8:	6998      	ldr	r0, [r3, #24]
{
 80012da:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012dc:	f040 0001 	orr.w	r0, r0, #1
 80012e0:	6198      	str	r0, [r3, #24]
 80012e2:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012e4:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e6:	f004 0401 	and.w	r4, r4, #1
 80012ea:	9400      	str	r4, [sp, #0]
 80012ec:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012f0:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 80012f6:	61dc      	str	r4, [r3, #28]
 80012f8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fa:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001306:	f000 fd25 	bl	8001d54 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_MspInit+0x4c>)
 800130c:	6853      	ldr	r3, [r2, #4]
 800130e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001312:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001316:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001318:	b002      	add	sp, #8
 800131a:	bd10      	pop	{r4, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000

08001324 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler>
 8001326:	bf00      	nop

08001328 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <HardFault_Handler>
 800132a:	bf00      	nop

0800132c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler>
 800132e:	bf00      	nop

08001330 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <BusFault_Handler>
 8001332:	bf00      	nop

08001334 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler>
 8001336:	bf00      	nop

08001338 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133e:	f000 faeb 	bl	8001918 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001342:	f005 fb8f 	bl	8006a64 <xTaskGetSchedulerState>
 8001346:	2801      	cmp	r0, #1
 8001348:	d100      	bne.n	800134c <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	bd08      	pop	{r3, pc}
 800134c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8001350:	f005 bc48 	b.w	8006be4 <xPortSysTickHandler>

08001354 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 bf01 	b.w	800215c <HAL_GPIO_EXTI_IRQHandler>
 800135a:	bf00      	nop

0800135c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 befd 	b.w	800215c <HAL_GPIO_EXTI_IRQHandler>
 8001362:	bf00      	nop

08001364 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001366:	4804      	ldr	r0, [pc, #16]	@ (8001378 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8001368:	f000 fb84 	bl	8001a74 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800136c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8001372:	f000 bf91 	b.w	8002298 <HAL_PCD_IRQHandler>
 8001376:	bf00      	nop
 8001378:	200001d4 	.word	0x200001d4
 800137c:	20002218 	.word	0x20002218

08001380 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001380:	4801      	ldr	r0, [pc, #4]	@ (8001388 <TIM3_IRQHandler+0x8>)
 8001382:	f002 bf35 	b.w	80041f0 <HAL_TIM_IRQHandler>
 8001386:	bf00      	nop
 8001388:	20000688 	.word	0x20000688

0800138c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800138c:	4801      	ldr	r0, [pc, #4]	@ (8001394 <TIM4_IRQHandler+0x8>)
 800138e:	f002 bf2f 	b.w	80041f0 <HAL_TIM_IRQHandler>
 8001392:	bf00      	nop
 8001394:	20000640 	.word	0x20000640

08001398 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001398:	4801      	ldr	r0, [pc, #4]	@ (80013a0 <USART1_IRQHandler+0x8>)
 800139a:	f003 b937 	b.w	800460c <HAL_UART_IRQHandler>
 800139e:	bf00      	nop
 80013a0:	20000760 	.word	0x20000760

080013a4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	2400      	movs	r4, #0
{
 80013ac:	b09d      	sub	sp, #116	@ 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ae:	2220      	movs	r2, #32
 80013b0:	4621      	mov	r1, r4
 80013b2:	a814      	add	r0, sp, #80	@ 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b8:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 80013bc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80013c0:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c4:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c6:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c8:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	940b      	str	r4, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	9403      	str	r4, [sp, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ce:	f006 fed5 	bl	800817c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 9-1;
 80013d2:	2308      	movs	r3, #8
  htim1.Instance = TIM1;
 80013d4:	4d43      	ldr	r5, [pc, #268]	@ (80014e4 <MX_TIM1_Init+0x13c>)
  htim1.Init.Prescaler = 9-1;
 80013d6:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000-1;
 80013d8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80013dc:	60eb      	str	r3, [r5, #12]
  htim1.Instance = TIM1;
 80013de:	4b42      	ldr	r3, [pc, #264]	@ (80014e8 <MX_TIM1_Init+0x140>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013e0:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 0;
 80013e2:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	60ac      	str	r4, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 80013e8:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 80013ea:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ec:	f002 f9f0 	bl	80037d0 <HAL_TIM_Base_Init>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d148      	bne.n	8001486 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f8:	483a      	ldr	r0, [pc, #232]	@ (80014e4 <MX_TIM1_Init+0x13c>)
 80013fa:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013fe:	f002 fe47 	bl	8004090 <HAL_TIM_ConfigClockSource>
 8001402:	2800      	cmp	r0, #0
 8001404:	d151      	bne.n	80014aa <MX_TIM1_Init+0x102>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001406:	4837      	ldr	r0, [pc, #220]	@ (80014e4 <MX_TIM1_Init+0x13c>)
 8001408:	f002 fa76 	bl	80038f8 <HAL_TIM_PWM_Init>
 800140c:	2800      	cmp	r0, #0
 800140e:	d149      	bne.n	80014a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2200      	movs	r2, #0
 8001412:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001414:	4833      	ldr	r0, [pc, #204]	@ (80014e4 <MX_TIM1_Init+0x13c>)
 8001416:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141c:	f002 ff92 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	2800      	cmp	r0, #0
 8001422:	d13c      	bne.n	800149e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8001424:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001426:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001428:	2604      	movs	r6, #4
 800142a:	2700      	movs	r7, #0
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	482d      	ldr	r0, [pc, #180]	@ (80014e4 <MX_TIM1_Init+0x13c>)
 800142e:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001430:	e9cd 320c 	strd	r3, r2, [sp, #48]	@ 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001434:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001438:	e9cd 6710 	strd	r6, r7, [sp, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800143c:	9212      	str	r2, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143e:	f002 fd35 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 8001442:	bb48      	cbnz	r0, 8001498 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001444:	2204      	movs	r2, #4
 8001446:	4827      	ldr	r0, [pc, #156]	@ (80014e4 <MX_TIM1_Init+0x13c>)
 8001448:	a90c      	add	r1, sp, #48	@ 0x30
 800144a:	f002 fd2f 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 800144e:	bb00      	cbnz	r0, 8001492 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001450:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001452:	2600      	movs	r6, #0
 8001454:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001458:	4822      	ldr	r0, [pc, #136]	@ (80014e4 <MX_TIM1_Init+0x13c>)
 800145a:	a914      	add	r1, sp, #80	@ 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145c:	e9cd 6718 	strd	r6, r7, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001460:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001464:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8001466:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001468:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800146a:	f002 ff9d 	bl	80043a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800146e:	b968      	cbnz	r0, 800148c <MX_TIM1_Init+0xe4>
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <MX_TIM1_Init+0x140>)
 8001474:	6829      	ldr	r1, [r5, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(timHandle->Instance==TIM1)
 800147a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(timHandle->Instance==TIM1)
 8001480:	d016      	beq.n	80014b0 <MX_TIM1_Init+0x108>
}
 8001482:	b01d      	add	sp, #116	@ 0x74
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8001486:	f7ff fec5 	bl	8001214 <Error_Handler>
 800148a:	e7b3      	b.n	80013f4 <MX_TIM1_Init+0x4c>
    Error_Handler();
 800148c:	f7ff fec2 	bl	8001214 <Error_Handler>
 8001490:	e7ee      	b.n	8001470 <MX_TIM1_Init+0xc8>
    Error_Handler();
 8001492:	f7ff febf 	bl	8001214 <Error_Handler>
 8001496:	e7db      	b.n	8001450 <MX_TIM1_Init+0xa8>
    Error_Handler();
 8001498:	f7ff febc 	bl	8001214 <Error_Handler>
 800149c:	e7d2      	b.n	8001444 <MX_TIM1_Init+0x9c>
    Error_Handler();
 800149e:	f7ff feb9 	bl	8001214 <Error_Handler>
 80014a2:	e7bf      	b.n	8001424 <MX_TIM1_Init+0x7c>
    Error_Handler();
 80014a4:	f7ff feb6 	bl	8001214 <Error_Handler>
 80014a8:	e7b2      	b.n	8001410 <MX_TIM1_Init+0x68>
    Error_Handler();
 80014aa:	f7ff feb3 	bl	8001214 <Error_Handler>
 80014ae:	e7aa      	b.n	8001406 <MX_TIM1_Init+0x5e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014b0:	f44f 7440 	mov.w	r4, #768	@ 0x300
 80014b4:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b6:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014bc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80014c0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	480a      	ldr	r0, [pc, #40]	@ (80014ec <MX_TIM1_Init+0x144>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	f042 0204 	orr.w	r2, r2, #4
 80014c8:	619a      	str	r2, [r3, #24]
 80014ca:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014da:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f000 fd1e 	bl	8001f1c <HAL_GPIO_Init>
}
 80014e0:	b01d      	add	sp, #116	@ 0x74
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	20000718 	.word	0x20000718
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40010800 	.word	0x40010800

080014f0 <MX_TIM2_Init>:
  TIM_Encoder_InitTypeDef sConfig = {0};
 80014f0:	2300      	movs	r3, #0
{
 80014f2:	b530      	push	{r4, r5, lr}
  htim2.Instance = TIM2;
 80014f4:	4819      	ldr	r0, [pc, #100]	@ (800155c <MX_TIM2_Init+0x6c>)
{
 80014f6:	b08d      	sub	sp, #52	@ 0x34
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2201      	movs	r2, #1
  htim2.Instance = TIM2;
 80014fa:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001502:	9309      	str	r3, [sp, #36]	@ 0x24
 8001504:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	9300      	str	r3, [sp, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	6183      	str	r3, [r0, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	9301      	str	r3, [sp, #4]
  sConfig.IC2Filter = 10;
 800150e:	230a      	movs	r3, #10
  htim2.Init.Period = 65535;
 8001510:	f64f 71ff 	movw	r1, #65535	@ 0xffff
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001514:	2502      	movs	r5, #2
  htim2.Instance = TIM2;
 8001516:	6004      	str	r4, [r0, #0]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001518:	9204      	str	r2, [sp, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800151a:	2403      	movs	r4, #3
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800151c:	9208      	str	r2, [sp, #32]
  sConfig.IC2Filter = 10;
 800151e:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfig.IC1Filter = 10;
 8001520:	220a      	movs	r2, #10
 8001522:	2302      	movs	r3, #2
  htim2.Init.Period = 65535;
 8001524:	60c1      	str	r1, [r0, #12]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001526:	a902      	add	r1, sp, #8
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001528:	e9cd 4502 	strd	r4, r5, [sp, #8]
  sConfig.IC1Filter = 10;
 800152c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001530:	f002 fb0c 	bl	8003b4c <HAL_TIM_Encoder_Init>
 8001534:	b950      	cbnz	r0, 800154c <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2200      	movs	r2, #0
 8001538:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153a:	4669      	mov	r1, sp
 800153c:	4807      	ldr	r0, [pc, #28]	@ (800155c <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001542:	f002 feff 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	b920      	cbnz	r0, 8001552 <MX_TIM2_Init+0x62>
}
 8001548:	b00d      	add	sp, #52	@ 0x34
 800154a:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800154c:	f7ff fe62 	bl	8001214 <Error_Handler>
 8001550:	e7f1      	b.n	8001536 <MX_TIM2_Init+0x46>
    Error_Handler();
 8001552:	f7ff fe5f 	bl	8001214 <Error_Handler>
}
 8001556:	b00d      	add	sp, #52	@ 0x34
 8001558:	bd30      	pop	{r4, r5, pc}
 800155a:	bf00      	nop
 800155c:	200006d0 	.word	0x200006d0

08001560 <MX_TIM3_Init>:
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001560:	2300      	movs	r3, #0
  htim3.Init.Period = 65535;
 8001562:	f64f 72ff 	movw	r2, #65535	@ 0xffff
{
 8001566:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8001568:	4824      	ldr	r0, [pc, #144]	@ (80015fc <MX_TIM3_Init+0x9c>)
 800156a:	4925      	ldr	r1, [pc, #148]	@ (8001600 <MX_TIM3_Init+0xa0>)
{
 800156c:	b08b      	sub	sp, #44	@ 0x2c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	e9cd 3303 	strd	r3, r3, [sp, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001576:	e9cd 3307 	strd	r3, r3, [sp, #28]
  htim3.Instance = TIM3;
 800157a:	6001      	str	r1, [r0, #0]
  htim3.Init.Period = 65535;
 800157c:	60c2      	str	r2, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	9300      	str	r3, [sp, #0]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001582:	9306      	str	r3, [sp, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001588:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	9301      	str	r3, [sp, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800158c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800158e:	f002 f91f 	bl	80037d0 <HAL_TIM_Base_Init>
 8001592:	bb10      	cbnz	r0, 80015da <MX_TIM3_Init+0x7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001598:	4818      	ldr	r0, [pc, #96]	@ (80015fc <MX_TIM3_Init+0x9c>)
 800159a:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800159e:	f002 fd77 	bl	8004090 <HAL_TIM_ConfigClockSource>
 80015a2:	bb40      	cbnz	r0, 80015f6 <MX_TIM3_Init+0x96>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80015a4:	4815      	ldr	r0, [pc, #84]	@ (80015fc <MX_TIM3_Init+0x9c>)
 80015a6:	f002 fa69 	bl	8003a7c <HAL_TIM_IC_Init>
 80015aa:	bb08      	cbnz	r0, 80015f0 <MX_TIM3_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2200      	movs	r2, #0
 80015ae:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b0:	4669      	mov	r1, sp
 80015b2:	4812      	ldr	r0, [pc, #72]	@ (80015fc <MX_TIM3_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b8:	f002 fec4 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 80015bc:	b9a8      	cbnz	r0, 80015ea <MX_TIM3_Init+0x8a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015be:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015c0:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	480e      	ldr	r0, [pc, #56]	@ (80015fc <MX_TIM3_Init+0x9c>)
 80015c4:	a906      	add	r1, sp, #24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfigIC.ICFilter = 0;
 80015ca:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ce:	f002 fba9 	bl	8003d24 <HAL_TIM_IC_ConfigChannel>
 80015d2:	b928      	cbnz	r0, 80015e0 <MX_TIM3_Init+0x80>
}
 80015d4:	b00b      	add	sp, #44	@ 0x2c
 80015d6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015da:	f7ff fe1b 	bl	8001214 <Error_Handler>
 80015de:	e7d9      	b.n	8001594 <MX_TIM3_Init+0x34>
    Error_Handler();
 80015e0:	f7ff fe18 	bl	8001214 <Error_Handler>
}
 80015e4:	b00b      	add	sp, #44	@ 0x2c
 80015e6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015ea:	f7ff fe13 	bl	8001214 <Error_Handler>
 80015ee:	e7e6      	b.n	80015be <MX_TIM3_Init+0x5e>
    Error_Handler();
 80015f0:	f7ff fe10 	bl	8001214 <Error_Handler>
 80015f4:	e7da      	b.n	80015ac <MX_TIM3_Init+0x4c>
    Error_Handler();
 80015f6:	f7ff fe0d 	bl	8001214 <Error_Handler>
 80015fa:	e7d3      	b.n	80015a4 <MX_TIM3_Init+0x44>
 80015fc:	20000688 	.word	0x20000688
 8001600:	40000400 	.word	0x40000400

08001604 <MX_TIM4_Init>:
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001604:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 36-1;
 8001606:	2123      	movs	r1, #35	@ 0x23
  htim4.Init.Period = 10000-1;
 8001608:	f242 720f 	movw	r2, #9999	@ 0x270f
{
 800160c:	b510      	push	{r4, lr}
  htim4.Instance = TIM4;
 800160e:	4817      	ldr	r0, [pc, #92]	@ (800166c <MX_TIM4_Init+0x68>)
 8001610:	4c17      	ldr	r4, [pc, #92]	@ (8001670 <MX_TIM4_Init+0x6c>)
{
 8001612:	b086      	sub	sp, #24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001618:	e9cd 3303 	strd	r3, r3, [sp, #12]
  htim4.Instance = TIM4;
 800161c:	6004      	str	r4, [r0, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	9300      	str	r3, [sp, #0]
  htim4.Init.Prescaler = 36-1;
 8001622:	6041      	str	r1, [r0, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001628:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162a:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800162c:	f002 f8d0 	bl	80037d0 <HAL_TIM_Base_Init>
 8001630:	b990      	cbnz	r0, 8001658 <MX_TIM4_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001636:	480d      	ldr	r0, [pc, #52]	@ (800166c <MX_TIM4_Init+0x68>)
 8001638:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800163c:	f002 fd28 	bl	8004090 <HAL_TIM_ConfigClockSource>
 8001640:	b988      	cbnz	r0, 8001666 <MX_TIM4_Init+0x62>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2200      	movs	r2, #0
 8001644:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001646:	4669      	mov	r1, sp
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <MX_TIM4_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800164e:	f002 fe79 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	b920      	cbnz	r0, 800165e <MX_TIM4_Init+0x5a>
}
 8001654:	b006      	add	sp, #24
 8001656:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001658:	f7ff fddc 	bl	8001214 <Error_Handler>
 800165c:	e7e9      	b.n	8001632 <MX_TIM4_Init+0x2e>
    Error_Handler();
 800165e:	f7ff fdd9 	bl	8001214 <Error_Handler>
}
 8001662:	b006      	add	sp, #24
 8001664:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001666:	f7ff fdd5 	bl	8001214 <Error_Handler>
 800166a:	e7ea      	b.n	8001642 <MX_TIM4_Init+0x3e>
 800166c:	20000640 	.word	0x20000640
 8001670:	40000800 	.word	0x40000800

08001674 <HAL_TIM_Base_MspInit>:
{
 8001674:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	2400      	movs	r4, #0
  if(tim_baseHandle->Instance==TIM1)
 8001678:	4a29      	ldr	r2, [pc, #164]	@ (8001720 <HAL_TIM_Base_MspInit+0xac>)
 800167a:	6803      	ldr	r3, [r0, #0]
{
 800167c:	b089      	sub	sp, #36	@ 0x24
  if(tim_baseHandle->Instance==TIM1)
 800167e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001684:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(tim_baseHandle->Instance==TIM1)
 8001688:	d007      	beq.n	800169a <HAL_TIM_Base_MspInit+0x26>
  else if(tim_baseHandle->Instance==TIM3)
 800168a:	4a26      	ldr	r2, [pc, #152]	@ (8001724 <HAL_TIM_Base_MspInit+0xb0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d024      	beq.n	80016da <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8001690:	4a25      	ldr	r2, [pc, #148]	@ (8001728 <HAL_TIM_Base_MspInit+0xb4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_TIM_Base_MspInit+0x3e>
}
 8001696:	b009      	add	sp, #36	@ 0x24
 8001698:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_TIM_Base_MspInit+0xb8>)
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	9b00      	ldr	r3, [sp, #0]
}
 80016ae:	b009      	add	sp, #36	@ 0x24
 80016b0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b2:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <HAL_TIM_Base_MspInit+0xb8>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80016b4:	4622      	mov	r2, r4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b6:	69d9      	ldr	r1, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80016b8:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ba:	f041 0104 	orr.w	r1, r1, #4
 80016be:	61d9      	str	r1, [r3, #28]
 80016c0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80016c2:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	9303      	str	r3, [sp, #12]
 80016ca:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80016cc:	f000 fb42 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016d0:	201e      	movs	r0, #30
 80016d2:	f000 fb7b 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 80016d6:	b009      	add	sp, #36	@ 0x24
 80016d8:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016da:	2540      	movs	r5, #64	@ 0x40
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <HAL_TIM_Base_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	4813      	ldr	r0, [pc, #76]	@ (8001730 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e4:	f042 0202 	orr.w	r2, r2, #2
 80016e8:	61da      	str	r2, [r3, #28]
 80016ea:	69da      	ldr	r2, [r3, #28]
 80016ec:	f002 0202 	and.w	r2, r2, #2
 80016f0:	9201      	str	r2, [sp, #4]
 80016f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	f042 0204 	orr.w	r2, r2, #4
 80016fa:	619a      	str	r2, [r3, #24]
 80016fc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016fe:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f000 fc08 	bl	8001f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800170c:	4622      	mov	r2, r4
 800170e:	2105      	movs	r1, #5
 8001710:	201d      	movs	r0, #29
 8001712:	f000 fb1f 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001716:	201d      	movs	r0, #29
 8001718:	f000 fb58 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 800171c:	b009      	add	sp, #36	@ 0x24
 800171e:	bd30      	pop	{r4, r5, pc}
 8001720:	40012c00 	.word	0x40012c00
 8001724:	40000400 	.word	0x40000400
 8001728:	40000800 	.word	0x40000800
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800

08001734 <HAL_TIM_Encoder_MspInit>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	2300      	movs	r3, #0
{
 8001736:	b510      	push	{r4, lr}
  if(tim_encoderHandle->Instance==TIM2)
 8001738:	6802      	ldr	r2, [r0, #0]
{
 800173a:	b086      	sub	sp, #24
  if(tim_encoderHandle->Instance==TIM2)
 800173c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001744:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001748:	d001      	beq.n	800174e <HAL_TIM_Encoder_MspInit+0x1a>
}
 800174a:	b006      	add	sp, #24
 800174c:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800174e:	2403      	movs	r4, #3
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001750:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001754:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001758:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	480c      	ldr	r0, [pc, #48]	@ (800178c <HAL_TIM_Encoder_MspInit+0x58>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	61da      	str	r2, [r3, #28]
 8001762:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001766:	f002 0201 	and.w	r2, r2, #1
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	f042 0204 	orr.w	r2, r2, #4
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001778:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f000 fbcb 	bl	8001f1c <HAL_GPIO_Init>
}
 8001786:	b006      	add	sp, #24
 8001788:	bd10      	pop	{r4, pc}
 800178a:	bf00      	nop
 800178c:	40010800 	.word	0x40010800

08001790 <MX_USART1_UART_Init>:
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001790:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8001792:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001796:	220c      	movs	r2, #12
{
 8001798:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800179a:	4809      	ldr	r0, [pc, #36]	@ (80017c0 <MX_USART1_UART_Init+0x30>)
 800179c:	4c09      	ldr	r4, [pc, #36]	@ (80017c4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 800179e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Instance = USART1;
 80017aa:	6004      	str	r4, [r0, #0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ae:	f002 fe29 	bl	8004404 <HAL_UART_Init>
 80017b2:	b900      	cbnz	r0, 80017b6 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80017ba:	f7ff bd2b 	b.w	8001214 <Error_Handler>
 80017be:	bf00      	nop
 80017c0:	20000760 	.word	0x20000760
 80017c4:	40013800 	.word	0x40013800

080017c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 80017cc:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <HAL_UART_MspInit+0x8c>)
 80017ce:	6802      	ldr	r2, [r0, #0]
{
 80017d0:	b087      	sub	sp, #28
  if(uartHandle->Instance==USART1)
 80017d2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80017d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(uartHandle->Instance==USART1)
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017de:	b007      	add	sp, #28
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 80017e6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e8:	2640      	movs	r6, #64	@ 0x40
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017ee:	619a      	str	r2, [r3, #24]
 80017f0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f2:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	f042 0208 	orr.w	r2, r2, #8
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	4813      	ldr	r0, [pc, #76]	@ (8001858 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001810:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001814:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001816:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f000 fb7f 	bl	8001f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800181e:	2280      	movs	r2, #128	@ 0x80
 8001820:	2300      	movs	r3, #0
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001822:	4d0e      	ldr	r5, [pc, #56]	@ (800185c <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	a902      	add	r1, sp, #8
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001828:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f000 fb75 	bl	8001f1c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001832:	686b      	ldr	r3, [r5, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001834:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001836:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800183a:	f043 0304 	orr.w	r3, r3, #4
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800183e:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001840:	606b      	str	r3, [r5, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001842:	2025      	movs	r0, #37	@ 0x25
 8001844:	f000 fa86 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001848:	2025      	movs	r0, #37	@ 0x25
 800184a:	f000 fabf 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 800184e:	b007      	add	sp, #28
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001852:	bf00      	nop
 8001854:	40013800 	.word	0x40013800
 8001858:	40010c00 	.word	0x40010c00
 800185c:	40010000 	.word	0x40010000

08001860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001860:	f7ff fda0 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001864:	480b      	ldr	r0, [pc, #44]	@ (8001894 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001866:	490c      	ldr	r1, [pc, #48]	@ (8001898 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001868:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <LoopFillZerobss+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800187c:	4c09      	ldr	r4, [pc, #36]	@ (80018a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188a:	f006 fcd5 	bl	8008238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188e:	f7ff fc67 	bl	8001160 <main>
  bx lr
 8001892:	4770      	bx	lr
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 800189c:	0800859c 	.word	0x0800859c
  ldr r2, =_sbss
 80018a0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80018a4:	2000264c 	.word	0x2000264c

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>
	...

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b2:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <HAL_InitTick+0x3c>)
{
 80018b4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b6:	7811      	ldrb	r1, [r2, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <HAL_InitTick+0x40>)
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	fbb2 f0f3 	udiv	r0, r2, r3
 80018c4:	f000 fa90 	bl	8001de8 <HAL_SYSTICK_Config>
 80018c8:	b908      	cbnz	r0, 80018ce <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	2d0f      	cmp	r5, #15
 80018cc:	d901      	bls.n	80018d2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80018ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80018d0:	bd38      	pop	{r3, r4, r5, pc}
 80018d2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	4602      	mov	r2, r0
 80018d6:	4629      	mov	r1, r5
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 fa3a 	bl	8001d54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_InitTick+0x44>)
 80018e2:	4620      	mov	r0, r4
 80018e4:	601d      	str	r5, [r3, #0]
}
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	20000004 	.word	0x20000004
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_Init+0x20>)
{
 80018f6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001902:	f000 fa15 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	200f      	movs	r0, #15
 8001908:	f7ff ffd0 	bl	80018ac <HAL_InitTick>
  HAL_MspInit();
 800190c:	f7ff fce2 	bl	80012d4 <HAL_MspInit>
}
 8001910:	2000      	movs	r0, #0
 8001912:	bd08      	pop	{r3, pc}
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001918:	4a03      	ldr	r2, [pc, #12]	@ (8001928 <HAL_IncTick+0x10>)
 800191a:	4b04      	ldr	r3, [pc, #16]	@ (800192c <HAL_IncTick+0x14>)
 800191c:	6811      	ldr	r1, [r2, #0]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	440b      	add	r3, r1
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200007a8 	.word	0x200007a8
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001930:	4b01      	ldr	r3, [pc, #4]	@ (8001938 <HAL_GetTick+0x8>)
 8001932:	6818      	ldr	r0, [r3, #0]
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200007a8 	.word	0x200007a8

0800193c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800193c:	2800      	cmp	r0, #0
 800193e:	d07d      	beq.n	8001a3c <HAL_CAN_Init+0x100>
{
 8001940:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001942:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001946:	4604      	mov	r4, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d074      	beq.n	8001a36 <HAL_CAN_Init+0xfa>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800194c:	6822      	ldr	r2, [r4, #0]
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001956:	f7ff ffeb 	bl	8001930 <HAL_GetTick>
 800195a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800195c:	e004      	b.n	8001968 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800195e:	f7ff ffe7 	bl	8001930 <HAL_GetTick>
 8001962:	1b40      	subs	r0, r0, r5
 8001964:	280a      	cmp	r0, #10
 8001966:	d85d      	bhi.n	8001a24 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	07d1      	lsls	r1, r2, #31
 800196e:	d5f6      	bpl.n	800195e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f022 0202 	bic.w	r2, r2, #2
 8001976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001978:	f7ff ffda 	bl	8001930 <HAL_GetTick>
 800197c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197e:	e004      	b.n	800198a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001980:	f7ff ffd6 	bl	8001930 <HAL_GetTick>
 8001984:	1b40      	subs	r0, r0, r5
 8001986:	280a      	cmp	r0, #10
 8001988:	d84c      	bhi.n	8001a24 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	0792      	lsls	r2, r2, #30
 8001990:	d4f6      	bmi.n	8001980 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001992:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001994:	2500      	movs	r5, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001996:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001998:	681a      	ldr	r2, [r3, #0]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800199a:	f04f 0c01 	mov.w	ip, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199e:	bf0c      	ite	eq
 80019a0:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a4:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80019a8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80019aa:	7e62      	ldrb	r2, [r4, #25]

  /* Return function status */
  return HAL_OK;
 80019ac:	4628      	mov	r0, r5
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ae:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	bf0c      	ite	eq
 80019b4:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b8:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 80019bc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019be:	7ea2      	ldrb	r2, [r4, #26]
 80019c0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	bf0c      	ite	eq
 80019c6:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019ca:	f022 0220 	bicne.w	r2, r2, #32
 80019ce:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019d0:	7ee2      	ldrb	r2, [r4, #27]
 80019d2:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	bf0c      	ite	eq
 80019d8:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019dc:	f042 0210 	orrne.w	r2, r2, #16
 80019e0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019e2:	7f22      	ldrb	r2, [r4, #28]
 80019e4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	bf0c      	ite	eq
 80019ea:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ee:	f022 0208 	bicne.w	r2, r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019f4:	7f62      	ldrb	r2, [r4, #29]
 80019f6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	bf0c      	ite	eq
 80019fc:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a00:	f022 0204 	bicne.w	r2, r2, #4
 8001a04:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a06:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	6921      	ldr	r1, [r4, #16]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	6961      	ldr	r1, [r4, #20]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	6861      	ldr	r1, [r4, #4]
 8001a16:	3901      	subs	r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a1c:	6265      	str	r5, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001a1e:	f884 c020 	strb.w	ip, [r4, #32]
}
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a24:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2e:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a30:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001a36:	f7ff fa11 	bl	8000e5c <HAL_CAN_MspInit>
 8001a3a:	e787      	b.n	800194c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop

08001a44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  Rx FIFO 0 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <HAL_CAN_IRQHandler>:
{
 8001a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a78:	6803      	ldr	r3, [r0, #0]
{
 8001a7a:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a7c:	695c      	ldr	r4, [r3, #20]
{
 8001a7e:	b083      	sub	sp, #12
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a80:	f014 0601 	ands.w	r6, r4, #1
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a84:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a88:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a8a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a8e:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a92:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a96:	d025      	beq.n	8001ae4 <HAL_CAN_IRQHandler+0x70>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a98:	07fa      	lsls	r2, r7, #31
 8001a9a:	f100 80a2 	bmi.w	8001be2 <HAL_CAN_IRQHandler+0x16e>
{
 8001a9e:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8001aa2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001aa6:	2100      	movs	r1, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aa8:	05fb      	lsls	r3, r7, #23
 8001aaa:	f140 80af 	bpl.w	8001c0c <HAL_CAN_IRQHandler+0x198>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ab2:	682b      	ldr	r3, [r5, #0]
 8001ab4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ab6:	05ba      	lsls	r2, r7, #22
 8001ab8:	f100 80a3 	bmi.w	8001c02 <HAL_CAN_IRQHandler+0x18e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001abc:	057b      	lsls	r3, r7, #21
 8001abe:	d403      	bmi.n	8001ac8 <HAL_CAN_IRQHandler+0x54>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ac0:	053e      	lsls	r6, r7, #20
 8001ac2:	f140 8121 	bpl.w	8001d08 <HAL_CAN_IRQHandler+0x294>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ac6:	4606      	mov	r6, r0
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ac8:	03f9      	lsls	r1, r7, #15
 8001aca:	d50b      	bpl.n	8001ae4 <HAL_CAN_IRQHandler+0x70>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001acc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ad4:	03ba      	lsls	r2, r7, #14
 8001ad6:	f100 80f9 	bmi.w	8001ccc <HAL_CAN_IRQHandler+0x258>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ada:	037b      	lsls	r3, r7, #13
 8001adc:	f140 80ea 	bpl.w	8001cb4 <HAL_CAN_IRQHandler+0x240>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ae0:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ae4:	0721      	lsls	r1, r4, #28
 8001ae6:	d502      	bpl.n	8001aee <HAL_CAN_IRQHandler+0x7a>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ae8:	f01b 0f10 	tst.w	fp, #16
 8001aec:	d173      	bne.n	8001bd6 <HAL_CAN_IRQHandler+0x162>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aee:	0762      	lsls	r2, r4, #29
 8001af0:	d503      	bpl.n	8001afa <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001af2:	f01b 0f08 	tst.w	fp, #8
 8001af6:	f040 80a8 	bne.w	8001c4a <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001afa:	07a3      	lsls	r3, r4, #30
 8001afc:	d504      	bpl.n	8001b08 <HAL_CAN_IRQHandler+0x94>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001afe:	682b      	ldr	r3, [r5, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	079f      	lsls	r7, r3, #30
 8001b04:	f040 808b 	bne.w	8001c1e <HAL_CAN_IRQHandler+0x1aa>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b08:	0660      	lsls	r0, r4, #25
 8001b0a:	d502      	bpl.n	8001b12 <HAL_CAN_IRQHandler+0x9e>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b0c:	f01a 0f10 	tst.w	sl, #16
 8001b10:	d15b      	bne.n	8001bca <HAL_CAN_IRQHandler+0x156>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b12:	06a1      	lsls	r1, r4, #26
 8001b14:	d502      	bpl.n	8001b1c <HAL_CAN_IRQHandler+0xa8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b16:	f01a 0f08 	tst.w	sl, #8
 8001b1a:	d179      	bne.n	8001c10 <HAL_CAN_IRQHandler+0x19c>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b1c:	06e2      	lsls	r2, r4, #27
 8001b1e:	d503      	bpl.n	8001b28 <HAL_CAN_IRQHandler+0xb4>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	079b      	lsls	r3, r3, #30
 8001b26:	d17e      	bne.n	8001c26 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b28:	03a7      	lsls	r7, r4, #14
 8001b2a:	d502      	bpl.n	8001b32 <HAL_CAN_IRQHandler+0xbe>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b2c:	f018 0f10 	tst.w	r8, #16
 8001b30:	d17d      	bne.n	8001c2e <HAL_CAN_IRQHandler+0x1ba>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b32:	03e0      	lsls	r0, r4, #15
 8001b34:	d502      	bpl.n	8001b3c <HAL_CAN_IRQHandler+0xc8>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b36:	f018 0f08 	tst.w	r8, #8
 8001b3a:	d17f      	bne.n	8001c3c <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b3c:	0421      	lsls	r1, r4, #16
 8001b3e:	d53f      	bpl.n	8001bc0 <HAL_CAN_IRQHandler+0x14c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b40:	f018 0f04 	tst.w	r8, #4
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b44:	682b      	ldr	r3, [r5, #0]
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b46:	d039      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x148>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b48:	05e2      	lsls	r2, r4, #23
 8001b4a:	d504      	bpl.n	8001b56 <HAL_CAN_IRQHandler+0xe2>
 8001b4c:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b50:	bf18      	it	ne
 8001b52:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b56:	05a7      	lsls	r7, r4, #22
 8001b58:	d47e      	bmi.n	8001c58 <HAL_CAN_IRQHandler+0x1e4>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b5a:	0561      	lsls	r1, r4, #21
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b5c:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b60:	d528      	bpl.n	8001bb4 <HAL_CAN_IRQHandler+0x140>
 8001b62:	f019 0f04 	tst.w	r9, #4
 8001b66:	d025      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x140>
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b68:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b6c:	2a00      	cmp	r2, #0
 8001b6e:	f000 8083 	beq.w	8001c78 <HAL_CAN_IRQHandler+0x204>
 8001b72:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 8001b76:	d07f      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x204>
        switch (esrflags & CAN_ESR_LEC)
 8001b78:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 8001b7c:	f000 80cf 	beq.w	8001d1e <HAL_CAN_IRQHandler+0x2aa>
 8001b80:	d87d      	bhi.n	8001c7e <HAL_CAN_IRQHandler+0x20a>
 8001b82:	f1b9 0f20 	cmp.w	r9, #32
 8001b86:	f000 80b3 	beq.w	8001cf0 <HAL_CAN_IRQHandler+0x27c>
 8001b8a:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8001b8e:	f040 8085 	bne.w	8001c9c <HAL_CAN_IRQHandler+0x228>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b92:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b94:	699a      	ldr	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b96:	f046 0620 	orr.w	r6, r6, #32
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b9e:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ba0:	6059      	str	r1, [r3, #4]
    hcan->ErrorCode |= errorcode;
 8001ba2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001ba4:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8001ba6:	4333      	orrs	r3, r6
 8001ba8:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001baa:	f7ff ff61 	bl	8001a70 <HAL_CAN_ErrorCallback>
}
 8001bae:	b003      	add	sp, #12
 8001bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bb4:	b112      	cbz	r2, 8001bbc <HAL_CAN_IRQHandler+0x148>
 8001bb6:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 8001bba:	d1dd      	bne.n	8001b78 <HAL_CAN_IRQHandler+0x104>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bc0:	2e00      	cmp	r6, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_CAN_IRQHandler+0x12e>
}
 8001bc4:	b003      	add	sp, #12
 8001bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bca:	2210      	movs	r2, #16
 8001bcc:	682b      	ldr	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bce:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	e79d      	b.n	8001b12 <HAL_CAN_IRQHandler+0x9e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	682b      	ldr	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bda:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	e785      	b.n	8001aee <HAL_CAN_IRQHandler+0x7a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001be2:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001be4:	07be      	lsls	r6, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001be6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001be8:	d443      	bmi.n	8001c72 <HAL_CAN_IRQHandler+0x1fe>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bea:	0779      	lsls	r1, r7, #29
 8001bec:	d467      	bmi.n	8001cbe <HAL_CAN_IRQHandler+0x24a>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bee:	073a      	lsls	r2, r7, #28
 8001bf0:	f140 8087 	bpl.w	8001d02 <HAL_CAN_IRQHandler+0x28e>
 8001bf4:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
 8001bf8:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c00:	e752      	b.n	8001aa8 <HAL_CAN_IRQHandler+0x34>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c02:	4628      	mov	r0, r5
 8001c04:	9101      	str	r1, [sp, #4]
 8001c06:	f7ff ff1d 	bl	8001a44 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c0a:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c0c:	460e      	mov	r6, r1
 8001c0e:	e75b      	b.n	8001ac8 <HAL_CAN_IRQHandler+0x54>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c10:	2208      	movs	r2, #8
 8001c12:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c14:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c16:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c18:	f7ff ff24 	bl	8001a64 <HAL_CAN_RxFifo1FullCallback>
 8001c1c:	e77e      	b.n	8001b1c <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f7ff ff1a 	bl	8001a58 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001c24:	e770      	b.n	8001b08 <HAL_CAN_IRQHandler+0x94>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c26:	4628      	mov	r0, r5
 8001c28:	f7ff ff1a 	bl	8001a60 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001c2c:	e77c      	b.n	8001b28 <HAL_CAN_IRQHandler+0xb4>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c2e:	2210      	movs	r2, #16
 8001c30:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8001c32:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c34:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001c36:	f7ff ff17 	bl	8001a68 <HAL_CAN_SleepCallback>
 8001c3a:	e77a      	b.n	8001b32 <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c40:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c42:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c44:	f7ff ff12 	bl	8001a6c <HAL_CAN_WakeUpFromRxMsgCallback>
 8001c48:	e778      	b.n	8001b3c <HAL_CAN_IRQHandler+0xc8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c4e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c50:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c52:	f7ff ff03 	bl	8001a5c <HAL_CAN_RxFifo0FullCallback>
 8001c56:	e750      	b.n	8001afa <HAL_CAN_IRQHandler+0x86>
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c58:	f019 0f02 	tst.w	r9, #2
 8001c5c:	f43f af7d 	beq.w	8001b5a <HAL_CAN_IRQHandler+0xe6>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c60:	0560      	lsls	r0, r4, #21
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c62:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c66:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c6a:	f53f af7a 	bmi.w	8001b62 <HAL_CAN_IRQHandler+0xee>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c6e:	b11a      	cbz	r2, 8001c78 <HAL_CAN_IRQHandler+0x204>
 8001c70:	e77f      	b.n	8001b72 <HAL_CAN_IRQHandler+0xfe>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c72:	f7ff fee5 	bl	8001a40 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c76:	e712      	b.n	8001a9e <HAL_CAN_IRQHandler+0x2a>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c78:	2204      	movs	r2, #4
 8001c7a:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c7c:	e791      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x12e>
        switch (esrflags & CAN_ESR_LEC)
 8001c7e:	f1b9 0f50 	cmp.w	r9, #80	@ 0x50
 8001c82:	d027      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x260>
 8001c84:	f1b9 0f60 	cmp.w	r9, #96	@ 0x60
 8001c88:	d12d      	bne.n	8001ce6 <HAL_CAN_IRQHandler+0x272>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c8a:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c8c:	699a      	ldr	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c8e:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c92:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c96:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c98:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c9a:	e782      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x12e>
        switch (esrflags & CAN_ESR_LEC)
 8001c9c:	f1b9 0f10 	cmp.w	r9, #16
 8001ca0:	d121      	bne.n	8001ce6 <HAL_CAN_IRQHandler+0x272>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ca2:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ca4:	699a      	ldr	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_STF;
 8001ca6:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001caa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cae:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cb0:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb2:	e776      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x12e>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cb4:	0338      	lsls	r0, r7, #12
 8001cb6:	d52e      	bpl.n	8001d16 <HAL_CAN_IRQHandler+0x2a2>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cb8:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8001cbc:	e712      	b.n	8001ae4 <HAL_CAN_IRQHandler+0x70>
 8001cbe:	f44f 5620 	mov.w	r6, #10240	@ 0x2800
 8001cc2:	f44f 4090 	mov.w	r0, #18432	@ 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cca:	e6ed      	b.n	8001aa8 <HAL_CAN_IRQHandler+0x34>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f7ff febb 	bl	8001a48 <HAL_CAN_TxMailbox2CompleteCallback>
 8001cd2:	e707      	b.n	8001ae4 <HAL_CAN_IRQHandler+0x70>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cd4:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cd6:	699a      	ldr	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BD;
 8001cd8:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cdc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ce0:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ce2:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ce4:	e75d      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x12e>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cec:	619a      	str	r2, [r3, #24]
 8001cee:	e765      	b.n	8001bbc <HAL_CAN_IRQHandler+0x148>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cf0:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cf2:	699a      	ldr	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cf4:	f046 0610 	orr.w	r6, r6, #16
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cf8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cfc:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cfe:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d00:	e74f      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x12e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d02:	f7ff fea3 	bl	8001a4c <HAL_CAN_TxMailbox0AbortCallback>
 8001d06:	e6ca      	b.n	8001a9e <HAL_CAN_IRQHandler+0x2a>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d08:	4628      	mov	r0, r5
 8001d0a:	9101      	str	r1, [sp, #4]
 8001d0c:	f7ff fea0 	bl	8001a50 <HAL_CAN_TxMailbox1AbortCallback>
 8001d10:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d12:	460e      	mov	r6, r1
 8001d14:	e6d8      	b.n	8001ac8 <HAL_CAN_IRQHandler+0x54>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d16:	4628      	mov	r0, r5
 8001d18:	f7ff fe9c 	bl	8001a54 <HAL_CAN_TxMailbox2AbortCallback>
 8001d1c:	e6e2      	b.n	8001ae4 <HAL_CAN_IRQHandler+0x70>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d1e:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d20:	699a      	ldr	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BR;
 8001d22:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d26:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d2a:	619a      	str	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d2c:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d2e:	e738      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x12e>

08001d30 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d30:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4906      	ldr	r1, [pc, #24]	@ (8001d50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d36:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001d4c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d56:	b500      	push	{lr}
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5e:	f1c3 0e07 	rsb	lr, r3, #7
 8001d62:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6a:	bf28      	it	cs
 8001d6c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d70:	f1bc 0f06 	cmp.w	ip, #6
 8001d74:	d91c      	bls.n	8001db0 <HAL_NVIC_SetPriority+0x5c>
 8001d76:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001d82:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	fa03 f30e 	lsl.w	r3, r3, lr
 8001d8e:	ea21 0303 	bic.w	r3, r1, r3
 8001d92:	fa03 f30c 	lsl.w	r3, r3, ip
 8001d96:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	db0a      	blt.n	8001db6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001da4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001da8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001db0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	4694      	mov	ip, r2
 8001db4:	e7e7      	b.n	8001d86 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_NVIC_SetPriority+0x74>)
 8001db8:	f000 000f 	and.w	r0, r0, #15
 8001dbc:	4402      	add	r2, r0
 8001dbe:	7613      	strb	r3, [r2, #24]
 8001dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dc4:	e000ed00 	.word	0xe000ed00
 8001dc8:	e000ecfc 	.word	0xe000ecfc

08001dcc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	db07      	blt.n	8001de0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f000 011f 	and.w	r1, r0, #31
 8001dd6:	4a03      	ldr	r2, [pc, #12]	@ (8001de4 <HAL_NVIC_EnableIRQ+0x18>)
 8001dd8:	0940      	lsrs	r0, r0, #5
 8001dda:	408b      	lsls	r3, r1
 8001ddc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	3801      	subs	r0, #1
 8001dea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001dee:	d301      	bcc.n	8001df4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001df2:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	2107      	movs	r1, #7
{
 8001e00:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	4c04      	ldr	r4, [pc, #16]	@ (8001e14 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e04:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e10:	6119      	str	r1, [r3, #16]
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e18:	b180      	cbz	r0, 8001e3c <HAL_CRC_Init+0x24>
{
 8001e1a:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e1c:	7943      	ldrb	r3, [r0, #5]
 8001e1e:	4604      	mov	r4, r0
 8001e20:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e24:	b11b      	cbz	r3, 8001e2e <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e26:	2301      	movs	r3, #1
 8001e28:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001e2a:	2000      	movs	r0, #0
}
 8001e2c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001e2e:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001e30:	f7ff f870 	bl	8000f14 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8001e34:	2301      	movs	r3, #1
 8001e36:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8001e38:	2000      	movs	r0, #0
}
 8001e3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e3c:	2001      	movs	r0, #1
}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e40:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8001e44:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	2a02      	cmp	r2, #2
 8001e48:	d006      	beq.n	8001e58 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4e:	2200      	movs	r2, #0
    
    return HAL_ERROR;
 8001e50:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001e52:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8001e56:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e58:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5c:	681a      	ldr	r2, [r3, #0]
  return status; 
 8001e5e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e60:	6811      	ldr	r1, [r2, #0]
 8001e62:	f021 010e 	bic.w	r1, r1, #14
 8001e66:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e68:	6811      	ldr	r1, [r2, #0]
 8001e6a:	f021 0101 	bic.w	r1, r1, #1
 8001e6e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e70:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	@ 0x3c
 8001e74:	fa0c f202 	lsl.w	r2, ip, r2
 8001e78:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001e7a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	f883 c021 	strb.w	ip, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e88:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{  
 8001e8c:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e8e:	2a02      	cmp	r2, #2
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e92:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e96:	639a      	str	r2, [r3, #56]	@ 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001e98:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9a:	6802      	ldr	r2, [r0, #0]
{  
 8001e9c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9e:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ea0:	481b      	ldr	r0, [pc, #108]	@ (8001f10 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea2:	f021 010e 	bic.w	r1, r1, #14
 8001ea6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ea8:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001eaa:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8001eac:	f021 0101 	bic.w	r1, r1, #1
 8001eb0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001eb2:	d022      	beq.n	8001efa <HAL_DMA_Abort_IT+0x72>
 8001eb4:	4917      	ldr	r1, [pc, #92]	@ (8001f14 <HAL_DMA_Abort_IT+0x8c>)
 8001eb6:	428a      	cmp	r2, r1
 8001eb8:	d01d      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0x6e>
 8001eba:	3114      	adds	r1, #20
 8001ebc:	428a      	cmp	r2, r1
 8001ebe:	d01e      	beq.n	8001efe <HAL_DMA_Abort_IT+0x76>
 8001ec0:	3114      	adds	r1, #20
 8001ec2:	428a      	cmp	r2, r1
 8001ec4:	d01e      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x7c>
 8001ec6:	3114      	adds	r1, #20
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	d01e      	beq.n	8001f0a <HAL_DMA_Abort_IT+0x82>
 8001ecc:	3114      	adds	r1, #20
 8001ece:	428a      	cmp	r2, r1
 8001ed0:	bf14      	ite	ne
 8001ed2:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 8001ed6:	f44f 1280 	moveq.w	r2, #1048576	@ 0x100000
    hdma->State = HAL_DMA_STATE_READY;
 8001eda:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001edc:	2100      	movs	r1, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ede:	4c0e      	ldr	r4, [pc, #56]	@ (8001f18 <HAL_DMA_Abort_IT+0x90>)
 8001ee0:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 8001ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001ee4:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001ee8:	f883 1020 	strb.w	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8001eec:	b10a      	cbz	r2, 8001ef2 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2000      	movs	r0, #0
}
 8001ef4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	e7ef      	b.n	8001eda <HAL_DMA_Abort_IT+0x52>
 8001efa:	2201      	movs	r2, #1
 8001efc:	e7ed      	b.n	8001eda <HAL_DMA_Abort_IT+0x52>
 8001efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f02:	e7ea      	b.n	8001eda <HAL_DMA_Abort_IT+0x52>
 8001f04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f08:	e7e7      	b.n	8001eda <HAL_DMA_Abort_IT+0x52>
 8001f0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f0e:	e7e4      	b.n	8001eda <HAL_DMA_Abort_IT+0x52>
 8001f10:	40020008 	.word	0x40020008
 8001f14:	4002001c 	.word	0x4002001c
 8001f18:	40020000 	.word	0x40020000

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f20:	680d      	ldr	r5, [r1, #0]
{
 8001f22:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f24:	2d00      	cmp	r5, #0
 8001f26:	f000 80c3 	beq.w	80020b0 <HAL_GPIO_Init+0x194>
 8001f2a:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2c:	4e80      	ldr	r6, [pc, #512]	@ (8002130 <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 8001f2e:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8001f30:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 8001f32:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 8002134 <HAL_GPIO_Init+0x218>
 8001f36:	4f80      	ldr	r7, [pc, #512]	@ (8002138 <HAL_GPIO_Init+0x21c>)
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001f3a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3c:	fa35 f403 	lsrs.w	r4, r5, r3
 8001f40:	f102 0204 	add.w	r2, r2, #4
 8001f44:	f000 80b4 	beq.w	80020b0 <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 8001f48:	2401      	movs	r4, #1
 8001f4a:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001f4c:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f50:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8001f54:	d1f1      	bne.n	8001f3a <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001f56:	684d      	ldr	r5, [r1, #4]
 8001f58:	2d12      	cmp	r5, #18
 8001f5a:	f200 80ac 	bhi.w	80020b6 <HAL_GPIO_Init+0x19a>
 8001f5e:	2d12      	cmp	r5, #18
 8001f60:	d81a      	bhi.n	8001f98 <HAL_GPIO_Init+0x7c>
 8001f62:	e8df f005 	tbb	[pc, r5]
 8001f66:	c5b3      	.short	0xc5b3
 8001f68:	1919ccc1 	.word	0x1919ccc1
 8001f6c:	19191919 	.word	0x19191919
 8001f70:	19191919 	.word	0x19191919
 8001f74:	bd191919 	.word	0xbd191919
 8001f78:	c8          	.byte	0xc8
 8001f79:	00          	.byte	0x00
 8001f7a:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 800213c <HAL_GPIO_Init+0x220>
 8001f7e:	4575      	cmp	r5, lr
 8001f80:	f000 80a4 	beq.w	80020cc <HAL_GPIO_Init+0x1b0>
 8001f84:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 8001f88:	4575      	cmp	r5, lr
 8001f8a:	f000 809f 	beq.w	80020cc <HAL_GPIO_Init+0x1b0>
 8001f8e:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8001f92:	4575      	cmp	r5, lr
 8001f94:	f000 809a 	beq.w	80020cc <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f98:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8001f9c:	bf9c      	itt	ls
 8001f9e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa0:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fa2:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa6:	bf84      	itt	hi
 8001fa8:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fac:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb0:	f8de 4000 	ldr.w	r4, [lr]
 8001fb4:	fa0a f90b 	lsl.w	r9, sl, fp
 8001fb8:	fa05 fb0b 	lsl.w	fp, r5, fp
 8001fbc:	ea24 040b 	bic.w	r4, r4, fp
 8001fc0:	ea44 0409 	orr.w	r4, r4, r9
 8001fc4:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc8:	684c      	ldr	r4, [r1, #4]
 8001fca:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8001fce:	f000 8085 	beq.w	80020dc <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd2:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fd6:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fda:	f04e 0e01 	orr.w	lr, lr, #1
 8001fde:	f8c6 e018 	str.w	lr, [r6, #24]
 8001fe2:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fea:	f00e 0e01 	and.w	lr, lr, #1
 8001fee:	f8cd e004 	str.w	lr, [sp, #4]
 8001ff2:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff6:	f023 0e03 	bic.w	lr, r3, #3
 8001ffa:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 8001ffe:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 8002002:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002006:	fa05 f509 	lsl.w	r5, r5, r9
 800200a:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800200e:	f8df b130 	ldr.w	fp, [pc, #304]	@ 8002140 <HAL_GPIO_Init+0x224>
 8002012:	4558      	cmp	r0, fp
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x122>
 8002016:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 800201a:	4558      	cmp	r0, fp
 800201c:	d079      	beq.n	8002112 <HAL_GPIO_Init+0x1f6>
 800201e:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8002144 <HAL_GPIO_Init+0x228>
 8002022:	4558      	cmp	r0, fp
 8002024:	d06e      	beq.n	8002104 <HAL_GPIO_Init+0x1e8>
 8002026:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8002148 <HAL_GPIO_Init+0x22c>
 800202a:	4558      	cmp	r0, fp
 800202c:	bf0c      	ite	eq
 800202e:	f04f 0b03 	moveq.w	fp, #3
 8002032:	f04f 0b04 	movne.w	fp, #4
 8002036:	fa0b f909 	lsl.w	r9, fp, r9
 800203a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800203e:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002042:	f8df e108 	ldr.w	lr, [pc, #264]	@ 800214c <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002046:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800204a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800204e:	bf14      	ite	ne
 8002050:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002054:	ea25 050c 	biceq.w	r5, r5, ip
 8002058:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800205c:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 800214c <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002064:	f8de 500c 	ldr.w	r5, [lr, #12]
 8002068:	bf14      	ite	ne
 800206a:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800206e:	ea25 050c 	biceq.w	r5, r5, ip
 8002072:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002076:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 800214c <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800207a:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800207e:	f8de 5004 	ldr.w	r5, [lr, #4]
 8002082:	bf14      	ite	ne
 8002084:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002088:	ea25 050c 	biceq.w	r5, r5, ip
 800208c:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002090:	4d2e      	ldr	r5, [pc, #184]	@ (800214c <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002092:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002096:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	d01d      	beq.n	80020d6 <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 800209a:	ea44 040c 	orr.w	r4, r4, ip
 800209e:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a0:	680d      	ldr	r5, [r1, #0]
	position++;
 80020a2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a4:	fa35 f403 	lsrs.w	r4, r5, r3
 80020a8:	f102 0204 	add.w	r2, r2, #4
 80020ac:	f47f af4c 	bne.w	8001f48 <HAL_GPIO_Init+0x2c>
  }
}
 80020b0:	b003      	add	sp, #12
 80020b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80020b6:	4545      	cmp	r5, r8
 80020b8:	d008      	beq.n	80020cc <HAL_GPIO_Init+0x1b0>
 80020ba:	f67f af5e 	bls.w	8001f7a <HAL_GPIO_Init+0x5e>
 80020be:	42bd      	cmp	r5, r7
 80020c0:	d004      	beq.n	80020cc <HAL_GPIO_Init+0x1b0>
 80020c2:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8002150 <HAL_GPIO_Init+0x234>
 80020c6:	4575      	cmp	r5, lr
 80020c8:	f47f af66 	bne.w	8001f98 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020cc:	688d      	ldr	r5, [r1, #8]
 80020ce:	bb3d      	cbnz	r5, 8002120 <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020d0:	f04f 0a04 	mov.w	sl, #4
 80020d4:	e760      	b.n	8001f98 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020d6:	ea24 040c 	bic.w	r4, r4, ip
 80020da:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020dc:	680d      	ldr	r5, [r1, #0]
 80020de:	e72c      	b.n	8001f3a <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020e0:	68cc      	ldr	r4, [r1, #12]
 80020e2:	f104 0a04 	add.w	sl, r4, #4
          break;
 80020e6:	e757      	b.n	8001f98 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020e8:	68cc      	ldr	r4, [r1, #12]
 80020ea:	f104 0a08 	add.w	sl, r4, #8
          break;
 80020ee:	e753      	b.n	8001f98 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80020f4:	e750      	b.n	8001f98 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f6:	68cc      	ldr	r4, [r1, #12]
 80020f8:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80020fc:	e74c      	b.n	8001f98 <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 80020fe:	f04f 0a00 	mov.w	sl, #0
 8002102:	e749      	b.n	8001f98 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002104:	f04f 0b02 	mov.w	fp, #2
 8002108:	fa0b f909 	lsl.w	r9, fp, r9
 800210c:	ea45 0509 	orr.w	r5, r5, r9
 8002110:	e795      	b.n	800203e <HAL_GPIO_Init+0x122>
 8002112:	f04f 0b01 	mov.w	fp, #1
 8002116:	fa0b f909 	lsl.w	r9, fp, r9
 800211a:	ea45 0509 	orr.w	r5, r5, r9
 800211e:	e78e      	b.n	800203e <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002120:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002122:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002126:	bf0c      	ite	eq
 8002128:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 800212a:	6144      	strne	r4, [r0, #20]
 800212c:	e734      	b.n	8001f98 <HAL_GPIO_Init+0x7c>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	10220000 	.word	0x10220000
 8002138:	10310000 	.word	0x10310000
 800213c:	10120000 	.word	0x10120000
 8002140:	40010800 	.word	0x40010800
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	40010400 	.word	0x40010400
 8002150:	10320000 	.word	0x10320000

08002154 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002154:	b902      	cbnz	r2, 8002158 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002156:	0409      	lsls	r1, r1, #16
 8002158:	6101      	str	r1, [r0, #16]
  }
}
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800215e:	6951      	ldr	r1, [r2, #20]
 8002160:	4201      	tst	r1, r0
 8002162:	d100      	bne.n	8002166 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002164:	4770      	bx	lr
{
 8002166:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002168:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800216a:	f005 f917 	bl	800739c <HAL_GPIO_EXTI_Callback>
  }
}
 800216e:	bd08      	pop	{r3, pc}
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002178:	b310      	cbz	r0, 80021c0 <HAL_PCD_Init+0x4c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800217a:	f890 32a9 	ldrb.w	r3, [r0, #681]	@ 0x2a9
 800217e:	4605      	mov	r5, r0
 8002180:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002184:	2b00      	cmp	r3, #0
 8002186:	d067      	beq.n	8002258 <HAL_PCD_Init+0xe4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002188:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218a:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 800218c:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002190:	6828      	ldr	r0, [r5, #0]
 8002192:	f002 fbf7 	bl	8004984 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002196:	f856 eb10 	ldr.w	lr, [r6], #16
 800219a:	466c      	mov	r4, sp
 800219c:	46b4      	mov	ip, r6
 800219e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80021a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a4:	f8dc 3000 	ldr.w	r3, [ip]
 80021a8:	1d2f      	adds	r7, r5, #4
 80021aa:	6023      	str	r3, [r4, #0]
 80021ac:	4670      	mov	r0, lr
 80021ae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80021b2:	f002 fbd5 	bl	8004960 <USB_CoreInit>
 80021b6:	4604      	mov	r4, r0
 80021b8:	b130      	cbz	r0, 80021c8 <HAL_PCD_Init+0x54>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ba:	2302      	movs	r3, #2
 80021bc:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
    return HAL_ERROR;
 80021c0:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80021c2:	4620      	mov	r0, r4
 80021c4:	b007      	add	sp, #28
 80021c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021c8:	4601      	mov	r1, r0
 80021ca:	6828      	ldr	r0, [r5, #0]
 80021cc:	f002 fbe4 	bl	8004998 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	6868      	ldr	r0, [r5, #4]
 80021d2:	b348      	cbz	r0, 8002228 <HAL_PCD_Init+0xb4>
 80021d4:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80021d6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021da:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80021dc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80021e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80021e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ec:	fa5f f28c 	uxtb.w	r2, ip
 80021f0:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f2:	e9c3 110e 	strd	r1, r1, [r3, #56]	@ 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80021f6:	f883 e029 	strb.w	lr, [r3, #41]	@ 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021fa:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80021fe:	6419      	str	r1, [r3, #64]	@ 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002200:	d3ec      	bcc.n	80021dc <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8002202:	2200      	movs	r2, #0
 8002204:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002208:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 800220e:	f883 4168 	strb.w	r4, [r3, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002212:	b2cc      	uxtb	r4, r1
 8002214:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002216:	e9c3 225e 	strd	r2, r2, [r3, #376]	@ 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800221a:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800221e:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002222:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002226:	d3ed      	bcc.n	8002204 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002228:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800222a:	466c      	mov	r4, sp
 800222c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222e:	6833      	ldr	r3, [r6, #0]
 8002230:	6828      	ldr	r0, [r5, #0]
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002238:	f002 fbb0 	bl	800499c <USB_DevInit>
 800223c:	4604      	mov	r4, r0
 800223e:	2800      	cmp	r0, #0
 8002240:	d1bb      	bne.n	80021ba <HAL_PCD_Init+0x46>
  hpcd->State = HAL_PCD_STATE_READY;
 8002242:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002244:	f885 0024 	strb.w	r0, [r5, #36]	@ 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8002248:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 800224a:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800224e:	f003 f95b 	bl	8005508 <USB_DevDisconnect>
}
 8002252:	4620      	mov	r0, r4
 8002254:	b007      	add	sp, #28
 8002256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002258:	f880 22a8 	strb.w	r2, [r0, #680]	@ 0x2a8
    HAL_PCD_MspInit(hpcd);
 800225c:	f004 fefe 	bl	800705c <HAL_PCD_MspInit>
 8002260:	e792      	b.n	8002188 <HAL_PCD_Init+0x14>
 8002262:	bf00      	nop

08002264 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002264:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002266:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 800226a:	2b01      	cmp	r3, #1
 800226c:	d012      	beq.n	8002294 <HAL_PCD_Start+0x30>
 800226e:	4604      	mov	r4, r0
 8002270:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8002272:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002274:	f884 52a8 	strb.w	r5, [r4, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002278:	f002 fb7a 	bl	8004970 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800227c:	4629      	mov	r1, r5
 800227e:	4620      	mov	r0, r4
 8002280:	f005 f80a 	bl	8007298 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002284:	6820      	ldr	r0, [r4, #0]
 8002286:	f003 f93d 	bl	8005504 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800228a:	2300      	movs	r3, #0
 800228c:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8

  return HAL_OK;
 8002290:	4618      	mov	r0, r3
}
 8002292:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002294:	2002      	movs	r0, #2
}
 8002296:	bd38      	pop	{r3, r4, r5, pc}

08002298 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800229c:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800229e:	6800      	ldr	r0, [r0, #0]
 80022a0:	f003 f934 	bl	800550c <USB_ReadInterrupts>
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80022a4:	f410 4400 	ands.w	r4, r0, #32768	@ 0x8000
 80022a8:	d127      	bne.n	80022fa <HAL_PCD_IRQHandler+0x62>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80022aa:	0542      	lsls	r2, r0, #21
 80022ac:	f100 81ad 	bmi.w	800260a <HAL_PCD_IRQHandler+0x372>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80022b0:	0443      	lsls	r3, r0, #17
 80022b2:	d417      	bmi.n	80022e4 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80022b4:	0487      	lsls	r7, r0, #18
 80022b6:	f100 822a 	bmi.w	800270e <HAL_PCD_IRQHandler+0x476>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80022ba:	04c6      	lsls	r6, r0, #19
 80022bc:	f100 82f7 	bmi.w	80028ae <HAL_PCD_IRQHandler+0x616>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80022c0:	0504      	lsls	r4, r0, #20
 80022c2:	f100 8087 	bmi.w	80023d4 <HAL_PCD_IRQHandler+0x13c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022c6:	0582      	lsls	r2, r0, #22
 80022c8:	f100 83a9 	bmi.w	8002a1e <HAL_PCD_IRQHandler+0x786>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80022cc:	05c3      	lsls	r3, r0, #23
 80022ce:	d512      	bpl.n	80022f6 <HAL_PCD_IRQHandler+0x5e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022d0:	682a      	ldr	r2, [r5, #0]
 80022d2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80022d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022da:	041b      	lsls	r3, r3, #16
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44

    return;
 80022e2:	e008      	b.n	80022f6 <HAL_PCD_IRQHandler+0x5e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022e4:	682a      	ldr	r2, [r5, #0]
 80022e6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80022ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
  }
}
 80022f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022fa:	6828      	ldr	r0, [r5, #0]
 80022fc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8002300:	041a      	lsls	r2, r3, #16
 8002302:	d5f8      	bpl.n	80022f6 <HAL_PCD_IRQHandler+0x5e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002304:	f640 778f 	movw	r7, #3983	@ 0xf8f
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002308:	4ecf      	ldr	r6, [pc, #828]	@ (8002648 <HAL_PCD_IRQHandler+0x3b0>)
 800230a:	e010      	b.n	800232e <HAL_PCD_IRQHandler+0x96>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800230c:	f011 0110 	ands.w	r1, r1, #16
 8002310:	f000 80fe 	beq.w	8002510 <HAL_PCD_IRQHandler+0x278>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002314:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002316:	f411 6400 	ands.w	r4, r1, #2048	@ 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800231a:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800231c:	f040 8123 	bne.w	8002566 <HAL_PCD_IRQHandler+0x2ce>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	f100 8193 	bmi.w	800264c <HAL_PCD_IRQHandler+0x3b4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002326:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800232a:	0419      	lsls	r1, r3, #16
 800232c:	d5e3      	bpl.n	80022f6 <HAL_PCD_IRQHandler+0x5e>
    wIstr = hpcd->Instance->ISTR;
 800232e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8002332:	f013 040f 	ands.w	r4, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8002336:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8002338:	d0e8      	beq.n	800230c <HAL_PCD_IRQHandler+0x74>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800233a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800233e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002342:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002344:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002348:	f100 809e 	bmi.w	8002488 <HAL_PCD_IRQHandler+0x1f0>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800234c:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8002350:	d0e9      	beq.n	8002326 <HAL_PCD_IRQHandler+0x8e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002352:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002356:	eb0a 0804 	add.w	r8, sl, r4
 800235a:	b29b      	uxth	r3, r3
 800235c:	4033      	ands	r3, r6
 800235e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002362:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]

        if (ep->type == EP_TYPE_ISOC)
 8002366:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 800236a:	f898 302b 	ldrb.w	r3, [r8, #43]	@ 0x2b
 800236e:	2b01      	cmp	r3, #1
 8002370:	f000 81d8 	beq.w	8002724 <HAL_PCD_IRQHandler+0x48c>
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002374:	f898 1028 	ldrb.w	r1, [r8, #40]	@ 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002378:	f419 7e80 	ands.w	lr, r9, #256	@ 0x100

            if (ep->xfer_len > TxPctSize)
 800237c:	f8d8 2040 	ldr.w	r2, [r8, #64]	@ 0x40
 8002380:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002384:	ea4f 03c1 	mov.w	r3, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002388:	f040 81fb 	bne.w	8002782 <HAL_PCD_IRQHandler+0x4ea>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800238c:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8002390:	fa1f f989 	uxth.w	r9, r9
 8002394:	444b      	add	r3, r9
 8002396:	3302      	adds	r3, #2
 8002398:	f83c c013 	ldrh.w	ip, [ip, r3, lsl #1]
            if (ep->xfer_len > TxPctSize)
 800239c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80023a0:	4594      	cmp	ip, r2
 80023a2:	f080 81e7 	bcs.w	8002774 <HAL_PCD_IRQHandler+0x4dc>
        ep = &hpcd->IN_ep[epindex];
 80023a6:	1c63      	adds	r3, r4, #1
 80023a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
              ep->xfer_count += TxPctSize;
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ac:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
              ep->xfer_buff += TxPctSize;
 80023b0:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
              ep->xfer_len -= TxPctSize;
 80023b4:	eba2 020c 	sub.w	r2, r2, ip
              ep->xfer_buff += TxPctSize;
 80023b8:	4463      	add	r3, ip
 80023ba:	f8c8 303c 	str.w	r3, [r8, #60]	@ 0x3c
              ep->xfer_count += TxPctSize;
 80023be:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
 80023c2:	f8c8 2040 	str.w	r2, [r8, #64]	@ 0x40
 80023c6:	4463      	add	r3, ip
 80023c8:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023cc:	f002 fda4 	bl	8004f18 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023d0:	6828      	ldr	r0, [r5, #0]
 80023d2:	e7a8      	b.n	8002326 <HAL_PCD_IRQHandler+0x8e>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023d4:	682b      	ldr	r3, [r5, #0]
 80023d6:	f8b3 9000 	ldrh.w	r9, [r3]
 80023da:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 80023de:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 80023e2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80023e6:	8a1f      	ldrh	r7, [r3, #16]
 80023e8:	8a9e      	ldrh	r6, [r3, #20]
 80023ea:	8b1c      	ldrh	r4, [r3, #24]
 80023ec:	8b99      	ldrh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023ee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023f2:	fa1f f989 	uxth.w	r9, r9
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023f6:	b292      	uxth	r2, r2
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002400:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002404:	fa1f f888 	uxth.w	r8, r8
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	0412      	lsls	r2, r2, #16
 800240e:	0c12      	lsrs	r2, r2, #16
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002410:	fa1f fe8e 	uxth.w	lr, lr
 8002414:	fa1f fc8c 	uxth.w	ip, ip
 8002418:	b2bf      	uxth	r7, r7
 800241a:	b2b6      	uxth	r6, r6
 800241c:	b2a4      	uxth	r4, r4
 800241e:	b289      	uxth	r1, r1
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002420:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002424:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002428:	0550      	lsls	r0, r2, #21
 800242a:	d5fb      	bpl.n	8002424 <HAL_PCD_IRQHandler+0x18c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800242c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8002430:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002436:	0412      	lsls	r2, r2, #16
 8002438:	0c12      	lsrs	r2, r2, #16
 800243a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800243e:	f8a3 9000 	strh.w	r9, [r3]
 8002442:	f8a3 8004 	strh.w	r8, [r3, #4]
 8002446:	f8a3 e008 	strh.w	lr, [r3, #8]
 800244a:	f8a3 c00c 	strh.w	ip, [r3, #12]
 800244e:	821f      	strh	r7, [r3, #16]
 8002450:	829e      	strh	r6, [r3, #20]
 8002452:	831c      	strh	r4, [r3, #24]
 8002454:	8399      	strh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002456:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800245a:	b292      	uxth	r2, r2
 800245c:	f042 0208 	orr.w	r2, r2, #8
 8002460:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002464:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246c:	0412      	lsls	r2, r2, #16
 800246e:	0c12      	lsrs	r2, r2, #16
 8002470:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002474:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002478:	b292      	uxth	r2, r2
 800247a:	f042 0204 	orr.w	r2, r2, #4
 800247e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002482:	f004 fe3d 	bl	8007100 <HAL_PCD_SuspendCallback>
    return;
 8002486:	e736      	b.n	80022f6 <HAL_PCD_IRQHandler+0x5e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002488:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 800248c:	eb0a 0104 	add.w	r1, sl, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002490:	403b      	ands	r3, r7
 8002492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002496:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 800249a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800249e:	f891 3174 	ldrb.w	r3, [r1, #372]	@ 0x174
 80024a2:	f500 6280 	add.w	r2, r0, #1024	@ 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d17d      	bne.n	80025a6 <HAL_PCD_IRQHandler+0x30e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80024ae:	f891 c168 	ldrb.w	ip, [r1, #360]	@ 0x168
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3306      	adds	r3, #6
 80024b6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80024ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024be:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (count != 0U)
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 8211 	bne.w	80028ea <HAL_PCD_IRQHandler+0x652>
{
 80024c8:	f04f 0800 	mov.w	r8, #0
        ep->xfer_count += count;
 80024cc:	eb0a 0204 	add.w	r2, sl, r4
 80024d0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 80024d4:	00d1      	lsls	r1, r2, #3
 80024d6:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 80024da:	4442      	add	r2, r8
 80024dc:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ep->xfer_buff += count;
 80024e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 80024e4:	4442      	add	r2, r8
 80024e6:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024ea:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 80024ee:	b122      	cbz	r2, 80024fa <HAL_PCD_IRQHandler+0x262>
 80024f0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80024f4:	4543      	cmp	r3, r8
 80024f6:	f240 81c0 	bls.w	800287a <HAL_PCD_IRQHandler+0x5e2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024fa:	eb0a 0304 	add.w	r3, sl, r4
 80024fe:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002502:	4628      	mov	r0, r5
 8002504:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 8002508:	f004 fdd0 	bl	80070ac <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800250c:	6828      	ldr	r0, [r5, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800250e:	e71d      	b.n	800234c <HAL_PCD_IRQHandler+0xb4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002510:	8803      	ldrh	r3, [r0, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4033      	ands	r3, r6
 8002516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800251c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002520:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
 8002524:	b29b      	uxth	r3, r3
 8002526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800252a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800252e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8002532:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002534:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8002538:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800253a:	646b      	str	r3, [r5, #68]	@ 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800253c:	4628      	mov	r0, r5
        ep->xfer_buff += ep->xfer_count;
 800253e:	63ea      	str	r2, [r5, #60]	@ 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002540:	f004 fdbe 	bl	80070c0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002544:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8002548:	b35b      	cbz	r3, 80025a2 <HAL_PCD_IRQHandler+0x30a>
 800254a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800254c:	6828      	ldr	r0, [r5, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800254e:	2b00      	cmp	r3, #0
 8002550:	f47f aee9 	bne.w	8002326 <HAL_PCD_IRQHandler+0x8e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002554:	f895 2024 	ldrb.w	r2, [r5, #36]	@ 0x24
 8002558:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800255c:	f8a0 204c 	strh.w	r2, [r0, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002560:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
 8002564:	e6df      	b.n	8002326 <HAL_PCD_IRQHandler+0x8e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002566:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800256a:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 800256e:	b29b      	uxth	r3, r3
 8002570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002574:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002578:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800257c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 8002580:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002584:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002588:	f505 712c 	add.w	r1, r5, #688	@ 0x2b0
 800258c:	f002 ffd4 	bl	8005538 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002590:	682a      	ldr	r2, [r5, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002592:	4628      	mov	r0, r5
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002594:	8813      	ldrh	r3, [r2, #0]
 8002596:	403b      	ands	r3, r7
 8002598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800259c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800259e:	f004 fd7d 	bl	800709c <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025a2:	6828      	ldr	r0, [r5, #0]
 80025a4:	e6bf      	b.n	8002326 <HAL_PCD_IRQHandler+0x8e>
          if (ep->type == EP_TYPE_BULK)
 80025a6:	f891 316b 	ldrb.w	r3, [r1, #363]	@ 0x16b

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025aa:	f891 c168 	ldrb.w	ip, [r1, #360]	@ 0x168
          if (ep->type == EP_TYPE_BULK)
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	f000 81ec 	beq.w	800298c <HAL_PCD_IRQHandler+0x6f4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025b4:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80025b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	0c1b      	lsrs	r3, r3, #16
 80025c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025cc:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025d0:	f891 c168 	ldrb.w	ip, [r1, #360]	@ 0x168
 80025d4:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80025d8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025dc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80025e0:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025e2:	f000 8152 	beq.w	800288a <HAL_PCD_IRQHandler+0x5f2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e6:	3302      	adds	r3, #2
 80025e8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80025ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f43f af67 	beq.w	80024c8 <HAL_PCD_IRQHandler+0x230>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025fa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 80025fe:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
        ep->xfer_count += count;
 8002602:	4698      	mov	r8, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002604:	f002 ff98 	bl	8005538 <USB_ReadPMA>
 8002608:	e760      	b.n	80024cc <HAL_PCD_IRQHandler+0x234>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800260a:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResetCallback(hpcd);
 800260c:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800260e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002612:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 800261e:	f004 fd5d 	bl	80070dc <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8002622:	f895 32a8 	ldrb.w	r3, [r5, #680]	@ 0x2a8
 8002626:	2b01      	cmp	r3, #1
 8002628:	f43f ae65 	beq.w	80022f6 <HAL_PCD_IRQHandler+0x5e>
 800262c:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800262e:	4621      	mov	r1, r4
 8002630:	6828      	ldr	r0, [r5, #0]
  hpcd->USB_Address = address;
 8002632:	f885 4024 	strb.w	r4, [r5, #36]	@ 0x24
  __HAL_LOCK(hpcd);
 8002636:	f885 32a8 	strb.w	r3, [r5, #680]	@ 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800263a:	f002 ff5d 	bl	80054f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800263e:	f885 42a8 	strb.w	r4, [r5, #680]	@ 0x2a8
}
 8002642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002646:	bf00      	nop
 8002648:	ffff8f0f 	.word	0xffff8f0f
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800264c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002650:	8802      	ldrh	r2, [r0, #0]
 8002652:	4013      	ands	r3, r2
 8002654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002658:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800265a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800265e:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 8002662:	b29b      	uxth	r3, r3
 8002664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002668:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800266c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8002670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002674:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002678:	b193      	cbz	r3, 80026a0 <HAL_PCD_IRQHandler+0x408>
 800267a:	f8d5 117c 	ldr.w	r1, [r5, #380]	@ 0x17c
 800267e:	b179      	cbz	r1, 80026a0 <HAL_PCD_IRQHandler+0x408>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002680:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 8002684:	f002 ff58 	bl	8005538 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002688:	f8d5 317c 	ldr.w	r3, [r5, #380]	@ 0x17c
 800268c:	f8d5 2184 	ldr.w	r2, [r5, #388]	@ 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002690:	4628      	mov	r0, r5
            ep->xfer_buff += ep->xfer_count;
 8002692:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002694:	4621      	mov	r1, r4
            ep->xfer_buff += ep->xfer_count;
 8002696:	f8c5 317c 	str.w	r3, [r5, #380]	@ 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800269a:	f004 fd07 	bl	80070ac <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800269e:	6828      	ldr	r0, [r5, #0]
 80026a0:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80026a2:	0519      	lsls	r1, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026a4:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80026a6:	f53f ae3e 	bmi.w	8002326 <HAL_PCD_IRQHandler+0x8e>
 80026aa:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 80026ae:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80026b2:	f43f ae38 	beq.w	8002326 <HAL_PCD_IRQHandler+0x8e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026b6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80026ba:	f200 410c 	addw	r1, r0, #1036	@ 0x40c
 80026be:	b29b      	uxth	r3, r3
 80026c0:	5aca      	ldrh	r2, [r1, r3]
 80026c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80026c6:	52ca      	strh	r2, [r1, r3]
 80026c8:	f8d5 2178 	ldr.w	r2, [r5, #376]	@ 0x178
 80026cc:	2a3e      	cmp	r2, #62	@ 0x3e
 80026ce:	f240 81b3 	bls.w	8002a38 <HAL_PCD_IRQHandler+0x7a0>
 80026d2:	0954      	lsrs	r4, r2, #5
 80026d4:	06d2      	lsls	r2, r2, #27
 80026d6:	5aca      	ldrh	r2, [r1, r3]
 80026d8:	bf08      	it	eq
 80026da:	f104 34ff 	addeq.w	r4, r4, #4294967295
 80026de:	b292      	uxth	r2, r2
 80026e0:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 80026e4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80026e8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80026ec:	b292      	uxth	r2, r2
 80026ee:	52ca      	strh	r2, [r1, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026f0:	8803      	ldrh	r3, [r0, #0]
 80026f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800270a:	8003      	strh	r3, [r0, #0]
 800270c:	e60b      	b.n	8002326 <HAL_PCD_IRQHandler+0x8e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800270e:	682a      	ldr	r2, [r5, #0]
 8002710:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002714:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8002720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 8002724:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 8002726:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len = 0U;
 800272a:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
          if (ep->doublebuffer != 0U)
 800272e:	b1d2      	cbz	r2, 8002766 <HAL_PCD_IRQHandler+0x4ce>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002730:	f019 0940 	ands.w	r9, r9, #64	@ 0x40
 8002734:	f040 811c 	bne.w	8002970 <HAL_PCD_IRQHandler+0x6d8>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002738:	f898 3029 	ldrb.w	r3, [r8, #41]	@ 0x29
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 8201 	bne.w	8002b44 <HAL_PCD_IRQHandler+0x8ac>
 8002742:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
 8002746:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800274a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800274e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002752:	b292      	uxth	r2, r2
 8002754:	5a99      	ldrh	r1, [r3, r2]
 8002756:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800275a:	5299      	strh	r1, [r3, r2]
 800275c:	5a99      	ldrh	r1, [r3, r2]
 800275e:	b289      	uxth	r1, r1
 8002760:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002764:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002766:	4628      	mov	r0, r5
 8002768:	f898 1028 	ldrb.w	r1, [r8, #40]	@ 0x28
 800276c:	f004 fca8 	bl	80070c0 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002770:	6828      	ldr	r0, [r5, #0]
 8002772:	e5d8      	b.n	8002326 <HAL_PCD_IRQHandler+0x8e>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002774:	4628      	mov	r0, r5
 8002776:	f8c8 e040 	str.w	lr, [r8, #64]	@ 0x40
 800277a:	f004 fca1 	bl	80070c0 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800277e:	6828      	ldr	r0, [r5, #0]
 8002780:	e5d1      	b.n	8002326 <HAL_PCD_IRQHandler+0x8e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002782:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8002786:	f409 4b80 	and.w	fp, r9, #16384	@ 0x4000
 800278a:	fa1f fe8e 	uxth.w	lr, lr
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800278e:	f019 0940 	ands.w	r9, r9, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002792:	4473      	add	r3, lr
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002794:	f000 80b1 	beq.w	80028fa <HAL_PCD_IRQHandler+0x662>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002798:	3302      	adds	r3, #2
 800279a:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 800279e:	f3c3 0309 	ubfx	r3, r3, #0, #10

    if (ep->xfer_len > TxPctSize)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	f080 819a 	bcs.w	8002adc <HAL_PCD_IRQHandler+0x844>
    {
      ep->xfer_len -= TxPctSize;
 80027a8:	1ad2      	subs	r2, r2, r3
 80027aa:	f8c8 2040 	str.w	r2, [r8, #64]	@ 0x40
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027ae:	f1bb 0f00 	cmp.w	fp, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_PCD_IRQHandler+0x538>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027b4:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80027b8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80027bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027c0:	0412      	lsls	r2, r2, #16
 80027c2:	0c12      	lsrs	r2, r2, #16
 80027c4:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80027c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027cc:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027d0:	eb0a 0c04 	add.w	ip, sl, r4
 80027d4:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80027d8:	f89c 204c 	ldrb.w	r2, [ip, #76]	@ 0x4c
 80027dc:	2a01      	cmp	r2, #1
 80027de:	f040 80b4 	bne.w	800294a <HAL_PCD_IRQHandler+0x6b2>
      {
        ep->xfer_buff += TxPctSize;
        ep->xfer_count += TxPctSize;
 80027e2:	f8dc e044 	ldr.w	lr, [ip, #68]	@ 0x44
        ep->xfer_buff += TxPctSize;
 80027e6:	f8dc 203c 	ldr.w	r2, [ip, #60]	@ 0x3c
        ep->xfer_count += TxPctSize;
 80027ea:	449e      	add	lr, r3

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027ec:	f8dc 9048 	ldr.w	r9, [ip, #72]	@ 0x48
        ep->xfer_count += TxPctSize;
 80027f0:	f8cc e044 	str.w	lr, [ip, #68]	@ 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80027f4:	f8dc e038 	ldr.w	lr, [ip, #56]	@ 0x38
        ep->xfer_buff += TxPctSize;
 80027f8:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 80027fa:	45f1      	cmp	r9, lr
        ep->xfer_buff += TxPctSize;
 80027fc:	f8cc 203c 	str.w	r2, [ip, #60]	@ 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002800:	f0c0 8288 	bcc.w	8002d14 <HAL_PCD_IRQHandler+0xa7c>
        {
          len = ep->maxpacket;
          ep->xfer_len_db -= len;
 8002804:	eba9 030e 	sub.w	r3, r9, lr
 8002808:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
          ep->xfer_len_db = 0U;
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800280c:	fa1f f38e 	uxth.w	r3, lr
 8002810:	f898 c029 	ldrb.w	ip, [r8, #41]	@ 0x29
 8002814:	f1bc 0f00 	cmp.w	ip, #0
 8002818:	f040 826e 	bne.w	8002cf8 <HAL_PCD_IRQHandler+0xa60>
 800281c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002820:	f201 4c04 	addw	ip, r1, #1028	@ 0x404
 8002824:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8002828:	f1be 0f3e 	cmp.w	lr, #62	@ 0x3e
 800282c:	b289      	uxth	r1, r1
 800282e:	f83c 9001 	ldrh.w	r9, [ip, r1]
 8002832:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8002836:	f82c 9001 	strh.w	r9, [ip, r1]
 800283a:	f240 8299 	bls.w	8002d70 <HAL_PCD_IRQHandler+0xad8>
 800283e:	ea4f 195e 	mov.w	r9, lr, lsr #5
 8002842:	f01e 0f1f 	tst.w	lr, #31
 8002846:	f83c e001 	ldrh.w	lr, [ip, r1]
 800284a:	bf08      	it	eq
 800284c:	f109 39ff 	addeq.w	r9, r9, #4294967295
 8002850:	fa1f fe8e 	uxth.w	lr, lr
 8002854:	ea4e 2e89 	orr.w	lr, lr, r9, lsl #10
 8002858:	ea6f 4e4e 	mvn.w	lr, lr, lsl #17
 800285c:	ea6f 4e5e 	mvn.w	lr, lr, lsr #17
 8002860:	fa1f fe8e 	uxth.w	lr, lr
 8002864:	f82c e001 	strh.w	lr, [ip, r1]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002868:	4454      	add	r4, sl
 800286a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800286e:	4611      	mov	r1, r2
 8002870:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8002872:	f002 fe51 	bl	8005518 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002876:	6828      	ldr	r0, [r5, #0]
 8002878:	e067      	b.n	800294a <HAL_PCD_IRQHandler+0x6b2>
        ep = &hpcd->OUT_ep[epindex];
 800287a:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800287e:	6828      	ldr	r0, [r5, #0]
 8002880:	4429      	add	r1, r5
 8002882:	f002 fb49 	bl	8004f18 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002886:	6828      	ldr	r0, [r5, #0]
 8002888:	e560      	b.n	800234c <HAL_PCD_IRQHandler+0xb4>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800288a:	3306      	adds	r3, #6
 800288c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002894:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8002898:	2b00      	cmp	r3, #0
 800289a:	f43f ae15 	beq.w	80024c8 <HAL_PCD_IRQHandler+0x230>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800289e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 80028a2:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
        ep->xfer_count += count;
 80028a6:	4698      	mov	r8, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028a8:	f002 fe46 	bl	8005538 <USB_ReadPMA>
 80028ac:	e60e      	b.n	80024cc <HAL_PCD_IRQHandler+0x234>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80028ae:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80028b0:	4628      	mov	r0, r5
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80028b2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028c2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80028c6:	f023 0308 	bic.w	r3, r3, #8
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80028d2:	f004 fc25 	bl	8007120 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028d6:	682a      	ldr	r2, [r5, #0]
 80028d8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80028dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80028e8:	e505      	b.n	80022f6 <HAL_PCD_IRQHandler+0x5e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028ea:	f8b1 216e 	ldrh.w	r2, [r1, #366]	@ 0x16e
 80028ee:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
        ep->xfer_count += count;
 80028f2:	4698      	mov	r8, r3
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028f4:	f002 fe20 	bl	8005538 <USB_ReadPMA>
 80028f8:	e5e8      	b.n	80024cc <HAL_PCD_IRQHandler+0x234>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028fa:	3306      	adds	r3, #6
 80028fc:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 8002900:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002904:	4293      	cmp	r3, r2
 8002906:	f200 80a2 	bhi.w	8002a4e <HAL_PCD_IRQHandler+0x7b6>
      ep->xfer_len -= TxPctSize;
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	f8c8 2040 	str.w	r2, [r8, #64]	@ 0x40
    if (ep->xfer_len == 0U)
 8002910:	2a00      	cmp	r2, #0
 8002912:	f000 809e 	beq.w	8002a52 <HAL_PCD_IRQHandler+0x7ba>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002916:	f1bb 0f00 	cmp.w	fp, #0
 800291a:	d10d      	bne.n	8002938 <HAL_PCD_IRQHandler+0x6a0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800291c:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002920:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002924:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002928:	0412      	lsls	r2, r2, #16
 800292a:	0c12      	lsrs	r2, r2, #16
 800292c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002930:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002934:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002938:	eb0a 0e04 	add.w	lr, sl, r4
 800293c:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8002940:	f89e 204c 	ldrb.w	r2, [lr, #76]	@ 0x4c
 8002944:	2a01      	cmp	r2, #1
 8002946:	f000 8191 	beq.w	8002c6c <HAL_PCD_IRQHandler+0x9d4>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800294a:	f898 2028 	ldrb.w	r2, [r8, #40]	@ 0x28
 800294e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8002962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800296a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 800296e:	e4da      	b.n	8002326 <HAL_PCD_IRQHandler+0x8e>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002970:	f898 2029 	ldrb.w	r2, [r8, #41]	@ 0x29
 8002974:	2a00      	cmp	r2, #0
 8002976:	f040 80f4 	bne.w	8002b62 <HAL_PCD_IRQHandler+0x8ca>
 800297a:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
 800297e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002982:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002986:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800298a:	e6e2      	b.n	8002752 <HAL_PCD_IRQHandler+0x4ba>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800298c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002990:	ea4f 08cc 	mov.w	r8, ip, lsl #3
 8002994:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002996:	f419 4b80 	ands.w	fp, r9, #16384	@ 0x4000
    if (ep->xfer_len >= count)
 800299a:	f8d1 e180 	ldr.w	lr, [r1, #384]	@ 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800299e:	4443      	add	r3, r8
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029a0:	f000 80ed 	beq.w	8002b7e <HAL_PCD_IRQHandler+0x8e6>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029a4:	3302      	adds	r3, #2
 80029a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80029ae:	4573      	cmp	r3, lr
 80029b0:	4698      	mov	r8, r3
 80029b2:	f200 8157 	bhi.w	8002c64 <HAL_PCD_IRQHandler+0x9cc>
      ep->xfer_len -= count;
 80029b6:	ebae 0203 	sub.w	r2, lr, r3
 80029ba:	f8c1 2180 	str.w	r2, [r1, #384]	@ 0x180
    if (ep->xfer_len == 0U)
 80029be:	b97a      	cbnz	r2, 80029e0 <HAL_PCD_IRQHandler+0x748>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029c0:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 80029c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029c8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80029cc:	0412      	lsls	r2, r2, #16
 80029ce:	0c12      	lsrs	r2, r2, #16
 80029d0:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 80029d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029dc:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029e0:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80029e4:	d00d      	beq.n	8002a02 <HAL_PCD_IRQHandler+0x76a>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029e6:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 80029ea:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80029ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80029f2:	0412      	lsls	r2, r2, #16
 80029f4:	0c12      	lsrs	r2, r2, #16
 80029f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029fa:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80029fe:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f43f ad62 	beq.w	80024cc <HAL_PCD_IRQHandler+0x234>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a08:	eb0a 0104 	add.w	r1, sl, r4
 8002a0c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002a10:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 8002a14:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002a18:	f002 fd8e 	bl	8005538 <USB_ReadPMA>
 8002a1c:	e556      	b.n	80024cc <HAL_PCD_IRQHandler+0x234>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a1e:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_SOFCallback(hpcd);
 8002a20:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a22:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002a26:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002a32:	f004 fb4f 	bl	80070d4 <HAL_PCD_SOFCallback>
    return;
 8002a36:	e45e      	b.n	80022f6 <HAL_PCD_IRQHandler+0x5e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a38:	2a00      	cmp	r2, #0
 8002a3a:	f040 80dc 	bne.w	8002bf6 <HAL_PCD_IRQHandler+0x95e>
 8002a3e:	5aca      	ldrh	r2, [r1, r3]
 8002a40:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a44:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	52ca      	strh	r2, [r1, r3]
 8002a4c:	e650      	b.n	80026f0 <HAL_PCD_IRQHandler+0x458>
 8002a4e:	f8c8 9040 	str.w	r9, [r8, #64]	@ 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a52:	f898 3029 	ldrb.w	r3, [r8, #41]	@ 0x29
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 80d8 	bne.w	8002c0c <HAL_PCD_IRQHandler+0x974>
 8002a5c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8002a60:	010b      	lsls	r3, r1, #4
 8002a62:	f203 4c04 	addw	ip, r3, #1028	@ 0x404
 8002a66:	4484      	add	ip, r0
 8002a68:	b2a4      	uxth	r4, r4
 8002a6a:	f83c 2004 	ldrh.w	r2, [ip, r4]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a72:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002a76:	f82c 2004 	strh.w	r2, [ip, r4]
 8002a7a:	f83c 2004 	ldrh.w	r2, [ip, r4]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a7e:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a80:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a84:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	f82c 2004 	strh.w	r2, [ip, r4]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a8e:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
 8002a92:	b280      	uxth	r0, r0
 8002a94:	5a1a      	ldrh	r2, [r3, r0]
 8002a96:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002a9a:	521a      	strh	r2, [r3, r0]
 8002a9c:	5a1a      	ldrh	r2, [r3, r0]
 8002a9e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002aa2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002aa6:	b292      	uxth	r2, r2
 8002aa8:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aaa:	4628      	mov	r0, r5
 8002aac:	f004 fb08 	bl	80070c0 <HAL_PCD_DataInStageCallback>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ab0:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ab2:	f1bb 0f00 	cmp.w	fp, #0
 8002ab6:	f47f af48 	bne.w	800294a <HAL_PCD_IRQHandler+0x6b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002aba:	f898 2028 	ldrb.w	r2, [r8, #40]	@ 0x28
 8002abe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002ada:	e736      	b.n	800294a <HAL_PCD_IRQHandler+0x6b2>
 8002adc:	2200      	movs	r2, #0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ade:	f898 3029 	ldrb.w	r3, [r8, #41]	@ 0x29
 8002ae2:	f8c8 2040 	str.w	r2, [r8, #64]	@ 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80a5 	bne.w	8002c36 <HAL_PCD_IRQHandler+0x99e>
 8002aec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002af0:	010b      	lsls	r3, r1, #4
 8002af2:	f203 4404 	addw	r4, r3, #1028	@ 0x404
 8002af6:	b292      	uxth	r2, r2
 8002af8:	4404      	add	r4, r0
 8002afa:	f834 c002 	ldrh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002afe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b02:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002b06:	f824 c002 	strh.w	ip, [r4, r2]
 8002b0a:	f834 c002 	ldrh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b0e:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b10:	fa1f fc8c 	uxth.w	ip, ip
 8002b14:	f44c 4c00 	orr.w	ip, ip, #32768	@ 0x8000
 8002b18:	f824 c002 	strh.w	ip, [r4, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002b20:	b292      	uxth	r2, r2
 8002b22:	5a98      	ldrh	r0, [r3, r2]
 8002b24:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002b28:	5298      	strh	r0, [r3, r2]
 8002b2a:	5a98      	ldrh	r0, [r3, r2]
 8002b2c:	b280      	uxth	r0, r0
 8002b2e:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002b32:	5298      	strh	r0, [r3, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b34:	4628      	mov	r0, r5
 8002b36:	f004 fac3 	bl	80070c0 <HAL_PCD_DataInStageCallback>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b3a:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b3c:	f1bb 0f00 	cmp.w	fp, #0
 8002b40:	d1bb      	bne.n	8002aba <HAL_PCD_IRQHandler+0x822>
 8002b42:	e702      	b.n	800294a <HAL_PCD_IRQHandler+0x6b2>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	f47f ae0e 	bne.w	8002766 <HAL_PCD_IRQHandler+0x4ce>
 8002b4a:	f898 3028 	ldrb.w	r3, [r8, #40]	@ 0x28
 8002b4e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002b52:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002b56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	f823 9002 	strh.w	r9, [r3, r2]
 8002b60:	e601      	b.n	8002766 <HAL_PCD_IRQHandler+0x4ce>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b62:	2a01      	cmp	r2, #1
 8002b64:	f47f adff 	bne.w	8002766 <HAL_PCD_IRQHandler+0x4ce>
 8002b68:	f898 2028 	ldrb.w	r2, [r8, #40]	@ 0x28
 8002b6c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8002b70:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002b74:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8002b78:	b289      	uxth	r1, r1
 8002b7a:	5253      	strh	r3, [r2, r1]
 8002b7c:	e5f3      	b.n	8002766 <HAL_PCD_IRQHandler+0x4ce>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b7e:	3306      	adds	r3, #6
 8002b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002b88:	4573      	cmp	r3, lr
 8002b8a:	4698      	mov	r8, r3
 8002b8c:	d867      	bhi.n	8002c5e <HAL_PCD_IRQHandler+0x9c6>
      ep->xfer_len -= count;
 8002b8e:	ebae 0203 	sub.w	r2, lr, r3
 8002b92:	f8c1 2180 	str.w	r2, [r1, #384]	@ 0x180
    if (ep->xfer_len == 0U)
 8002b96:	b97a      	cbnz	r2, 8002bb8 <HAL_PCD_IRQHandler+0x920>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b98:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ba0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ba4:	0412      	lsls	r2, r2, #16
 8002ba6:	0c12      	lsrs	r2, r2, #16
 8002ba8:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8002bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bb4:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bb8:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8002bbc:	d10d      	bne.n	8002bda <HAL_PCD_IRQHandler+0x942>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bbe:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002bc2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002bc6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bca:	0412      	lsls	r2, r2, #16
 8002bcc:	0c12      	lsrs	r2, r2, #16
 8002bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bd2:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8002bd6:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f43f ac76 	beq.w	80024cc <HAL_PCD_IRQHandler+0x234>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002be0:	eb0a 0104 	add.w	r1, sl, r4
 8002be4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002be8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 8002bec:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002bf0:	f002 fca2 	bl	8005538 <USB_ReadPMA>
 8002bf4:	e46a      	b.n	80024cc <HAL_PCD_IRQHandler+0x234>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bf6:	0854      	lsrs	r4, r2, #1
 8002bf8:	07d2      	lsls	r2, r2, #31
 8002bfa:	5aca      	ldrh	r2, [r1, r3]
 8002bfc:	bf48      	it	mi
 8002bfe:	3401      	addmi	r4, #1
 8002c00:	b292      	uxth	r2, r2
 8002c02:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 8002c06:	b292      	uxth	r2, r2
 8002c08:	52ca      	strh	r2, [r1, r3]
 8002c0a:	e571      	b.n	80026f0 <HAL_PCD_IRQHandler+0x458>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f47f af4c 	bne.w	8002aaa <HAL_PCD_IRQHandler+0x812>
 8002c12:	2400      	movs	r4, #0
 8002c14:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002c18:	010b      	lsls	r3, r1, #4
 8002c1a:	f203 4c04 	addw	ip, r3, #1028	@ 0x404
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	4484      	add	ip, r0
 8002c22:	f82c 4002 	strh.w	r4, [ip, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c26:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002c2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c2e:	4403      	add	r3, r0
 8002c30:	b292      	uxth	r2, r2
 8002c32:	529c      	strh	r4, [r3, r2]
 8002c34:	e739      	b.n	8002aaa <HAL_PCD_IRQHandler+0x812>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	f47f af7c 	bne.w	8002b34 <HAL_PCD_IRQHandler+0x89c>
 8002c3c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8002c40:	010b      	lsls	r3, r1, #4
 8002c42:	f203 4c04 	addw	ip, r3, #1028	@ 0x404
 8002c46:	4484      	add	ip, r0
 8002c48:	b2a4      	uxth	r4, r4
 8002c4a:	f82c 2004 	strh.w	r2, [ip, r4]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c52:	4403      	add	r3, r0
 8002c54:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
 8002c58:	b280      	uxth	r0, r0
 8002c5a:	521a      	strh	r2, [r3, r0]
 8002c5c:	e76a      	b.n	8002b34 <HAL_PCD_IRQHandler+0x89c>
      ep->xfer_len = 0U;
 8002c5e:	f8c1 b180 	str.w	fp, [r1, #384]	@ 0x180
    if (ep->xfer_len == 0U)
 8002c62:	e799      	b.n	8002b98 <HAL_PCD_IRQHandler+0x900>
      ep->xfer_len = 0U;
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c1 2180 	str.w	r2, [r1, #384]	@ 0x180
    if (ep->xfer_len == 0U)
 8002c6a:	e6a9      	b.n	80029c0 <HAL_PCD_IRQHandler+0x728>
        ep->xfer_buff += TxPctSize;
 8002c6c:	f8de 203c 	ldr.w	r2, [lr, #60]	@ 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c70:	f8de 9048 	ldr.w	r9, [lr, #72]	@ 0x48
        ep->xfer_buff += TxPctSize;
 8002c74:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxPctSize;
 8002c78:	f8de 2044 	ldr.w	r2, [lr, #68]	@ 0x44
        ep->xfer_buff += TxPctSize;
 8002c7c:	f8ce c03c 	str.w	ip, [lr, #60]	@ 0x3c
        ep->xfer_count += TxPctSize;
 8002c80:	441a      	add	r2, r3
 8002c82:	f8ce 2044 	str.w	r2, [lr, #68]	@ 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c86:	f8de 2038 	ldr.w	r2, [lr, #56]	@ 0x38
 8002c8a:	4591      	cmp	r9, r2
 8002c8c:	d355      	bcc.n	8002d3a <HAL_PCD_IRQHandler+0xaa2>
          ep->xfer_len_db -= len;
 8002c8e:	eba9 0302 	sub.w	r3, r9, r2
 8002c92:	f8ce 3048 	str.w	r3, [lr, #72]	@ 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c96:	b293      	uxth	r3, r2
 8002c98:	f898 e029 	ldrb.w	lr, [r8, #41]	@ 0x29
 8002c9c:	f1be 0f00 	cmp.w	lr, #0
 8002ca0:	d13f      	bne.n	8002d22 <HAL_PCD_IRQHandler+0xa8a>
 8002ca2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002ca6:	f201 4e0c 	addw	lr, r1, #1036	@ 0x40c
 8002caa:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8002cae:	2a3e      	cmp	r2, #62	@ 0x3e
 8002cb0:	b289      	uxth	r1, r1
 8002cb2:	f83e 9001 	ldrh.w	r9, [lr, r1]
 8002cb6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8002cba:	f82e 9001 	strh.w	r9, [lr, r1]
 8002cbe:	d965      	bls.n	8002d8c <HAL_PCD_IRQHandler+0xaf4>
 8002cc0:	ea4f 1952 	mov.w	r9, r2, lsr #5
 8002cc4:	06d2      	lsls	r2, r2, #27
 8002cc6:	f83e 2001 	ldrh.w	r2, [lr, r1]
 8002cca:	bf08      	it	eq
 8002ccc:	f109 39ff 	addeq.w	r9, r9, #4294967295
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	ea42 2289 	orr.w	r2, r2, r9, lsl #10
 8002cd6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002cda:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	f82e 2001 	strh.w	r2, [lr, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ce4:	eb0a 0204 	add.w	r2, sl, r4
 8002ce8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002cec:	4661      	mov	r1, ip
 8002cee:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8002cf0:	f002 fc12 	bl	8005518 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cf4:	6828      	ldr	r0, [r5, #0]
 8002cf6:	e628      	b.n	800294a <HAL_PCD_IRQHandler+0x6b2>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cf8:	f1bc 0f01 	cmp.w	ip, #1
 8002cfc:	f47f adb4 	bne.w	8002868 <HAL_PCD_IRQHandler+0x5d0>
 8002d00:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002d04:	f201 4c04 	addw	ip, r1, #1028	@ 0x404
 8002d08:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8002d0c:	b289      	uxth	r1, r1
 8002d0e:	f82c 3001 	strh.w	r3, [ip, r1]
 8002d12:	e5a9      	b.n	8002868 <HAL_PCD_IRQHandler+0x5d0>
        else if (ep->xfer_len_db == 0U)
 8002d14:	f1b9 0f00 	cmp.w	r9, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_PCD_IRQHandler+0xab0>
    if (ep->xfer_len > TxPctSize)
 8002d1a:	469e      	mov	lr, r3
          ep->xfer_fill_db = 0U;
 8002d1c:	f88c 904c 	strb.w	r9, [ip, #76]	@ 0x4c
 8002d20:	e576      	b.n	8002810 <HAL_PCD_IRQHandler+0x578>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d22:	f1be 0f01 	cmp.w	lr, #1
 8002d26:	d1dd      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0xa4c>
 8002d28:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002d2c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002d30:	f201 410c 	addw	r1, r1, #1036	@ 0x40c
 8002d34:	b292      	uxth	r2, r2
 8002d36:	528b      	strh	r3, [r1, r2]
 8002d38:	e7d4      	b.n	8002ce4 <HAL_PCD_IRQHandler+0xa4c>
        else if (ep->xfer_len_db == 0U)
 8002d3a:	f1b9 0f00 	cmp.w	r9, #0
 8002d3e:	d10d      	bne.n	8002d5c <HAL_PCD_IRQHandler+0xac4>
    if (ep->xfer_len >= TxPctSize)
 8002d40:	461a      	mov	r2, r3
          ep->xfer_fill_db = 0U;
 8002d42:	f88e 904c 	strb.w	r9, [lr, #76]	@ 0x4c
 8002d46:	e7a7      	b.n	8002c98 <HAL_PCD_IRQHandler+0xa00>
          ep->xfer_fill_db = 0U;
 8002d48:	f04f 0b00 	mov.w	fp, #0
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d4c:	46ce      	mov	lr, r9
 8002d4e:	fa1f f389 	uxth.w	r3, r9
          ep->xfer_fill_db = 0U;
 8002d52:	f88c b04c 	strb.w	fp, [ip, #76]	@ 0x4c
          ep->xfer_len_db = 0U;
 8002d56:	f8cc b048 	str.w	fp, [ip, #72]	@ 0x48
 8002d5a:	e559      	b.n	8002810 <HAL_PCD_IRQHandler+0x578>
          ep->xfer_len_db = 0U;
 8002d5c:	f04f 0b00 	mov.w	fp, #0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d60:	464a      	mov	r2, r9
 8002d62:	fa1f f389 	uxth.w	r3, r9
          ep->xfer_len_db = 0U;
 8002d66:	f8ce b048 	str.w	fp, [lr, #72]	@ 0x48
          ep->xfer_fill_db = 0;
 8002d6a:	f88e b04c 	strb.w	fp, [lr, #76]	@ 0x4c
 8002d6e:	e793      	b.n	8002c98 <HAL_PCD_IRQHandler+0xa00>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d70:	f1be 0f00 	cmp.w	lr, #0
 8002d74:	d115      	bne.n	8002da2 <HAL_PCD_IRQHandler+0xb0a>
 8002d76:	f83c e001 	ldrh.w	lr, [ip, r1]
 8002d7a:	ea6f 4e4e 	mvn.w	lr, lr, lsl #17
 8002d7e:	ea6f 4e5e 	mvn.w	lr, lr, lsr #17
 8002d82:	fa1f fe8e 	uxth.w	lr, lr
 8002d86:	f82c e001 	strh.w	lr, [ip, r1]
 8002d8a:	e56d      	b.n	8002868 <HAL_PCD_IRQHandler+0x5d0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d8c:	b9da      	cbnz	r2, 8002dc6 <HAL_PCD_IRQHandler+0xb2e>
 8002d8e:	f83e 2001 	ldrh.w	r2, [lr, r1]
 8002d92:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d96:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	f82e 2001 	strh.w	r2, [lr, r1]
 8002da0:	e7a0      	b.n	8002ce4 <HAL_PCD_IRQHandler+0xa4c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002da2:	ea4f 095e 	mov.w	r9, lr, lsr #1
 8002da6:	f01e 0f01 	tst.w	lr, #1
 8002daa:	f83c e001 	ldrh.w	lr, [ip, r1]
 8002dae:	bf18      	it	ne
 8002db0:	f109 0901 	addne.w	r9, r9, #1
 8002db4:	fa1f fe8e 	uxth.w	lr, lr
 8002db8:	ea4e 2e89 	orr.w	lr, lr, r9, lsl #10
 8002dbc:	fa1f fe8e 	uxth.w	lr, lr
 8002dc0:	f82c e001 	strh.w	lr, [ip, r1]
 8002dc4:	e550      	b.n	8002868 <HAL_PCD_IRQHandler+0x5d0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dc6:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8002dca:	07d2      	lsls	r2, r2, #31
 8002dcc:	f83e 2001 	ldrh.w	r2, [lr, r1]
 8002dd0:	bf48      	it	mi
 8002dd2:	f109 0901 	addmi.w	r9, r9, #1
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	ea42 2289 	orr.w	r2, r2, r9, lsl #10
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	f82e 2001 	strh.w	r2, [lr, r1]
 8002de2:	e77f      	b.n	8002ce4 <HAL_PCD_IRQHandler+0xa4c>

08002de4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002de4:	f890 22a8 	ldrb.w	r2, [r0, #680]	@ 0x2a8
 8002de8:	2a01      	cmp	r2, #1
 8002dea:	d00e      	beq.n	8002e0a <HAL_PCD_SetAddress+0x26>
{
 8002dec:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002dee:	2201      	movs	r2, #1
 8002df0:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002df2:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8002df4:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  __HAL_LOCK(hpcd);
 8002df8:	f884 22a8 	strb.w	r2, [r4, #680]	@ 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dfc:	f002 fb7c 	bl	80054f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e00:	2300      	movs	r3, #0
 8002e02:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  return HAL_OK;
 8002e06:	4618      	mov	r0, r3
}
 8002e08:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002e0a:	2002      	movs	r0, #2
}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002e10:	f001 0c07 	and.w	ip, r1, #7
 8002e14:	0609      	lsls	r1, r1, #24
{
 8002e16:	b510      	push	{r4, lr}
 8002e18:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002e1a:	d422      	bmi.n	8002e62 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 0U;
 8002e1c:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e20:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8002e24:	00c0      	lsls	r0, r0, #3
 8002e26:	f500 71b4 	add.w	r1, r0, #360	@ 0x168
    ep->is_in = 0U;
 8002e2a:	4420      	add	r0, r4
 8002e2c:	f880 e169 	strb.w	lr, [r0, #361]	@ 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	4421      	add	r1, r4
  if (ep_type == EP_TYPE_BULK)
 8002e32:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002e34:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8002e36:	bf08      	it	eq
 8002e38:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3a:	f881 c000 	strb.w	ip, [r1]
    ep->data_pid_start = 0U;
 8002e3e:	bf08      	it	eq
 8002e40:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8002e42:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8002e44:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d013      	beq.n	8002e74 <HAL_PCD_EP_Open+0x64>
 8002e4c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e4e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002e50:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e54:	f001 fdb6 	bl	80049c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  return ret;
 8002e5e:	4618      	mov	r0, r3
}
 8002e60:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e62:	f10c 0101 	add.w	r1, ip, #1
 8002e66:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002e6a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002e6e:	2001      	movs	r0, #1
 8002e70:	7048      	strb	r0, [r1, #1]
 8002e72:	e7de      	b.n	8002e32 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 8002e74:	2002      	movs	r0, #2
}
 8002e76:	bd10      	pop	{r4, pc}

08002e78 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002e78:	060b      	lsls	r3, r1, #24
{
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	f001 0207 	and.w	r2, r1, #7
 8002e80:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002e82:	d419      	bmi.n	8002eb8 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8002e8e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002e90:	4403      	add	r3, r0
 8002e92:	2000      	movs	r0, #0
 8002e94:	f883 0169 	strb.w	r0, [r3, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e98:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002e9a:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d016      	beq.n	8002ed0 <HAL_PCD_EP_Close+0x58>
 8002ea2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ea4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002ea6:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002eaa:	f001 ff53 	bl	8004d54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  return HAL_OK;
 8002eb4:	4618      	mov	r0, r3
}
 8002eb6:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8002eb8:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eba:	18d1      	adds	r1, r2, r3
 8002ebc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ec0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002ec4:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002ec8:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d1e8      	bne.n	8002ea2 <HAL_PCD_EP_Close+0x2a>
 8002ed0:	2002      	movs	r0, #2
}
 8002ed2:	bd10      	pop	{r4, pc}

08002ed4 <HAL_PCD_EP_Receive>:
{
 8002ed4:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8002ed6:	2400      	movs	r4, #0
 8002ed8:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8002edc:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8002ee0:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8002ee4:	e9cc 235f 	strd	r2, r3, [ip, #380]	@ 0x17c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee8:	6800      	ldr	r0, [r0, #0]
 8002eea:	f50c 71b4 	add.w	r1, ip, #360	@ 0x168
  ep->xfer_count = 0U;
 8002eee:	f8cc 4184 	str.w	r4, [ip, #388]	@ 0x184
  ep->is_in = 0U;
 8002ef2:	f88c 4169 	strb.w	r4, [ip, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef6:	f88c e168 	strb.w	lr, [ip, #360]	@ 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002efa:	f002 f80d 	bl	8004f18 <USB_EPStartXfer>
}
 8002efe:	4620      	mov	r0, r4
 8002f00:	bd10      	pop	{r4, pc}
 8002f02:	bf00      	nop

08002f04 <HAL_PCD_EP_Transmit>:
{
 8002f04:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 8002f06:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8002f08:	2500      	movs	r5, #0
{
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8002f10:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 8002f18:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 8002f20:	f8cc 203c 	str.w	r2, [ip, #60]	@ 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f24:	f88c e028 	strb.w	lr, [ip, #40]	@ 0x28
  ep->xfer_len = len;
 8002f28:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
  ep->xfer_len_db = len;
 8002f2c:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
  ep->xfer_fill_db = 1U;
 8002f30:	f88c 604c 	strb.w	r6, [ip, #76]	@ 0x4c
  ep->xfer_count = 0U;
 8002f34:	f8cc 5044 	str.w	r5, [ip, #68]	@ 0x44
  ep->is_in = 1U;
 8002f38:	f88c 6029 	strb.w	r6, [ip, #41]	@ 0x29
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f3c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002f40:	6800      	ldr	r0, [r0, #0]
 8002f42:	f001 ffe9 	bl	8004f18 <USB_EPStartXfer>
}
 8002f46:	4628      	mov	r0, r5
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	bf00      	nop

08002f4c <HAL_PCD_EP_SetStall>:
{
 8002f4c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f4e:	6843      	ldr	r3, [r0, #4]
 8002f50:	f001 0507 	and.w	r5, r1, #7
 8002f54:	429d      	cmp	r5, r3
 8002f56:	d82e      	bhi.n	8002fb6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8002f58:	060b      	lsls	r3, r1, #24
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	d41b      	bmi.n	8002f96 <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->OUT_ep[ep_addr];
 8002f5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002f62:	00c9      	lsls	r1, r1, #3
 8002f64:	f501 72b4 	add.w	r2, r1, #360	@ 0x168
    ep->is_in = 0U;
 8002f68:	1843      	adds	r3, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8002f6a:	1881      	adds	r1, r0, r2
    ep->is_in = 0U;
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
  ep->is_stall = 1U;
 8002f72:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f74:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002f76:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002f78:	f894 22a8 	ldrb.w	r2, [r4, #680]	@ 0x2a8
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d018      	beq.n	8002fb2 <HAL_PCD_EP_SetStall+0x66>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f80:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002f82:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f86:	f002 fa3f 	bl	8005408 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f8a:	b1b5      	cbz	r5, 8002fba <HAL_PCD_EP_SetStall+0x6e>
  __HAL_UNLOCK(hpcd);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  return HAL_OK;
 8002f92:	4618      	mov	r0, r3
}
 8002f94:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002f96:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	18e9      	adds	r1, r5, r3
 8002f9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002f9e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002fa2:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8002fa4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa6:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002fa8:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002faa:	f894 22a8 	ldrb.w	r2, [r4, #680]	@ 0x2a8
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d1e6      	bne.n	8002f80 <HAL_PCD_EP_SetStall+0x34>
 8002fb2:	2002      	movs	r0, #2
}
 8002fb4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
}
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fba:	6820      	ldr	r0, [r4, #0]
 8002fbc:	f504 712c 	add.w	r1, r4, #688	@ 0x2b0
 8002fc0:	f002 faa8 	bl	8005514 <USB_EP0_OutStart>
 8002fc4:	e7e2      	b.n	8002f8c <HAL_PCD_EP_SetStall+0x40>
 8002fc6:	bf00      	nop

08002fc8 <HAL_PCD_EP_ClrStall>:
{
 8002fc8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fca:	6843      	ldr	r3, [r0, #4]
 8002fcc:	f001 020f 	and.w	r2, r1, #15
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d82f      	bhi.n	8003034 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8002fd4:	060b      	lsls	r3, r1, #24
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	f001 0207 	and.w	r2, r1, #7
 8002fdc:	d41a      	bmi.n	8003014 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8002fe8:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002fea:	4403      	add	r3, r0
  ep->is_stall = 0U;
 8002fec:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f883 0169 	strb.w	r0, [r3, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002ff6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002ff8:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d017      	beq.n	8003030 <HAL_PCD_EP_ClrStall+0x68>
 8003000:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003002:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003004:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003008:	f002 fa26 	bl	8005458 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800300c:	f884 52a8 	strb.w	r5, [r4, #680]	@ 0x2a8
  return HAL_OK;
 8003010:	4628      	mov	r0, r5
}
 8003012:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003014:	2301      	movs	r3, #1
  ep->is_stall = 0U;
 8003016:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003018:	18d1      	adds	r1, r2, r3
 800301a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800301e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003022:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003024:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8003026:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003028:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 800302c:	2b01      	cmp	r3, #1
 800302e:	d1e7      	bne.n	8003000 <HAL_PCD_EP_ClrStall+0x38>
 8003030:	2002      	movs	r0, #2
}
 8003032:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003034:	2001      	movs	r0, #1
}
 8003036:	bd38      	pop	{r3, r4, r5, pc}

08003038 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003038:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800303c:	d00c      	beq.n	8003058 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303e:	f001 0107 	and.w	r1, r1, #7
 8003042:	3101      	adds	r1, #1
 8003044:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003048:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800304c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800304e:	b962      	cbnz	r2, 800306a <HAL_PCDEx_PMAConfig+0x32>
    ep->pmaadress = (uint16_t)pmaadress;
 8003050:	80c1      	strh	r1, [r0, #6]
 8003052:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003054:	2000      	movs	r0, #0
 8003056:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003058:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800305c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8003060:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
    ep->pmaadress = (uint16_t)pmaadress;
 8003064:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8003066:	2a00      	cmp	r2, #0
 8003068:	d0f2      	beq.n	8003050 <HAL_PCDEx_PMAConfig+0x18>
    ep->doublebuffer = 1U;
 800306a:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800306c:	6083      	str	r3, [r0, #8]
 800306e:	7302      	strb	r2, [r0, #12]
}
 8003070:	2000      	movs	r0, #0
 8003072:	4770      	bx	lr

08003074 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003074:	2800      	cmp	r0, #0
 8003076:	f000 81e4 	beq.w	8003442 <HAL_RCC_OscConfig+0x3ce>
{
 800307a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	6803      	ldr	r3, [r0, #0]
 8003080:	4604      	mov	r4, r0
 8003082:	07dd      	lsls	r5, r3, #31
{
 8003084:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003086:	d535      	bpl.n	80030f4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003088:	4999      	ldr	r1, [pc, #612]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 800308a:	684a      	ldr	r2, [r1, #4]
 800308c:	f002 020c 	and.w	r2, r2, #12
 8003090:	2a04      	cmp	r2, #4
 8003092:	f000 80ed 	beq.w	8003270 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003096:	684a      	ldr	r2, [r1, #4]
 8003098:	f002 020c 	and.w	r2, r2, #12
 800309c:	2a08      	cmp	r2, #8
 800309e:	f000 80e3 	beq.w	8003268 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a8:	d010      	beq.n	80030cc <HAL_RCC_OscConfig+0x58>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 810a 	beq.w	80032c4 <HAL_RCC_OscConfig+0x250>
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	f000 8180 	beq.w	80033b8 <HAL_RCC_OscConfig+0x344>
 80030b8:	4b8d      	ldr	r3, [pc, #564]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030c8:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ca:	e004      	b.n	80030d6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030cc:	4a88      	ldr	r2, [pc, #544]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe fc2b 	bl	8001930 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4e85      	ldr	r6, [pc, #532]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 80030dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e005      	b.n	80030ec <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe fc26 	bl	8001930 <HAL_GetTick>
 80030e4:	1b40      	subs	r0, r0, r5
 80030e6:	2864      	cmp	r0, #100	@ 0x64
 80030e8:	f200 80e8 	bhi.w	80032bc <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ec:	6833      	ldr	r3, [r6, #0]
 80030ee:	039a      	lsls	r2, r3, #14
 80030f0:	d5f6      	bpl.n	80030e0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	079f      	lsls	r7, r3, #30
 80030f6:	d528      	bpl.n	800314a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f8:	4a7d      	ldr	r2, [pc, #500]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	6851      	ldr	r1, [r2, #4]
 80030fc:	f011 0f0c 	tst.w	r1, #12
 8003100:	f000 8096 	beq.w	8003230 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003104:	6851      	ldr	r1, [r2, #4]
 8003106:	f001 010c 	and.w	r1, r1, #12
 800310a:	2908      	cmp	r1, #8
 800310c:	f000 808c 	beq.w	8003228 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003110:	6923      	ldr	r3, [r4, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8116 	beq.w	8003344 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003118:	2201      	movs	r2, #1
 800311a:	4b76      	ldr	r3, [pc, #472]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4e74      	ldr	r6, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 800311e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003120:	f7fe fc06 	bl	8001930 <HAL_GetTick>
 8003124:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	e005      	b.n	8003134 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7fe fc02 	bl	8001930 <HAL_GetTick>
 800312c:	1b40      	subs	r0, r0, r5
 800312e:	2802      	cmp	r0, #2
 8003130:	f200 80c4 	bhi.w	80032bc <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	6833      	ldr	r3, [r6, #0]
 8003136:	0798      	lsls	r0, r3, #30
 8003138:	d5f6      	bpl.n	8003128 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	6833      	ldr	r3, [r6, #0]
 800313c:	6962      	ldr	r2, [r4, #20]
 800313e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003142:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003146:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	071a      	lsls	r2, r3, #28
 800314c:	d429      	bmi.n	80031a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314e:	075d      	lsls	r5, r3, #29
 8003150:	d54b      	bpl.n	80031ea <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003152:	4b67      	ldr	r3, [pc, #412]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	00d0      	lsls	r0, r2, #3
 8003158:	f100 8084 	bmi.w	8003264 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800315c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003164:	61da      	str	r2, [r3, #28]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4e61      	ldr	r6, [pc, #388]	@ (80032f8 <HAL_RCC_OscConfig+0x284>)
 8003172:	6833      	ldr	r3, [r6, #0]
 8003174:	05d9      	lsls	r1, r3, #23
 8003176:	f140 8091 	bpl.w	800329c <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317a:	68e3      	ldr	r3, [r4, #12]
 800317c:	2b01      	cmp	r3, #1
 800317e:	f000 80f2 	beq.w	8003366 <HAL_RCC_OscConfig+0x2f2>
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80be 	beq.w	8003304 <HAL_RCC_OscConfig+0x290>
 8003188:	2b05      	cmp	r3, #5
 800318a:	4b59      	ldr	r3, [pc, #356]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 800318c:	6a1a      	ldr	r2, [r3, #32]
 800318e:	f000 8120 	beq.w	80033d2 <HAL_RCC_OscConfig+0x35e>
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	621a      	str	r2, [r3, #32]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a0:	e0e6      	b.n	8003370 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a2:	69a3      	ldr	r3, [r4, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d04c      	beq.n	8003242 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 80031a8:	2201      	movs	r2, #1
 80031aa:	4b52      	ldr	r3, [pc, #328]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ac:	4e50      	ldr	r6, [pc, #320]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 80031ae:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80031b2:	f7fe fbbd 	bl	8001930 <HAL_GetTick>
 80031b6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b8:	e004      	b.n	80031c4 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe fbb9 	bl	8001930 <HAL_GetTick>
 80031be:	1b40      	subs	r0, r0, r5
 80031c0:	2802      	cmp	r0, #2
 80031c2:	d87b      	bhi.n	80032bc <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c4:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80031c6:	079b      	lsls	r3, r3, #30
 80031c8:	d5f7      	bpl.n	80031ba <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031ca:	4b4c      	ldr	r3, [pc, #304]	@ (80032fc <HAL_RCC_OscConfig+0x288>)
 80031cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003300 <HAL_RCC_OscConfig+0x28c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	0a5b      	lsrs	r3, r3, #9
 80031d6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80031d8:	bf00      	nop
  }
  while (Delay --);
 80031da:	9b01      	ldr	r3, [sp, #4]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	9201      	str	r2, [sp, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	075d      	lsls	r5, r3, #29
 80031e8:	d4b3      	bmi.n	8003152 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	69e3      	ldr	r3, [r4, #28]
 80031ec:	b1c3      	cbz	r3, 8003220 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ee:	4d40      	ldr	r5, [pc, #256]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	686a      	ldr	r2, [r5, #4]
 80031f2:	f002 020c 	and.w	r2, r2, #12
 80031f6:	2a08      	cmp	r2, #8
 80031f8:	f000 80cd 	beq.w	8003396 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 80031fc:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fe:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8003200:	4b3c      	ldr	r3, [pc, #240]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003202:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003204:	f000 80ed 	beq.w	80033e2 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8003208:	f7fe fb92 	bl	8001930 <HAL_GetTick>
 800320c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320e:	e004      	b.n	800321a <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fe fb8e 	bl	8001930 <HAL_GetTick>
 8003214:	1b00      	subs	r0, r0, r4
 8003216:	2802      	cmp	r0, #2
 8003218:	d850      	bhi.n	80032bc <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321a:	682b      	ldr	r3, [r5, #0]
 800321c:	019b      	lsls	r3, r3, #6
 800321e:	d4f7      	bmi.n	8003210 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8003220:	2000      	movs	r0, #0
}
 8003222:	b002      	add	sp, #8
 8003224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003228:	6852      	ldr	r2, [r2, #4]
 800322a:	03d6      	lsls	r6, r2, #15
 800322c:	f53f af70 	bmi.w	8003110 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003230:	4a2f      	ldr	r2, [pc, #188]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	0795      	lsls	r5, r2, #30
 8003236:	d525      	bpl.n	8003284 <HAL_RCC_OscConfig+0x210>
 8003238:	6922      	ldr	r2, [r4, #16]
 800323a:	2a01      	cmp	r2, #1
 800323c:	d022      	beq.n	8003284 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 800323e:	2001      	movs	r0, #1
 8003240:	e7ef      	b.n	8003222 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 8003242:	4a2c      	ldr	r2, [pc, #176]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4e2a      	ldr	r6, [pc, #168]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8003246:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800324a:	f7fe fb71 	bl	8001930 <HAL_GetTick>
 800324e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	e004      	b.n	800325c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003252:	f7fe fb6d 	bl	8001930 <HAL_GetTick>
 8003256:	1b40      	subs	r0, r0, r5
 8003258:	2802      	cmp	r0, #2
 800325a:	d82f      	bhi.n	80032bc <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800325e:	079f      	lsls	r7, r3, #30
 8003260:	d4f7      	bmi.n	8003252 <HAL_RCC_OscConfig+0x1de>
 8003262:	e7bf      	b.n	80031e4 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8003264:	2500      	movs	r5, #0
 8003266:	e783      	b.n	8003170 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003268:	684a      	ldr	r2, [r1, #4]
 800326a:	03d0      	lsls	r0, r2, #15
 800326c:	f57f af19 	bpl.w	80030a2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	4a1f      	ldr	r2, [pc, #124]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	0391      	lsls	r1, r2, #14
 8003276:	f57f af3d 	bpl.w	80030f4 <HAL_RCC_OscConfig+0x80>
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	2a00      	cmp	r2, #0
 800327e:	f47f af39 	bne.w	80030f4 <HAL_RCC_OscConfig+0x80>
 8003282:	e7dc      	b.n	800323e <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	491a      	ldr	r1, [pc, #104]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 8003286:	6960      	ldr	r0, [r4, #20]
 8003288:	680a      	ldr	r2, [r1, #0]
 800328a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800328e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003292:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003294:	071a      	lsls	r2, r3, #28
 8003296:	f57f af5a 	bpl.w	800314e <HAL_RCC_OscConfig+0xda>
 800329a:	e782      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329c:	6833      	ldr	r3, [r6, #0]
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80032a4:	f7fe fb44 	bl	8001930 <HAL_GetTick>
 80032a8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	6833      	ldr	r3, [r6, #0]
 80032ac:	05da      	lsls	r2, r3, #23
 80032ae:	f53f af64 	bmi.w	800317a <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b2:	f7fe fb3d 	bl	8001930 <HAL_GetTick>
 80032b6:	1bc0      	subs	r0, r0, r7
 80032b8:	2864      	cmp	r0, #100	@ 0x64
 80032ba:	d9f6      	bls.n	80032aa <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 80032bc:	2003      	movs	r0, #3
}
 80032be:	b002      	add	sp, #8
 80032c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c4:	4d0a      	ldr	r5, [pc, #40]	@ (80032f0 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032d6:	f7fe fb2b 	bl	8001930 <HAL_GetTick>
 80032da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032dc:	e004      	b.n	80032e8 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032de:	f7fe fb27 	bl	8001930 <HAL_GetTick>
 80032e2:	1b80      	subs	r0, r0, r6
 80032e4:	2864      	cmp	r0, #100	@ 0x64
 80032e6:	d8e9      	bhi.n	80032bc <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	039b      	lsls	r3, r3, #14
 80032ec:	d4f7      	bmi.n	80032de <HAL_RCC_OscConfig+0x26a>
 80032ee:	e700      	b.n	80030f2 <HAL_RCC_OscConfig+0x7e>
 80032f0:	40021000 	.word	0x40021000
 80032f4:	42420000 	.word	0x42420000
 80032f8:	40007000 	.word	0x40007000
 80032fc:	20000000 	.word	0x20000000
 8003300:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003304:	4e50      	ldr	r6, [pc, #320]	@ (8003448 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330a:	6a33      	ldr	r3, [r6, #32]
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	6233      	str	r3, [r6, #32]
 8003312:	6a33      	ldr	r3, [r6, #32]
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800331a:	f7fe fb09 	bl	8001930 <HAL_GetTick>
 800331e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	e004      	b.n	800332c <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe fb05 	bl	8001930 <HAL_GetTick>
 8003326:	1bc0      	subs	r0, r0, r7
 8003328:	4540      	cmp	r0, r8
 800332a:	d8c7      	bhi.n	80032bc <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	6a33      	ldr	r3, [r6, #32]
 800332e:	0798      	lsls	r0, r3, #30
 8003330:	d4f7      	bmi.n	8003322 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 8003332:	2d00      	cmp	r5, #0
 8003334:	f43f af59 	beq.w	80031ea <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4a43      	ldr	r2, [pc, #268]	@ (8003448 <HAL_RCC_OscConfig+0x3d4>)
 800333a:	69d3      	ldr	r3, [r2, #28]
 800333c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003340:	61d3      	str	r3, [r2, #28]
 8003342:	e752      	b.n	80031ea <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8003344:	4a41      	ldr	r2, [pc, #260]	@ (800344c <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4e40      	ldr	r6, [pc, #256]	@ (8003448 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8003348:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800334a:	f7fe faf1 	bl	8001930 <HAL_GetTick>
 800334e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003350:	e004      	b.n	800335c <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7fe faed 	bl	8001930 <HAL_GetTick>
 8003356:	1b40      	subs	r0, r0, r5
 8003358:	2802      	cmp	r0, #2
 800335a:	d8af      	bhi.n	80032bc <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335c:	6833      	ldr	r3, [r6, #0]
 800335e:	0799      	lsls	r1, r3, #30
 8003360:	d4f7      	bmi.n	8003352 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	e6f1      	b.n	800314a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003366:	4a38      	ldr	r2, [pc, #224]	@ (8003448 <HAL_RCC_OscConfig+0x3d4>)
 8003368:	6a13      	ldr	r3, [r2, #32]
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003370:	f7fe fade 	bl	8001930 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003378:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	4f33      	ldr	r7, [pc, #204]	@ (8003448 <HAL_RCC_OscConfig+0x3d4>)
 800337c:	e004      	b.n	8003388 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe fad7 	bl	8001930 <HAL_GetTick>
 8003382:	1b80      	subs	r0, r0, r6
 8003384:	4540      	cmp	r0, r8
 8003386:	d899      	bhi.n	80032bc <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	079b      	lsls	r3, r3, #30
 800338c:	d5f7      	bpl.n	800337e <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 800338e:	2d00      	cmp	r5, #0
 8003390:	f43f af2b 	beq.w	80031ea <HAL_RCC_OscConfig+0x176>
 8003394:	e7d0      	b.n	8003338 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003396:	2b01      	cmp	r3, #1
 8003398:	f43f af51 	beq.w	800323e <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 800339c:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	6a22      	ldr	r2, [r4, #32]
 80033a0:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80033a4:	4291      	cmp	r1, r2
 80033a6:	f47f af4a 	bne.w	800323e <HAL_RCC_OscConfig+0x1ca>
 80033aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033ac:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b0:	1a18      	subs	r0, r3, r0
 80033b2:	bf18      	it	ne
 80033b4:	2001      	movne	r0, #1
 80033b6:	e734      	b.n	8003222 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033bc:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80033ce:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	e681      	b.n	80030d6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d2:	f042 0204 	orr.w	r2, r2, #4
 80033d6:	621a      	str	r2, [r3, #32]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e0:	e7c6      	b.n	8003370 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 80033e2:	f7fe faa5 	bl	8001930 <HAL_GetTick>
 80033e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	e005      	b.n	80033f6 <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe faa1 	bl	8001930 <HAL_GetTick>
 80033ee:	1b80      	subs	r0, r0, r6
 80033f0:	2802      	cmp	r0, #2
 80033f2:	f63f af63 	bhi.w	80032bc <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	0199      	lsls	r1, r3, #6
 80033fa:	d4f6      	bmi.n	80033ea <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033fc:	6a23      	ldr	r3, [r4, #32]
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003402:	d105      	bne.n	8003410 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003404:	686a      	ldr	r2, [r5, #4]
 8003406:	68a1      	ldr	r1, [r4, #8]
 8003408:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800340c:	430a      	orrs	r2, r1
 800340e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003410:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003412:	4d0d      	ldr	r5, [pc, #52]	@ (8003448 <HAL_RCC_OscConfig+0x3d4>)
 8003414:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003416:	686a      	ldr	r2, [r5, #4]
 8003418:	430b      	orrs	r3, r1
 800341a:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800341e:	490b      	ldr	r1, [pc, #44]	@ (800344c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	4313      	orrs	r3, r2
 8003422:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003424:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003426:	f7fe fa83 	bl	8001930 <HAL_GetTick>
 800342a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342c:	e005      	b.n	800343a <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fa7f 	bl	8001930 <HAL_GetTick>
 8003432:	1b00      	subs	r0, r0, r4
 8003434:	2802      	cmp	r0, #2
 8003436:	f63f af41 	bhi.w	80032bc <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800343a:	682b      	ldr	r3, [r5, #0]
 800343c:	019a      	lsls	r2, r3, #6
 800343e:	d5f6      	bpl.n	800342e <HAL_RCC_OscConfig+0x3ba>
 8003440:	e6ee      	b.n	8003220 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 8003442:	2001      	movs	r0, #1
}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	42420000 	.word	0x42420000

08003450 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003450:	2800      	cmp	r0, #0
 8003452:	f000 80a1 	beq.w	8003598 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003456:	4a56      	ldr	r2, [pc, #344]	@ (80035b0 <HAL_RCC_ClockConfig+0x160>)
{
 8003458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	6813      	ldr	r3, [r2, #0]
 800345e:	4604      	mov	r4, r0
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	428b      	cmp	r3, r1
 8003466:	460d      	mov	r5, r1
 8003468:	d20c      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	f023 0307 	bic.w	r3, r3, #7
 8003470:	430b      	orrs	r3, r1
 8003472:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003474:	6813      	ldr	r3, [r2, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	428b      	cmp	r3, r1
 800347c:	d002      	beq.n	8003484 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800347e:	2001      	movs	r0, #1
}
 8003480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	079e      	lsls	r6, r3, #30
 8003488:	d514      	bpl.n	80034b4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348a:	0758      	lsls	r0, r3, #29
 800348c:	d504      	bpl.n	8003498 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348e:	4949      	ldr	r1, [pc, #292]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
 8003490:	684a      	ldr	r2, [r1, #4]
 8003492:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003496:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	0719      	lsls	r1, r3, #28
 800349a:	d504      	bpl.n	80034a6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800349c:	4945      	ldr	r1, [pc, #276]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
 800349e:	684a      	ldr	r2, [r1, #4]
 80034a0:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 80034a4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a6:	4943      	ldr	r1, [pc, #268]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
 80034a8:	68a0      	ldr	r0, [r4, #8]
 80034aa:	684a      	ldr	r2, [r1, #4]
 80034ac:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80034b0:	4302      	orrs	r2, r0
 80034b2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b4:	07da      	lsls	r2, r3, #31
 80034b6:	d520      	bpl.n	80034fa <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b3e      	ldr	r3, [pc, #248]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034bc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c0:	d06c      	beq.n	800359c <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c2:	2a02      	cmp	r2, #2
 80034c4:	d065      	beq.n	8003592 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	079e      	lsls	r6, r3, #30
 80034c8:	d5d9      	bpl.n	800347e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4e3a      	ldr	r6, [pc, #232]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d0:	6873      	ldr	r3, [r6, #4]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	4313      	orrs	r3, r2
 80034d8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80034da:	f7fe fa29 	bl	8001930 <HAL_GetTick>
 80034de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e0:	e004      	b.n	80034ec <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e2:	f7fe fa25 	bl	8001930 <HAL_GetTick>
 80034e6:	1bc0      	subs	r0, r0, r7
 80034e8:	4540      	cmp	r0, r8
 80034ea:	d85a      	bhi.n	80035a2 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ec:	6873      	ldr	r3, [r6, #4]
 80034ee:	6862      	ldr	r2, [r4, #4]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80034f8:	d1f3      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034fa:	4a2d      	ldr	r2, [pc, #180]	@ (80035b0 <HAL_RCC_ClockConfig+0x160>)
 80034fc:	6813      	ldr	r3, [r2, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	42ab      	cmp	r3, r5
 8003504:	d909      	bls.n	800351a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	f023 0307 	bic.w	r3, r3, #7
 800350c:	432b      	orrs	r3, r5
 800350e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003510:	6813      	ldr	r3, [r2, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	42ab      	cmp	r3, r5
 8003518:	d1b1      	bne.n	800347e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	0758      	lsls	r0, r3, #29
 800351e:	d506      	bpl.n	800352e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4924      	ldr	r1, [pc, #144]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
 8003522:	68e0      	ldr	r0, [r4, #12]
 8003524:	684a      	ldr	r2, [r1, #4]
 8003526:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800352a:	4302      	orrs	r2, r0
 800352c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352e:	0719      	lsls	r1, r3, #28
 8003530:	d507      	bpl.n	8003542 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003532:	4a20      	ldr	r2, [pc, #128]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
 8003534:	6921      	ldr	r1, [r4, #16]
 8003536:	6853      	ldr	r3, [r2, #4]
 8003538:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800353c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003540:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8003542:	491c      	ldr	r1, [pc, #112]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
 8003544:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003546:	f002 030c 	and.w	r3, r2, #12
 800354a:	2b08      	cmp	r3, #8
 800354c:	d010      	beq.n	8003570 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 800354e:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003550:	4a18      	ldr	r2, [pc, #96]	@ (80035b4 <HAL_RCC_ClockConfig+0x164>)
 8003552:	481a      	ldr	r0, [pc, #104]	@ (80035bc <HAL_RCC_ClockConfig+0x16c>)
 8003554:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003556:	491a      	ldr	r1, [pc, #104]	@ (80035c0 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003558:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800355c:	5c80      	ldrb	r0, [r0, r2]
 800355e:	4a19      	ldr	r2, [pc, #100]	@ (80035c4 <HAL_RCC_ClockConfig+0x174>)
 8003560:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003562:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003564:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003566:	f7fe f9a1 	bl	80018ac <HAL_InitTick>
  return HAL_OK;
 800356a:	2000      	movs	r0, #0
}
 800356c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003570:	4815      	ldr	r0, [pc, #84]	@ (80035c8 <HAL_RCC_ClockConfig+0x178>)
 8003572:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003576:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003578:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800357a:	d514      	bpl.n	80035a6 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800357c:	480e      	ldr	r0, [pc, #56]	@ (80035b8 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800357e:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003580:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003584:	4911      	ldr	r1, [pc, #68]	@ (80035cc <HAL_RCC_ClockConfig+0x17c>)
 8003586:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800358a:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800358c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003590:	e7de      	b.n	8003550 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	019f      	lsls	r7, r3, #6
 8003594:	d499      	bmi.n	80034ca <HAL_RCC_ClockConfig+0x7a>
 8003596:	e772      	b.n	800347e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
}
 800359a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359c:	039b      	lsls	r3, r3, #14
 800359e:	d494      	bmi.n	80034ca <HAL_RCC_ClockConfig+0x7a>
 80035a0:	e76d      	b.n	800347e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80035a2:	2003      	movs	r0, #3
 80035a4:	e76c      	b.n	8003480 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <HAL_RCC_ClockConfig+0x180>)
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	e7d0      	b.n	8003550 <HAL_RCC_ClockConfig+0x100>
 80035ae:	bf00      	nop
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	007a1200 	.word	0x007a1200
 80035bc:	08008420 	.word	0x08008420
 80035c0:	20000008 	.word	0x20000008
 80035c4:	20000000 	.word	0x20000000
 80035c8:	08008434 	.word	0x08008434
 80035cc:	08008430 	.word	0x08008430
 80035d0:	003d0900 	.word	0x003d0900

080035d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d4:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80035d6:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4905      	ldr	r1, [pc, #20]	@ (80035f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80035dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	6810      	ldr	r0, [r2, #0]
}
 80035e4:	40d8      	lsrs	r0, r3
 80035e6:	4770      	bx	lr
 80035e8:	40021000 	.word	0x40021000
 80035ec:	20000000 	.word	0x20000000
 80035f0:	08008418 	.word	0x08008418

080035f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f4:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80035f6:	4a05      	ldr	r2, [pc, #20]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4905      	ldr	r1, [pc, #20]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80035fc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003600:	5ccb      	ldrb	r3, [r1, r3]
 8003602:	6810      	ldr	r0, [r2, #0]
}
 8003604:	40d8      	lsrs	r0, r3
 8003606:	4770      	bx	lr
 8003608:	40021000 	.word	0x40021000
 800360c:	20000000 	.word	0x20000000
 8003610:	08008418 	.word	0x08008418

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003618:	6803      	ldr	r3, [r0, #0]
{
 800361a:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800361c:	07d8      	lsls	r0, r3, #31
{
 800361e:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003620:	d52c      	bpl.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	00d1      	lsls	r1, r2, #3
 8003628:	d53f      	bpl.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4d38      	ldr	r5, [pc, #224]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 800362c:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	05da      	lsls	r2, r3, #23
 8003632:	d548      	bpl.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003634:	4d34      	ldr	r5, [pc, #208]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003636:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003638:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800363e:	d011      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003640:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 8003644:	429a      	cmp	r2, r3
 8003646:	d00d      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003648:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 800364a:	2701      	movs	r7, #1
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800364c:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800364e:	4a30      	ldr	r2, [pc, #192]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003650:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003654:	f8c2 7440 	str.w	r7, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003658:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800365c:	07d8      	lsls	r0, r3, #31
      RCC->BDCR = temp_reg;
 800365e:	6229      	str	r1, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003660:	d444      	bmi.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003662:	6861      	ldr	r1, [r4, #4]
 8003664:	4a28      	ldr	r2, [pc, #160]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003666:	6a13      	ldr	r3, [r2, #32]
 8003668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366c:	430b      	orrs	r3, r1
 800366e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003670:	b11e      	cbz	r6, 800367a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	69d3      	ldr	r3, [r2, #28]
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003678:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	079a      	lsls	r2, r3, #30
 800367e:	d506      	bpl.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003680:	4921      	ldr	r1, [pc, #132]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003682:	68a0      	ldr	r0, [r4, #8]
 8003684:	684a      	ldr	r2, [r1, #4]
 8003686:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800368a:	4302      	orrs	r2, r0
 800368c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800368e:	06db      	lsls	r3, r3, #27
 8003690:	d403      	bmi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x86>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003692:	2000      	movs	r0, #0
}
 8003694:	b002      	add	sp, #8
 8003696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800369a:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800369c:	68e1      	ldr	r1, [r4, #12]
 800369e:	6853      	ldr	r3, [r2, #4]
 80036a0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6053      	str	r3, [r2, #4]
 80036a8:	e7f3      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	4d17      	ldr	r5, [pc, #92]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80036b2:	61da      	str	r2, [r3, #28]
 80036b4:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 80036b6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	05da      	lsls	r2, r3, #23
 80036c4:	d4b6      	bmi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c6:	682b      	ldr	r3, [r5, #0]
 80036c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036cc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80036ce:	f7fe f92f 	bl	8001930 <HAL_GetTick>
 80036d2:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	05db      	lsls	r3, r3, #23
 80036d8:	d4ac      	bmi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fe f929 	bl	8001930 <HAL_GetTick>
 80036de:	1bc3      	subs	r3, r0, r7
 80036e0:	2b64      	cmp	r3, #100	@ 0x64
 80036e2:	d9f7      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80036e4:	2003      	movs	r0, #3
}
 80036e6:	b002      	add	sp, #8
 80036e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80036ec:	f7fe f920 	bl	8001930 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80036f4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	6a2b      	ldr	r3, [r5, #32]
 80036f8:	0799      	lsls	r1, r3, #30
 80036fa:	d4b2      	bmi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fc:	f7fe f918 	bl	8001930 <HAL_GetTick>
 8003700:	1bc0      	subs	r0, r0, r7
 8003702:	4540      	cmp	r0, r8
 8003704:	d9f7      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003706:	e7ed      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003708:	40021000 	.word	0x40021000
 800370c:	40007000 	.word	0x40007000
 8003710:	42420000 	.word	0x42420000

08003714 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003714:	2800      	cmp	r0, #0
 8003716:	d058      	beq.n	80037ca <HAL_SPI_Init+0xb6>
{
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800371c:	4604      	mov	r4, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d044      	beq.n	80037ac <HAL_SPI_Init+0x98>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003728:	2000      	movs	r0, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800372a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372e:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003730:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03f      	beq.n	80037b8 <HAL_SPI_Init+0xa4>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003738:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800373c:	2602      	movs	r6, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800373e:	f04f 0c01 	mov.w	ip, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003742:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003744:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003748:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800374c:	4313      	orrs	r3, r2
 800374e:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003750:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003754:	6926      	ldr	r6, [r4, #16]
 8003756:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800375a:	4313      	orrs	r3, r2
 800375c:	f006 0602 	and.w	r6, r6, #2
 8003760:	4333      	orrs	r3, r6
 8003762:	6966      	ldr	r6, [r4, #20]
 8003764:	69a1      	ldr	r1, [r4, #24]
 8003766:	6a27      	ldr	r7, [r4, #32]
 8003768:	ea06 060c 	and.w	r6, r6, ip
 800376c:	4333      	orrs	r3, r6
 800376e:	69e6      	ldr	r6, [r4, #28]
 8003770:	f007 0e80 	and.w	lr, r7, #128	@ 0x80
 8003774:	f401 7700 	and.w	r7, r1, #512	@ 0x200
 8003778:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 800377c:	433b      	orrs	r3, r7
  __HAL_SPI_DISABLE(hspi);
 800377e:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003780:	4333      	orrs	r3, r6
 8003782:	ea43 030e 	orr.w	r3, r3, lr
 8003786:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8003788:	6810      	ldr	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800378a:	0c09      	lsrs	r1, r1, #16
 800378c:	f001 0104 	and.w	r1, r1, #4
  __HAL_SPI_DISABLE(hspi);
 8003790:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003794:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003796:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003798:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800379a:	69d3      	ldr	r3, [r2, #28]

  return HAL_OK;
 800379c:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800379e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037a2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037a4:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037a6:	f884 c051 	strb.w	ip, [r4, #81]	@ 0x51
}
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ac:	6842      	ldr	r2, [r0, #4]
 80037ae:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80037b2:	d0b9      	beq.n	8003728 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037b4:	61c3      	str	r3, [r0, #28]
 80037b6:	e7b7      	b.n	8003728 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 80037b8:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80037ba:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80037be:	f7fd fd4d 	bl	800125c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80037c4:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80037c8:	e7b6      	b.n	8003738 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 80037ca:	2001      	movs	r0, #1
}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d060      	beq.n	8003896 <HAL_TIM_Base_Init+0xc6>
{
 80037d4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037da:	4604      	mov	r4, r0
 80037dc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d042      	beq.n	800386a <HAL_TIM_Base_Init+0x9a>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e4:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ea:	4e2c      	ldr	r6, [pc, #176]	@ (800389c <HAL_TIM_Base_Init+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 80037f6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f8:	d03c      	beq.n	8003874 <HAL_TIM_Base_Init+0xa4>
 80037fa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80037fe:	d00e      	beq.n	800381e <HAL_TIM_Base_Init+0x4e>
 8003800:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8003804:	42b2      	cmp	r2, r6
 8003806:	d00a      	beq.n	800381e <HAL_TIM_Base_Init+0x4e>
 8003808:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800380c:	42b2      	cmp	r2, r6
 800380e:	d006      	beq.n	800381e <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003814:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003816:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800381a:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800381c:	e00d      	b.n	800383a <HAL_TIM_Base_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800381e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003824:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003826:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800382e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003832:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8003834:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003836:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003838:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800383a:	2301      	movs	r3, #1
 800383c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003846:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800384a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800384e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800385a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800385e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003862:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003866:	2000      	movs	r0, #0
}
 8003868:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800386a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800386e:	f7fd ff01 	bl	8001674 <HAL_TIM_Base_MspInit>
 8003872:	e7b7      	b.n	80037e4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003874:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800387a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800387e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003882:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003888:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800388a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800388e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003890:	6963      	ldr	r3, [r4, #20]
 8003892:	6313      	str	r3, [r2, #48]	@ 0x30
 8003894:	e7d1      	b.n	800383a <HAL_TIM_Base_Init+0x6a>
    return HAL_ERROR;
 8003896:	2001      	movs	r0, #1
}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00

080038a0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80038a0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d11f      	bne.n	80038e8 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038aa:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b0:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b2:	490e      	ldr	r1, [pc, #56]	@ (80038ec <HAL_TIM_Base_Start_IT+0x4c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b4:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ba:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038bc:	d009      	beq.n	80038d2 <HAL_TIM_Base_Start_IT+0x32>
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c2:	d006      	beq.n	80038d2 <HAL_TIM_Base_Start_IT+0x32>
 80038c4:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <HAL_TIM_Base_Start_IT+0x50>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_Base_Start_IT+0x32>
 80038ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d104      	bne.n	80038dc <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	2a06      	cmp	r2, #6
 80038da:	d003      	beq.n	80038e4 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038e4:	2000      	movs	r0, #0
 80038e6:	4770      	bx	lr
    return HAL_ERROR;
 80038e8:	2001      	movs	r0, #1
}
 80038ea:	4770      	bx	lr
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40000400 	.word	0x40000400

080038f4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop

080038f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d060      	beq.n	80039be <HAL_TIM_PWM_Init+0xc6>
{
 80038fc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80038fe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003902:	4604      	mov	r4, r0
 8003904:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003908:	2b00      	cmp	r3, #0
 800390a:	d042      	beq.n	8003992 <HAL_TIM_PWM_Init+0x9a>
  TIMx->PSC = Structure->Prescaler;
 800390c:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003912:	4e2c      	ldr	r6, [pc, #176]	@ (80039c4 <HAL_TIM_PWM_Init+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003918:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800391c:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 800391e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	d03c      	beq.n	800399c <HAL_TIM_PWM_Init+0xa4>
 8003922:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003926:	d00e      	beq.n	8003946 <HAL_TIM_PWM_Init+0x4e>
 8003928:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800392c:	42b2      	cmp	r2, r6
 800392e:	d00a      	beq.n	8003946 <HAL_TIM_PWM_Init+0x4e>
 8003930:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003934:	42b2      	cmp	r2, r6
 8003936:	d006      	beq.n	8003946 <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800393c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800393e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003942:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	e00d      	b.n	8003962 <HAL_TIM_PWM_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003946:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800394c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003954:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395a:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 800395c:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800395e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003960:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003962:	2301      	movs	r3, #1
 8003964:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003966:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800396e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003972:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003976:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800397e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003982:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003986:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800398a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800398e:	2000      	movs	r0, #0
}
 8003990:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003992:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003996:	f7ff ffad 	bl	80038f4 <HAL_TIM_PWM_MspInit>
 800399a:	e7b7      	b.n	800390c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800399c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800399e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80039a2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80039b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039b6:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	6963      	ldr	r3, [r4, #20]
 80039ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80039bc:	e7d1      	b.n	8003962 <HAL_TIM_PWM_Init+0x6a>
    return HAL_ERROR;
 80039be:	2001      	movs	r0, #1
}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40012c00 	.word	0x40012c00

080039c8 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80039c8:	bb39      	cbnz	r1, 8003a1a <HAL_TIM_PWM_Start+0x52>
 80039ca:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d12f      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x6a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 80039d8:	2201      	movs	r2, #1
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	f001 011f 	and.w	r1, r1, #31
 80039e0:	6a18      	ldr	r0, [r3, #32]
 80039e2:	408a      	lsls	r2, r1
 80039e4:	ea20 0002 	bic.w	r0, r0, r2
 80039e8:	b410      	push	{r4}
 80039ea:	6218      	str	r0, [r3, #32]
 80039ec:	6a19      	ldr	r1, [r3, #32]
 80039ee:	4c20      	ldr	r4, [pc, #128]	@ (8003a70 <HAL_TIM_PWM_Start+0xa8>)
 80039f0:	430a      	orrs	r2, r1
 80039f2:	42a3      	cmp	r3, r4
 80039f4:	621a      	str	r2, [r3, #32]
 80039f6:	d01e      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x6e>
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fc:	d01f      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x76>
 80039fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003a74 <HAL_TIM_PWM_Start+0xac>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d01c      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x76>
 8003a04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x76>
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	bc10      	pop	{r4}
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	4770      	bx	lr
 8003a1a:	2904      	cmp	r1, #4
 8003a1c:	d017      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x86>
 8003a1e:	2908      	cmp	r1, #8
 8003a20:	d01d      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x96>
 8003a22:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d103      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x6a>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8003a30:	e7d2      	b.n	80039d8 <HAL_TIM_PWM_Start+0x10>
 8003a32:	2001      	movs	r0, #1
 8003a34:	4770      	bx	lr
 8003a36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	f002 0207 	and.w	r2, r2, #7
 8003a44:	2a06      	cmp	r2, #6
 8003a46:	d1e1      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x44>
 8003a48:	2000      	movs	r0, #0
 8003a4a:	bc10      	pop	{r4}
 8003a4c:	4770      	bx	lr
 8003a4e:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d1ed      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x6a>
 8003a56:	2302      	movs	r3, #2
 8003a58:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8003a5c:	e7bc      	b.n	80039d8 <HAL_TIM_PWM_Start+0x10>
 8003a5e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d1e5      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x6a>
 8003a66:	2302      	movs	r3, #2
 8003a68:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003a6c:	e7b4      	b.n	80039d8 <HAL_TIM_PWM_Start+0x10>
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40000400 	.word	0x40000400

08003a78 <HAL_TIM_IC_MspInit>:
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d060      	beq.n	8003b42 <HAL_TIM_IC_Init+0xc6>
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a86:	4604      	mov	r4, r0
 8003a88:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d042      	beq.n	8003b16 <HAL_TIM_IC_Init+0x9a>
  TIMx->PSC = Structure->Prescaler;
 8003a90:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a96:	4e2c      	ldr	r6, [pc, #176]	@ (8003b48 <HAL_TIM_IC_Init+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a9e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa0:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 8003aa2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa4:	d03c      	beq.n	8003b20 <HAL_TIM_IC_Init+0xa4>
 8003aa6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003aaa:	d00e      	beq.n	8003aca <HAL_TIM_IC_Init+0x4e>
 8003aac:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8003ab0:	42b2      	cmp	r2, r6
 8003ab2:	d00a      	beq.n	8003aca <HAL_TIM_IC_Init+0x4e>
 8003ab4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003ab8:	42b2      	cmp	r2, r6
 8003aba:	d006      	beq.n	8003aca <HAL_TIM_IC_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003abc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003ac2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ac6:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	e00d      	b.n	8003ae6 <HAL_TIM_IC_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003aca:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ade:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8003ae0:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ae4:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003af2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003af6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003afa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b12:	2000      	movs	r0, #0
}
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b16:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003b1a:	f7ff ffad 	bl	8003a78 <HAL_TIM_IC_MspInit>
 8003b1e:	e7b7      	b.n	8003a90 <HAL_TIM_IC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003b20:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b26:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b28:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b34:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003b36:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b38:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b3a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003b3c:	6963      	ldr	r3, [r4, #20]
 8003b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b40:	e7d1      	b.n	8003ae6 <HAL_TIM_IC_Init+0x6a>
    return HAL_ERROR;
 8003b42:	2001      	movs	r0, #1
}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40012c00 	.word	0x40012c00

08003b4c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	f000 8083 	beq.w	8003c58 <HAL_TIM_Encoder_Init+0x10c>
{
 8003b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b54:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d063      	beq.n	8003c2c <HAL_TIM_Encoder_Init+0xe0>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	2202      	movs	r2, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b66:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b6c:	689a      	ldr	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6e:	4f3b      	ldr	r7, [pc, #236]	@ (8003c5c <HAL_TIM_Encoder_Init+0x110>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b74:	f022 0207 	bic.w	r2, r2, #7
  TIMx->PSC = Structure->Prescaler;
 8003b78:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b7a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	69a6      	ldr	r6, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b7e:	42bb      	cmp	r3, r7
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b80:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 8003b82:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b84:	d057      	beq.n	8003c36 <HAL_TIM_Encoder_Init+0xea>
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8a:	d046      	beq.n	8003c1a <HAL_TIM_Encoder_Init+0xce>
 8003b8c:	f5a7 3794 	sub.w	r7, r7, #75776	@ 0x12800
 8003b90:	42bb      	cmp	r3, r7
 8003b92:	d042      	beq.n	8003c1a <HAL_TIM_Encoder_Init+0xce>
 8003b94:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003b98:	42bb      	cmp	r3, r7
 8003b9a:	d03e      	beq.n	8003c1a <HAL_TIM_Encoder_Init+0xce>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ba0:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8003ba2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ba6:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003ba8:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003baa:	69aa      	ldr	r2, [r5, #24]
 8003bac:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bae:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bb0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bb4:	692a      	ldr	r2, [r5, #16]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003bbc:	68e8      	ldr	r0, [r5, #12]
  TIMx->EGR = TIM_EGR_UG;
 8003bbe:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bc0:	4302      	orrs	r2, r0
  tmpsmcr = htim->Instance->SMCR;
 8003bc2:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003bc4:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bc6:	f427 7c40 	bic.w	ip, r7, #768	@ 0x300
  tmpccer = htim->Instance->CCER;
 8003bca:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bcc:	f02c 0c03 	bic.w	ip, ip, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bd0:	ea41 010c 	orr.w	r1, r1, ip
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bd4:	f027 0c22 	bic.w	ip, r7, #34	@ 0x22
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bd8:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bda:	f421 417c 	bic.w	r1, r1, #64512	@ 0xfc00
 8003bde:	f021 01fc 	bic.w	r1, r1, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003be2:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
 8003be6:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003be8:	696f      	ldr	r7, [r5, #20]
 8003bea:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 8003bec:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bee:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8003bf2:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bf4:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 8003bf8:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003bfa:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8003bfc:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	f884 6046 	strb.w	r6, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	f884 603e 	strb.w	r6, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	f884 603f 	strb.w	r6, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c0a:	f884 6042 	strb.w	r6, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	f884 6043 	strb.w	r6, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003c12:	f884 603d 	strb.w	r6, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003c16:	2000      	movs	r0, #0
}
 8003c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8003c1a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c20:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c24:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c28:	433a      	orrs	r2, r7
 8003c2a:	e7b7      	b.n	8003b9c <HAL_TIM_Encoder_Init+0x50>
    htim->Lock = HAL_UNLOCKED;
 8003c2c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003c30:	f7fd fd80 	bl	8001734 <HAL_TIM_Encoder_MspInit>
 8003c34:	e796      	b.n	8003b64 <HAL_TIM_Encoder_Init+0x18>
    tmpcr1 |= Structure->CounterMode;
 8003c36:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c38:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c3c:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3e:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c40:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c44:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c4a:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8003c4c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c50:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003c52:	6962      	ldr	r2, [r4, #20]
 8003c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c56:	e7a7      	b.n	8003ba8 <HAL_TIM_Encoder_Init+0x5c>
    return HAL_ERROR;
 8003c58:	2001      	movs	r0, #1
}
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00

08003c60 <HAL_TIM_Encoder_Start>:
{
 8003c60:	4603      	mov	r3, r0
 8003c62:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c64:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c68:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c6c:	f893 c042 	ldrb.w	ip, [r3, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c70:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c72:	f893 e043 	ldrb.w	lr, [r3, #67]	@ 0x43
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c76:	fa5f fc8c 	uxtb.w	ip, ip
  if (Channel == TIM_CHANNEL_1)
 8003c7a:	b9e1      	cbnz	r1, 8003cb6 <HAL_TIM_Encoder_Start+0x56>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d002      	beq.n	8003c86 <HAL_TIM_Encoder_Start+0x26>
      return HAL_ERROR;
 8003c80:	2001      	movs	r0, #1
}
 8003c82:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c86:	f1bc 0f01 	cmp.w	ip, #1
 8003c8a:	d1fa      	bne.n	8003c82 <HAL_TIM_Encoder_Start+0x22>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8c:	2102      	movs	r1, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c8e:	681a      	ldr	r2, [r3, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c90:	f883 103e 	strb.w	r1, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c94:	f883 1042 	strb.w	r1, [r3, #66]	@ 0x42
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c98:	6a13      	ldr	r3, [r2, #32]
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ca0:	6a13      	ldr	r3, [r2, #32]
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 8003ca8:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8003caa:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6013      	str	r3, [r2, #0]
}
 8003cb2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 8003cb6:	2904      	cmp	r1, #4
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	fa5f fe8e 	uxtb.w	lr, lr
 8003cbe:	d01c      	beq.n	8003cfa <HAL_TIM_Encoder_Start+0x9a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc0:	2801      	cmp	r0, #1
 8003cc2:	d1dd      	bne.n	8003c80 <HAL_TIM_Encoder_Start+0x20>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc4:	2a01      	cmp	r2, #1
 8003cc6:	d1dc      	bne.n	8003c82 <HAL_TIM_Encoder_Start+0x22>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc8:	f1bc 0f01 	cmp.w	ip, #1
 8003ccc:	d1d9      	bne.n	8003c82 <HAL_TIM_Encoder_Start+0x22>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cce:	f1be 0f01 	cmp.w	lr, #1
 8003cd2:	d1d6      	bne.n	8003c82 <HAL_TIM_Encoder_Start+0x22>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd4:	2102      	movs	r1, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cd6:	681a      	ldr	r2, [r3, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd8:	f883 103e 	strb.w	r1, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cdc:	f883 103f 	strb.w	r1, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce0:	f883 1042 	strb.w	r1, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce4:	f883 1043 	strb.w	r1, [r3, #67]	@ 0x43
  TIMx->CCER &= ~tmp;
 8003ce8:	6a13      	ldr	r3, [r2, #32]
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf0:	6a13      	ldr	r3, [r2, #32]
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6213      	str	r3, [r2, #32]
 8003cf8:	e00a      	b.n	8003d10 <HAL_TIM_Encoder_Start+0xb0>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cfa:	2a01      	cmp	r2, #1
 8003cfc:	d1c0      	bne.n	8003c80 <HAL_TIM_Encoder_Start+0x20>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cfe:	f1be 0f01 	cmp.w	lr, #1
 8003d02:	d1bd      	bne.n	8003c80 <HAL_TIM_Encoder_Start+0x20>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d04:	2102      	movs	r1, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d06:	681a      	ldr	r2, [r3, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d08:	f883 103f 	strb.w	r1, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0c:	f883 1043 	strb.w	r1, [r3, #67]	@ 0x43
  TIMx->CCER &= ~tmp;
 8003d10:	6a13      	ldr	r3, [r2, #32]
 8003d12:	f023 0310 	bic.w	r3, r3, #16
 8003d16:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d18:	6a13      	ldr	r3, [r2, #32]
 8003d1a:	f043 0310 	orr.w	r3, r3, #16
 8003d1e:	6213      	str	r3, [r2, #32]
}
 8003d20:	e7c2      	b.n	8003ca8 <HAL_TIM_Encoder_Start+0x48>
 8003d22:	bf00      	nop

08003d24 <HAL_TIM_IC_ConfigChannel>:
{
 8003d24:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003d26:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003d2a:	2801      	cmp	r0, #1
 8003d2c:	f000 80b9 	beq.w	8003ea2 <HAL_TIM_IC_ConfigChannel+0x17e>
 8003d30:	2001      	movs	r0, #1
{
 8003d32:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003d34:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8003d38:	b15a      	cbz	r2, 8003d52 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 8003d3a:	2a04      	cmp	r2, #4
 8003d3c:	d044      	beq.n	8003dc8 <HAL_TIM_IC_ConfigChannel+0xa4>
  else if (Channel == TIM_CHANNEL_3)
 8003d3e:	2a08      	cmp	r2, #8
 8003d40:	f000 808c 	beq.w	8003e5c <HAL_TIM_IC_ConfigChannel+0x138>
  else if (Channel == TIM_CHANNEL_4)
 8003d44:	2a0c      	cmp	r2, #12
 8003d46:	d064      	beq.n	8003e12 <HAL_TIM_IC_ConfigChannel+0xee>
  __HAL_UNLOCK(htim);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8003d50:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 8003d52:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d54:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8003ea8 <HAL_TIM_IC_ConfigChannel+0x184>
  tmpccer = TIMx->CCER;
 8003d58:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5a:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICFilter);
 8003d5c:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5e:	f027 0701 	bic.w	r7, r7, #1
                      sConfig->ICSelection,
 8003d62:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d66:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d68:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6a:	6997      	ldr	r7, [r2, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d6c:	d00d      	beq.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x66>
 8003d6e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003d72:	d00a      	beq.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x66>
 8003d74:	f5ac 3c94 	sub.w	ip, ip, #75776	@ 0x12800
 8003d78:	4562      	cmp	r2, ip
 8003d7a:	d006      	beq.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x66>
 8003d7c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003d80:	4562      	cmp	r2, ip
 8003d82:	d002      	beq.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x66>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d84:	f047 0c01 	orr.w	ip, r7, #1
 8003d88:	e003      	b.n	8003d92 <HAL_TIM_IC_ConfigChannel+0x6e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d8a:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 8003d8e:	ea45 0c07 	orr.w	ip, r5, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d92:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d94:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d98:	b2c0      	uxtb	r0, r0
 8003d9a:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 8003d9e:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da0:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003da4:	f004 000a 	and.w	r0, r4, #10
 8003da8:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8003daa:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003dac:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dae:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003db0:	f020 000c 	bic.w	r0, r0, #12
 8003db4:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003db6:	6991      	ldr	r1, [r2, #24]
 8003db8:	4321      	orrs	r1, r4
 8003dba:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003dc2:	2000      	movs	r0, #0
}
 8003dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8003dc6:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 8003dc8:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 8003dca:	e9d1 0600 	ldrd	r0, r6, [r1]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003dce:	0104      	lsls	r4, r0, #4
  tmpccer = TIMx->CCER;
 8003dd0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd2:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd4:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd8:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ddc:	f004 04a0 	and.w	r4, r4, #160	@ 0xa0
 8003de0:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 8003de2:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de4:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003de6:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003dea:	0300      	lsls	r0, r0, #12
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003dec:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003df0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003df4:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df6:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003dfa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8003dfc:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003dfe:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e00:	6991      	ldr	r1, [r2, #24]
 8003e02:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8003e06:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e08:	6991      	ldr	r1, [r2, #24]
 8003e0a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003e0e:	6191      	str	r1, [r2, #24]
 8003e10:	e7d4      	b.n	8003dbc <HAL_TIM_IC_ConfigChannel+0x98>
    TIM_TI4_SetConfig(htim->Instance,
 8003e12:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 8003e14:	e9d1 0600 	ldrd	r0, r6, [r1]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003e18:	0304      	lsls	r4, r0, #12
  tmpccer = TIMx->CCER;
 8003e1a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e1c:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC4P);
 8003e1e:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e22:	f425 5580 	bic.w	r5, r5, #4096	@ 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003e26:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
 8003e2a:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 8003e2c:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e2e:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e30:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8003e32:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e34:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e36:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e3a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e3e:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e40:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e44:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003e46:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer ;
 8003e48:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e4a:	69d1      	ldr	r1, [r2, #28]
 8003e4c:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 8003e50:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e52:	69d1      	ldr	r1, [r2, #28]
 8003e54:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003e58:	61d1      	str	r1, [r2, #28]
 8003e5a:	e7af      	b.n	8003dbc <HAL_TIM_IC_ConfigChannel+0x98>
    TIM_TI3_SetConfig(htim->Instance,
 8003e5c:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 8003e5e:	e9d1 0500 	ldrd	r0, r5, [r1]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003e62:	0204      	lsls	r4, r0, #8
  tmpccer = TIMx->CCER;
 8003e64:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e66:	6a16      	ldr	r6, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC3P);
 8003e68:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e6c:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003e70:	f404 7400 	and.w	r4, r4, #512	@ 0x200
 8003e74:	4304      	orrs	r4, r0
                      sConfig->ICFilter);
 8003e76:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e78:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e7a:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8003e7c:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e7e:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e80:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 8003e84:	4329      	orrs	r1, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e86:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e88:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e8c:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8003e8e:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 8003e90:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e92:	69d1      	ldr	r1, [r2, #28]
 8003e94:	f021 010c 	bic.w	r1, r1, #12
 8003e98:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e9a:	69d1      	ldr	r1, [r2, #28]
 8003e9c:	4331      	orrs	r1, r6
 8003e9e:	61d1      	str	r1, [r2, #28]
 8003ea0:	e78c      	b.n	8003dbc <HAL_TIM_IC_ConfigChannel+0x98>
  __HAL_LOCK(htim);
 8003ea2:	2002      	movs	r0, #2
}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00

08003eac <HAL_TIM_PWM_ConfigChannel>:
{
 8003eac:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003eae:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003eb2:	2801      	cmp	r0, #1
 8003eb4:	f000 80b6 	beq.w	8004024 <HAL_TIM_PWM_ConfigChannel+0x178>
 8003eb8:	2001      	movs	r0, #1
{
 8003eba:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003ebc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  switch (Channel)
 8003ec0:	2a0c      	cmp	r2, #12
 8003ec2:	d808      	bhi.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003ec4:	e8df f002 	tbb	[pc, r2]
 8003ec8:	0707073b 	.word	0x0707073b
 8003ecc:	07070760 	.word	0x07070760
 8003ed0:	07070788 	.word	0x07070788
 8003ed4:	0d          	.byte	0x0d
 8003ed5:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (Channel)
 8003edc:	2001      	movs	r0, #1
}
 8003ede:	bcf0      	pop	{r4, r5, r6, r7}
 8003ee0:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ee2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee4:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003ee6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ee8:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC4P;
 8003eea:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eee:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8003ef2:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003ef4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003efc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f00:	688e      	ldr	r6, [r1, #8]
 8003f02:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	4e61      	ldr	r6, [pc, #388]	@ (800408c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003f08:	42b2      	cmp	r2, r6
 8003f0a:	f000 80a9 	beq.w	8004060 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 8003f0e:	6055      	str	r5, [r2, #4]
  TIMx->CCR4 = OC_Config->Pulse;
 8003f10:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f12:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f14:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8003f16:	6415      	str	r5, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8003f18:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f1a:	69d1      	ldr	r1, [r2, #28]
 8003f1c:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8003f20:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f22:	69d1      	ldr	r1, [r2, #28]
 8003f24:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003f28:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f2a:	69d1      	ldr	r1, [r2, #28]
 8003f2c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8003f30:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2000      	movs	r0, #0
}
 8003f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f3c:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f3e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003f40:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003f42:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f44:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC1P;
 8003f46:	f020 0002 	bic.w	r0, r0, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4a:	f024 0401 	bic.w	r4, r4, #1
 8003f4e:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003f50:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f52:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f54:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003f58:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8003f5a:	688e      	ldr	r6, [r1, #8]
 8003f5c:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f5e:	4e4b      	ldr	r6, [pc, #300]	@ (800408c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003f60:	42b2      	cmp	r2, r6
 8003f62:	d061      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x17c>
  TIMx->CR2 = tmpcr2;
 8003f64:	6055      	str	r5, [r2, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003f66:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f68:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f6a:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6c:	6355      	str	r5, [r2, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8003f6e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f70:	6991      	ldr	r1, [r2, #24]
 8003f72:	f041 0108 	orr.w	r1, r1, #8
 8003f76:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f78:	6991      	ldr	r1, [r2, #24]
 8003f7a:	f021 0104 	bic.w	r1, r1, #4
 8003f7e:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f80:	6991      	ldr	r1, [r2, #24]
 8003f82:	4321      	orrs	r1, r4
 8003f84:	6191      	str	r1, [r2, #24]
      break;
 8003f86:	e7d4      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f88:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f8a:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003f8c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8e:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 8003f90:	f020 0020 	bic.w	r0, r0, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f94:	f024 0410 	bic.w	r4, r4, #16
 8003f98:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003f9a:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f9c:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f9e:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa6:	688e      	ldr	r6, [r1, #8]
 8003fa8:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fac:	4e37      	ldr	r6, [pc, #220]	@ (800408c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003fae:	42b2      	cmp	r2, r6
 8003fb0:	d047      	beq.n	8004042 <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CR2 = tmpcr2;
 8003fb2:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003fb6:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fb8:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8003fba:	6395      	str	r5, [r2, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003fbc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fbe:	6991      	ldr	r1, [r2, #24]
 8003fc0:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8003fc4:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc6:	6991      	ldr	r1, [r2, #24]
 8003fc8:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003fcc:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fce:	6991      	ldr	r1, [r2, #24]
 8003fd0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8003fd4:	6191      	str	r1, [r2, #24]
      break;
 8003fd6:	e7ac      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fd8:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003fda:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8003fdc:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fde:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 8003fe0:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fe4:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8003fe8:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003fea:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003fec:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fee:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003ff2:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ff4:	688e      	ldr	r6, [r1, #8]
 8003ff6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ffa:	4e24      	ldr	r6, [pc, #144]	@ (800408c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8003ffc:	42b2      	cmp	r2, r6
 8003ffe:	d035      	beq.n	800406c <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8004000:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8004002:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004004:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004006:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 8004008:	63d5      	str	r5, [r2, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800400a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800400c:	69d1      	ldr	r1, [r2, #28]
 800400e:	f041 0108 	orr.w	r1, r1, #8
 8004012:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004014:	69d1      	ldr	r1, [r2, #28]
 8004016:	f021 0104 	bic.w	r1, r1, #4
 800401a:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401c:	69d1      	ldr	r1, [r2, #28]
 800401e:	4321      	orrs	r1, r4
 8004020:	61d1      	str	r1, [r2, #28]
      break;
 8004022:	e786      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x86>
  __HAL_LOCK(htim);
 8004024:	2002      	movs	r0, #2
}
 8004026:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004028:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800402a:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 800402e:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004030:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004034:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004038:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800403a:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800403e:	4335      	orrs	r5, r6
 8004040:	e790      	b.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004042:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004044:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004048:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800404c:	f425 6540 	bic.w	r5, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004050:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004054:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8004056:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800405a:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 800405e:	e7a8      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004060:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004062:	f425 4580 	bic.w	r5, r5, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004066:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800406a:	e750      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800406e:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004072:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004076:	f425 5540 	bic.w	r5, r5, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800407a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800407e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004080:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004084:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8004088:	e7ba      	b.n	8004000 <HAL_TIM_PWM_ConfigChannel+0x154>
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00

08004090 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004090:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d071      	beq.n	800417c <HAL_TIM_ConfigClockSource+0xec>
 8004098:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800409c:	2001      	movs	r0, #1
{
 800409e:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 80040a2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80040a6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80040aa:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040b0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80040b4:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80040b6:	680b      	ldr	r3, [r1, #0]
 80040b8:	2b60      	cmp	r3, #96	@ 0x60
 80040ba:	d061      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0xf0>
 80040bc:	d824      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x78>
 80040be:	2b40      	cmp	r3, #64	@ 0x40
 80040c0:	d077      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x122>
 80040c2:	d94a      	bls.n	800415a <HAL_TIM_ConfigClockSource+0xca>
 80040c4:	2b50      	cmp	r3, #80	@ 0x50
 80040c6:	d117      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 80040c8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80040ca:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80040cc:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ce:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80040d2:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d4:	6a23      	ldr	r3, [r4, #32]
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040dc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80040e6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80040e8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80040ea:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f0:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80040f4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80040fa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004100:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8004104:	bc30      	pop	{r4, r5}
 8004106:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410c:	d0f3      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x66>
 800410e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004112:	d110      	bne.n	8004136 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004114:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004118:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800411a:	432b      	orrs	r3, r5
 800411c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004122:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004126:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004128:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800412a:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800412e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004132:	60a3      	str	r3, [r4, #8]
      break;
 8004134:	e7e0      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004136:	2b70      	cmp	r3, #112	@ 0x70
 8004138:	d1de      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800413a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800413e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004140:	432b      	orrs	r3, r5
 8004142:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004144:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004148:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800414c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800414e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004150:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004152:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004156:	60a3      	str	r3, [r4, #8]
      break;
 8004158:	e7cd      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800415a:	2b20      	cmp	r3, #32
 800415c:	d002      	beq.n	8004164 <HAL_TIM_ConfigClockSource+0xd4>
 800415e:	d909      	bls.n	8004174 <HAL_TIM_ConfigClockSource+0xe4>
 8004160:	2b30      	cmp	r3, #48	@ 0x30
 8004162:	d1c9      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004164:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004166:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800416a:	430b      	orrs	r3, r1
 800416c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004170:	60a3      	str	r3, [r4, #8]
}
 8004172:	e7c0      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004174:	f033 0110 	bics.w	r1, r3, #16
 8004178:	d1be      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0x68>
 800417a:	e7f3      	b.n	8004164 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 800417c:	2002      	movs	r0, #2
}
 800417e:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004180:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8004182:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004184:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004186:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004188:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800418c:	f021 0110 	bic.w	r1, r1, #16
 8004190:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004192:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004194:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004198:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419c:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80041a0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80041a2:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80041a4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041aa:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80041ae:	60a3      	str	r3, [r4, #8]
}
 80041b0:	e7a1      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 80041b2:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80041b4:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80041b6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80041bc:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041be:	6a23      	ldr	r3, [r4, #32]
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041cc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80041d0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80041d2:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80041d4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041da:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80041de:	60a3      	str	r3, [r4, #8]
}
 80041e0:	e789      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x66>
 80041e2:	bf00      	nop

080041e4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop

080041ec <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop

080041f0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f0:	6803      	ldr	r3, [r0, #0]
{
 80041f2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f4:	691a      	ldr	r2, [r3, #16]
{
 80041f6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f8:	0791      	lsls	r1, r2, #30
 80041fa:	d502      	bpl.n	8004202 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	0792      	lsls	r2, r2, #30
 8004200:	d45f      	bmi.n	80042c2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	0750      	lsls	r0, r2, #29
 8004206:	d502      	bpl.n	800420e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	0751      	lsls	r1, r2, #29
 800420c:	d446      	bmi.n	800429c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	0712      	lsls	r2, r2, #28
 8004212:	d502      	bpl.n	800421a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	0710      	lsls	r0, r2, #28
 8004218:	d42e      	bmi.n	8004278 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	06d2      	lsls	r2, r2, #27
 800421e:	d502      	bpl.n	8004226 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	06d0      	lsls	r0, r2, #27
 8004224:	d418      	bmi.n	8004258 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	07d1      	lsls	r1, r2, #31
 800422a:	d502      	bpl.n	8004232 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	07d2      	lsls	r2, r2, #31
 8004230:	d45d      	bmi.n	80042ee <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	0610      	lsls	r0, r2, #24
 8004236:	d502      	bpl.n	800423e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	0611      	lsls	r1, r2, #24
 800423c:	d45f      	bmi.n	80042fe <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	0652      	lsls	r2, r2, #25
 8004242:	d502      	bpl.n	800424a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	0650      	lsls	r0, r2, #25
 8004248:	d461      	bmi.n	800430e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	0691      	lsls	r1, r2, #26
 800424e:	d502      	bpl.n	8004256 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	0692      	lsls	r2, r2, #26
 8004254:	d443      	bmi.n	80042de <HAL_TIM_IRQHandler+0xee>
}
 8004256:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004258:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800425e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004260:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004262:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004264:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004266:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800426a:	d064      	beq.n	8004336 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800426c:	f003 f894 	bl	8007398 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004270:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004272:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004274:	7722      	strb	r2, [r4, #28]
 8004276:	e7d6      	b.n	8004226 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004278:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800427c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800427e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004280:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004282:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004284:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004286:	0799      	lsls	r1, r3, #30
 8004288:	d152      	bne.n	8004330 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	f7ff ffab 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428e:	4620      	mov	r0, r4
 8004290:	f7ff ffaa 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004294:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004296:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004298:	7722      	strb	r2, [r4, #28]
 800429a:	e7be      	b.n	800421a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800429c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a0:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a6:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80042a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042aa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80042ae:	d13c      	bne.n	800432a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b0:	f7ff ff98 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff ff97 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042bc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	7722      	strb	r2, [r4, #28]
 80042c0:	e7a5      	b.n	800420e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ca:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	079b      	lsls	r3, r3, #30
 80042d0:	d025      	beq.n	800431e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	f003 f861 	bl	8007398 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	7722      	strb	r2, [r4, #28]
 80042dc:	e791      	b.n	8004202 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042de:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80042e2:	4620      	mov	r0, r4
}
 80042e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80042ea:	f000 b887 	b.w	80043fc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ee:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80042f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80042f6:	f003 f841 	bl	800737c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	e799      	b.n	8004232 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004302:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004304:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004306:	f000 f87b 	bl	8004400 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	e797      	b.n	800423e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800430e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8004312:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004314:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004316:	f7ff ff69 	bl	80041ec <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	e795      	b.n	800424a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	f7ff ff61 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff ff60 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004328:	e7d5      	b.n	80042d6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	f003 f835 	bl	8007398 <HAL_TIM_IC_CaptureCallback>
 800432e:	e7c4      	b.n	80042ba <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004330:	f003 f832 	bl	8007398 <HAL_TIM_IC_CaptureCallback>
 8004334:	e7ae      	b.n	8004294 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	f7ff ff55 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff ff54 	bl	80041e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004340:	e796      	b.n	8004270 <HAL_TIM_IRQHandler+0x80>
 8004342:	bf00      	nop

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004344:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004348:	2a01      	cmp	r2, #1
 800434a:	d027      	beq.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800434c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004350:	681a      	ldr	r2, [r3, #0]
{
 8004352:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004358:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435a:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435c:	4d10      	ldr	r5, [pc, #64]	@ (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800435e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004362:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004364:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8004366:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8004368:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	d009      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800436c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004370:	d006      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004372:	480c      	ldr	r0, [pc, #48]	@ (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004374:	4282      	cmp	r2, r0
 8004376:	d003      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004378:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800437c:	4282      	cmp	r2, r0
 800437e:	d104      	bne.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004380:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004382:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004386:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004388:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800438a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800438c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004392:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004396:	4610      	mov	r0, r2
}
 8004398:	bc30      	pop	{r4, r5}
 800439a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800439c:	2002      	movs	r0, #2
}
 800439e:	4770      	bx	lr
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40000400 	.word	0x40000400

080043a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d023      	beq.n	80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 80043b0:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043b2:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80043b6:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043be:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043c0:	6848      	ldr	r0, [r1, #4]
 80043c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043c8:	6808      	ldr	r0, [r1, #0]
 80043ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043d0:	6908      	ldr	r0, [r1, #16]
 80043d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 80043d6:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043d8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043da:	694c      	ldr	r4, [r1, #20]
 80043dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043e0:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043e2:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80043e4:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ea:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 80043ec:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80043ee:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c

  return HAL_OK;
 80043f2:	4660      	mov	r0, ip
}
 80043f4:	bc10      	pop	{r4}
 80043f6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80043f8:	2002      	movs	r0, #2
}
 80043fa:	4770      	bx	lr

080043fc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop

08004400 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004404:	2800      	cmp	r0, #0
 8004406:	d065      	beq.n	80044d4 <HAL_UART_Init+0xd0>
{
 8004408:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800440e:	4604      	mov	r4, r0
 8004410:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004414:	2b00      	cmp	r3, #0
 8004416:	d055      	beq.n	80044c4 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004418:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800441c:	2124      	movs	r1, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800441e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004420:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004424:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004426:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004428:	f421 5100 	bic.w	r1, r1, #8192	@ 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800442c:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800442e:	4302      	orrs	r2, r0
 8004430:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8004432:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004434:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004436:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800443c:	4331      	orrs	r1, r6
 800443e:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004440:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 8004442:	4825      	ldr	r0, [pc, #148]	@ (80044d8 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 8004444:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8004448:	f021 010c 	bic.w	r1, r1, #12
 800444c:	430a      	orrs	r2, r1
 800444e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004450:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004452:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004454:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004458:	ea42 0205 	orr.w	r2, r2, r5
 800445c:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800445e:	d036      	beq.n	80044ce <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7ff f8b8 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004464:	6862      	ldr	r2, [r4, #4]
 8004466:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800446a:	0092      	lsls	r2, r2, #2
 800446c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004470:	fbb3 f3f2 	udiv	r3, r3, r2
 8004474:	f04f 0e64 	mov.w	lr, #100	@ 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800447a:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800447e:	4817      	ldr	r0, [pc, #92]	@ (80044dc <HAL_UART_Init+0xd8>)
 8004480:	6821      	ldr	r1, [r4, #0]
 8004482:	fba0 6203 	umull	r6, r2, r0, r3
 8004486:	0952      	lsrs	r2, r2, #5
 8004488:	fb0e 3312 	mls	r3, lr, r2, r3
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	3332      	adds	r3, #50	@ 0x32
 8004490:	fba0 0303 	umull	r0, r3, r0, r3
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 800449a:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449c:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 800449e:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80044a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a6:	694b      	ldr	r3, [r1, #20]
 80044a8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80044ac:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 80044ae:	68cb      	ldr	r3, [r1, #12]
 80044b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044b4:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	6465      	str	r5, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b8:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c0:	6365      	str	r5, [r4, #52]	@ 0x34
}
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80044c4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80044c8:	f7fd f97e 	bl	80017c8 <HAL_UART_MspInit>
 80044cc:	e7a4      	b.n	8004418 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 80044ce:	f7ff f891 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 80044d2:	e7c7      	b.n	8004464 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 80044d4:	2001      	movs	r0, #1
}
 80044d6:	4770      	bx	lr
 80044d8:	40013800 	.word	0x40013800
 80044dc:	51eb851f 	.word	0x51eb851f

080044e0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d120      	bne.n	800452a <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80044e8:	b101      	cbz	r1, 80044ec <HAL_UART_Receive_IT+0xc>
 80044ea:	b90a      	cbnz	r2, 80044f0 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 80044ec:	2001      	movs	r0, #1
}
 80044ee:	4770      	bx	lr
{
 80044f0:	b410      	push	{r4}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f2:	f04f 0c22 	mov.w	ip, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	2400      	movs	r4, #0
  huart->pRxBuffPtr = pData;
 80044f8:	6281      	str	r1, [r0, #40]	@ 0x28
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044fa:	6901      	ldr	r1, [r0, #16]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	6304      	str	r4, [r0, #48]	@ 0x30
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044fe:	6803      	ldr	r3, [r0, #0]
  huart->RxXferCount = Size;
 8004500:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->RxXferSize = Size;
 8004502:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	6444      	str	r4, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004506:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 800450a:	b119      	cbz	r1, 8004514 <HAL_UART_Receive_IT+0x34>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004512:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004514:	695a      	ldr	r2, [r3, #20]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004516:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800451e:	68da      	ldr	r2, [r3, #12]
}
 8004520:	bc10      	pop	{r4}
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004522:	f042 0220 	orr.w	r2, r2, #32
 8004526:	60da      	str	r2, [r3, #12]
}
 8004528:	4770      	bx	lr
    return HAL_BUSY;
 800452a:	2002      	movs	r0, #2
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop

08004534 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop

08004538 <UART_DMAAbortOnError>:
{
 8004538:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800453a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800453e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004540:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004542:	f7ff fff7 	bl	8004534 <HAL_UART_ErrorCallback>
}
 8004546:	bd08      	pop	{r3, pc}

08004548 <HAL_UARTEx_RxEventCallback>:
}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop

0800454c <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800454e:	6801      	ldr	r1, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004554:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004556:	d042      	beq.n	80045de <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004558:	2b00      	cmp	r3, #0
 800455a:	d039      	beq.n	80045d0 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800455c:	684b      	ldr	r3, [r1, #4]
 800455e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004562:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004564:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8004566:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8004568:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 800456a:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800456c:	3b01      	subs	r3, #1
 800456e:	b29b      	uxth	r3, r3
 8004570:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004572:	2b00      	cmp	r3, #0
 8004574:	d132      	bne.n	80045dc <UART_Receive_IT.part.0.isra.0+0x90>
      huart->RxState = HAL_UART_STATE_READY;
 8004576:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800457a:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800457c:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800457e:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004580:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004582:	f021 0120 	bic.w	r1, r1, #32
 8004586:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004588:	68d1      	ldr	r1, [r2, #12]
 800458a:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800458e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004590:	6951      	ldr	r1, [r2, #20]
 8004592:	f021 0101 	bic.w	r1, r1, #1
 8004596:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004598:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459c:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80045a0:	2901      	cmp	r1, #1
 80045a2:	d125      	bne.n	80045f0 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	6303      	str	r3, [r0, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	f102 030c 	add.w	r3, r2, #12
 80045aa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	f102 0c0c 	add.w	ip, r2, #12
 80045b6:	e84c 3100 	strex	r1, r3, [ip]
 80045ba:	2900      	cmp	r1, #0
 80045bc:	d1f3      	bne.n	80045a6 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	06db      	lsls	r3, r3, #27
 80045c2:	d41a      	bmi.n	80045fa <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045c4:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80045c6:	f7ff ffbf 	bl	8004548 <HAL_UARTEx_RxEventCallback>
}
 80045ca:	b003      	add	sp, #12
 80045cc:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045d0:	6903      	ldr	r3, [r0, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1c2      	bne.n	800455c <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d6:	684b      	ldr	r3, [r1, #4]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e7c2      	b.n	8004562 <UART_Receive_IT.part.0.isra.0+0x16>
 80045dc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045de:	6903      	ldr	r3, [r0, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f8      	bne.n	80045d6 <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045e4:	684b      	ldr	r3, [r1, #4]
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 80045ee:	e7bb      	b.n	8004568 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 80045f0:	f002 fed6 	bl	80073a0 <HAL_UART_RxCpltCallback>
}
 80045f4:	b003      	add	sp, #12
 80045f6:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045fa:	2300      	movs	r3, #0
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	6853      	ldr	r3, [r2, #4]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	9b01      	ldr	r3, [sp, #4]
 8004608:	e7dc      	b.n	80045c4 <UART_Receive_IT.part.0.isra.0+0x78>
 800460a:	bf00      	nop

0800460c <HAL_UART_IRQHandler>:
{
 800460c:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800460e:	6803      	ldr	r3, [r0, #0]
{
 8004610:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004612:	681a      	ldr	r2, [r3, #0]
{
 8004614:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8004616:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800461a:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800461c:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 800461e:	d16f      	bne.n	8004700 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004620:	0691      	lsls	r1, r2, #26
 8004622:	d502      	bpl.n	800462a <HAL_UART_IRQHandler+0x1e>
 8004624:	06a9      	lsls	r1, r5, #26
 8004626:	f100 80a0 	bmi.w	800476a <HAL_UART_IRQHandler+0x15e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800462c:	2901      	cmp	r1, #1
 800462e:	d00b      	beq.n	8004648 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004630:	0610      	lsls	r0, r2, #24
 8004632:	d502      	bpl.n	800463a <HAL_UART_IRQHandler+0x2e>
 8004634:	0629      	lsls	r1, r5, #24
 8004636:	f100 80a2 	bmi.w	800477e <HAL_UART_IRQHandler+0x172>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800463a:	0652      	lsls	r2, r2, #25
 800463c:	d502      	bpl.n	8004644 <HAL_UART_IRQHandler+0x38>
 800463e:	0668      	lsls	r0, r5, #25
 8004640:	f100 80bc 	bmi.w	80047bc <HAL_UART_IRQHandler+0x1b0>
}
 8004644:	b003      	add	sp, #12
 8004646:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004648:	06d0      	lsls	r0, r2, #27
 800464a:	d5f1      	bpl.n	8004630 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800464c:	06e9      	lsls	r1, r5, #27
 800464e:	d5ef      	bpl.n	8004630 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004650:	2200      	movs	r2, #0
 8004652:	9201      	str	r2, [sp, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	9201      	str	r2, [sp, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	9201      	str	r2, [sp, #4]
 800465c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	0655      	lsls	r5, r2, #25
 8004662:	f140 8135 	bpl.w	80048d0 <HAL_UART_IRQHandler+0x2c4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004666:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004668:	6802      	ldr	r2, [r0, #0]
 800466a:	6852      	ldr	r2, [r2, #4]
 800466c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800466e:	2a00      	cmp	r2, #0
 8004670:	d0e8      	beq.n	8004644 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004672:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004674:	4291      	cmp	r1, r2
 8004676:	d9e5      	bls.n	8004644 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004678:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800467a:	6982      	ldr	r2, [r0, #24]
 800467c:	2a20      	cmp	r2, #32
 800467e:	d036      	beq.n	80046ee <HAL_UART_IRQHandler+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	f103 020c 	add.w	r2, r3, #12
 8004684:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004688:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	f103 050c 	add.w	r5, r3, #12
 8004690:	e845 2100 	strex	r1, r2, [r5]
 8004694:	2900      	cmp	r1, #0
 8004696:	d1f3      	bne.n	8004680 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	f103 0214 	add.w	r2, r3, #20
 800469c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	f103 0514 	add.w	r5, r3, #20
 80046a8:	e845 2100 	strex	r1, r2, [r5]
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d1f3      	bne.n	8004698 <HAL_UART_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	f103 0214 	add.w	r2, r3, #20
 80046b4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	f103 0514 	add.w	r5, r3, #20
 80046c0:	e845 2100 	strex	r1, r2, [r5]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	d1f3      	bne.n	80046b0 <HAL_UART_IRQHandler+0xa4>
          huart->RxState = HAL_UART_STATE_READY;
 80046c8:	2220      	movs	r2, #32
 80046ca:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	f103 020c 	add.w	r2, r3, #12
 80046d4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	f103 050c 	add.w	r5, r3, #12
 80046e0:	e845 2100 	strex	r1, r2, [r5]
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d1f3      	bne.n	80046d0 <HAL_UART_IRQHandler+0xc4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046e8:	f7fd fbaa 	bl	8001e40 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ec:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ee:	2302      	movs	r3, #2
 80046f0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046f2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80046f4:	4620      	mov	r0, r4
 80046f6:	1ac9      	subs	r1, r1, r3
 80046f8:	b289      	uxth	r1, r1
 80046fa:	f7ff ff25 	bl	8004548 <HAL_UARTEx_RxEventCallback>
 80046fe:	e7a1      	b.n	8004644 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004700:	f011 0101 	ands.w	r1, r1, #1
 8004704:	d178      	bne.n	80047f8 <HAL_UART_IRQHandler+0x1ec>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004706:	f415 7f90 	tst.w	r5, #288	@ 0x120
 800470a:	d08e      	beq.n	800462a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800470c:	07d0      	lsls	r0, r2, #31
 800470e:	d50a      	bpl.n	8004726 <HAL_UART_IRQHandler+0x11a>
 8004710:	05e8      	lsls	r0, r5, #23
 8004712:	f140 80d9 	bpl.w	80048c8 <HAL_UART_IRQHandler+0x2bc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004716:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004718:	f040 0001 	orr.w	r0, r0, #1
 800471c:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800471e:	0750      	lsls	r0, r2, #29
 8004720:	d55b      	bpl.n	80047da <HAL_UART_IRQHandler+0x1ce>
 8004722:	2900      	cmp	r1, #0
 8004724:	d16c      	bne.n	8004800 <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004726:	0790      	lsls	r0, r2, #30
 8004728:	d570      	bpl.n	800480c <HAL_UART_IRQHandler+0x200>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800472a:	0710      	lsls	r0, r2, #28
 800472c:	f100 80c9 	bmi.w	80048c2 <HAL_UART_IRQHandler+0x2b6>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004730:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004732:	2900      	cmp	r1, #0
 8004734:	d086      	beq.n	8004644 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004736:	0691      	lsls	r1, r2, #26
 8004738:	d509      	bpl.n	800474e <HAL_UART_IRQHandler+0x142>
 800473a:	06aa      	lsls	r2, r5, #26
 800473c:	d507      	bpl.n	800474e <HAL_UART_IRQHandler+0x142>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800473e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8004742:	2a22      	cmp	r2, #34	@ 0x22
 8004744:	d103      	bne.n	800474e <HAL_UART_IRQHandler+0x142>
 8004746:	4620      	mov	r0, r4
 8004748:	f7ff ff00 	bl	800454c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004750:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004752:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004756:	f001 0108 	and.w	r1, r1, #8
 800475a:	ea52 0501 	orrs.w	r5, r2, r1
 800475e:	d15c      	bne.n	800481a <HAL_UART_IRQHandler+0x20e>
        HAL_UART_ErrorCallback(huart);
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff fee7 	bl	8004534 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	6465      	str	r5, [r4, #68]	@ 0x44
 8004768:	e76c      	b.n	8004644 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800476a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800476e:	2b22      	cmp	r3, #34	@ 0x22
 8004770:	f47f af68 	bne.w	8004644 <HAL_UART_IRQHandler+0x38>
}
 8004774:	b003      	add	sp, #12
 8004776:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800477a:	f7ff bee7 	b.w	800454c <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800477e:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004782:	2a21      	cmp	r2, #33	@ 0x21
 8004784:	f47f af5e 	bne.w	8004644 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800478a:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004790:	f000 80d9 	beq.w	8004946 <HAL_UART_IRQHandler+0x33a>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004794:	1c51      	adds	r1, r2, #1
 8004796:	6221      	str	r1, [r4, #32]
 8004798:	7812      	ldrb	r2, [r2, #0]
 800479a:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800479c:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800479e:	3a01      	subs	r2, #1
 80047a0:	b292      	uxth	r2, r2
 80047a2:	84e2      	strh	r2, [r4, #38]	@ 0x26
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	f47f af4d 	bne.w	8004644 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047b0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	e743      	b.n	8004644 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047be:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80047c0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047c6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80047c8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80047cc:	f7ff feb0 	bl	8004530 <HAL_UART_TxCpltCallback>
    return;
 80047d0:	e738      	b.n	8004644 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047d2:	05e8      	lsls	r0, r5, #23
 80047d4:	d49f      	bmi.n	8004716 <HAL_UART_IRQHandler+0x10a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d6:	0750      	lsls	r0, r2, #29
 80047d8:	d412      	bmi.n	8004800 <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047da:	0790      	lsls	r0, r2, #30
 80047dc:	d516      	bpl.n	800480c <HAL_UART_IRQHandler+0x200>
 80047de:	2900      	cmp	r1, #0
 80047e0:	d0a3      	beq.n	800472a <HAL_UART_IRQHandler+0x11e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80047e4:	f041 0104 	orr.w	r1, r1, #4
 80047e8:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047ea:	0711      	lsls	r1, r2, #28
 80047ec:	d5a0      	bpl.n	8004730 <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ee:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80047f0:	f041 0108 	orr.w	r1, r1, #8
 80047f4:	6461      	str	r1, [r4, #68]	@ 0x44
 80047f6:	e79b      	b.n	8004730 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047f8:	07d0      	lsls	r0, r2, #31
 80047fa:	d4ea      	bmi.n	80047d2 <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047fc:	0750      	lsls	r0, r2, #29
 80047fe:	d55b      	bpl.n	80048b8 <HAL_UART_IRQHandler+0x2ac>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004800:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004802:	f040 0002 	orr.w	r0, r0, #2
 8004806:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004808:	0790      	lsls	r0, r2, #30
 800480a:	d4ea      	bmi.n	80047e2 <HAL_UART_IRQHandler+0x1d6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800480c:	0710      	lsls	r0, r2, #28
 800480e:	d58f      	bpl.n	8004730 <HAL_UART_IRQHandler+0x124>
 8004810:	f005 0020 	and.w	r0, r5, #32
 8004814:	4308      	orrs	r0, r1
 8004816:	d08b      	beq.n	8004730 <HAL_UART_IRQHandler+0x124>
 8004818:	e7e9      	b.n	80047ee <HAL_UART_IRQHandler+0x1e2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	f103 020c 	add.w	r2, r3, #12
 800481e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004822:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	f103 000c 	add.w	r0, r3, #12
 800482a:	e840 2100 	strex	r1, r2, [r0]
 800482e:	2900      	cmp	r1, #0
 8004830:	d1f3      	bne.n	800481a <HAL_UART_IRQHandler+0x20e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	f103 0214 	add.w	r2, r3, #20
 8004836:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	f103 0014 	add.w	r0, r3, #20
 8004842:	e840 2100 	strex	r1, r2, [r0]
 8004846:	2900      	cmp	r1, #0
 8004848:	d1f3      	bne.n	8004832 <HAL_UART_IRQHandler+0x226>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800484c:	2a01      	cmp	r2, #1
 800484e:	d022      	beq.n	8004896 <HAL_UART_IRQHandler+0x28a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004852:	2120      	movs	r1, #32
 8004854:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	0655      	lsls	r5, r2, #25
 800485e:	d527      	bpl.n	80048b0 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	f103 0214 	add.w	r2, r3, #20
 8004864:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	f103 0014 	add.w	r0, r3, #20
 8004870:	e840 2100 	strex	r1, r2, [r0]
 8004874:	2900      	cmp	r1, #0
 8004876:	d1f3      	bne.n	8004860 <HAL_UART_IRQHandler+0x254>
          if (huart->hdmarx != NULL)
 8004878:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800487a:	b1c8      	cbz	r0, 80048b0 <HAL_UART_IRQHandler+0x2a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800487c:	4b37      	ldr	r3, [pc, #220]	@ (800495c <HAL_UART_IRQHandler+0x350>)
 800487e:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004880:	f7fd fb02 	bl	8001e88 <HAL_DMA_Abort_IT>
 8004884:	2800      	cmp	r0, #0
 8004886:	f43f aedd 	beq.w	8004644 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800488a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800488c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 800488e:	b003      	add	sp, #12
 8004890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004894:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	f103 020c 	add.w	r2, r3, #12
 800489a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	f103 000c 	add.w	r0, r3, #12
 80048a6:	e840 2100 	strex	r1, r2, [r0]
 80048aa:	2900      	cmp	r1, #0
 80048ac:	d1f3      	bne.n	8004896 <HAL_UART_IRQHandler+0x28a>
 80048ae:	e7cf      	b.n	8004850 <HAL_UART_IRQHandler+0x244>
            HAL_UART_ErrorCallback(huart);
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff fe3f 	bl	8004534 <HAL_UART_ErrorCallback>
 80048b6:	e6c5      	b.n	8004644 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048b8:	0791      	lsls	r1, r2, #30
 80048ba:	d492      	bmi.n	80047e2 <HAL_UART_IRQHandler+0x1d6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048bc:	0711      	lsls	r1, r2, #28
 80048be:	d496      	bmi.n	80047ee <HAL_UART_IRQHandler+0x1e2>
 80048c0:	e736      	b.n	8004730 <HAL_UART_IRQHandler+0x124>
 80048c2:	06a9      	lsls	r1, r5, #26
 80048c4:	d493      	bmi.n	80047ee <HAL_UART_IRQHandler+0x1e2>
 80048c6:	e733      	b.n	8004730 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048c8:	0750      	lsls	r0, r2, #29
 80048ca:	f53f af2c 	bmi.w	8004726 <HAL_UART_IRQHandler+0x11a>
 80048ce:	e784      	b.n	80047da <HAL_UART_IRQHandler+0x1ce>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048d0:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 80048d2:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048d4:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 80048d6:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048d8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80048da:	2a00      	cmp	r2, #0
 80048dc:	f43f aeb2 	beq.w	8004644 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e0:	1a41      	subs	r1, r0, r1
 80048e2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80048e4:	2900      	cmp	r1, #0
 80048e6:	f43f aead 	beq.w	8004644 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	f103 020c 	add.w	r2, r3, #12
 80048ee:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	f103 050c 	add.w	r5, r3, #12
 80048fa:	e845 2000 	strex	r0, r2, [r5]
 80048fe:	2800      	cmp	r0, #0
 8004900:	d1f3      	bne.n	80048ea <HAL_UART_IRQHandler+0x2de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	f103 0214 	add.w	r2, r3, #20
 8004906:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	f103 0514 	add.w	r5, r3, #20
 8004912:	e845 2000 	strex	r0, r2, [r5]
 8004916:	2800      	cmp	r0, #0
 8004918:	d1f3      	bne.n	8004902 <HAL_UART_IRQHandler+0x2f6>
        huart->RxState = HAL_UART_STATE_READY;
 800491a:	2220      	movs	r2, #32
 800491c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004920:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	f103 020c 	add.w	r2, r3, #12
 8004926:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	f103 050c 	add.w	r5, r3, #12
 8004932:	e845 2000 	strex	r0, r2, [r5]
 8004936:	2800      	cmp	r0, #0
 8004938:	d1f3      	bne.n	8004922 <HAL_UART_IRQHandler+0x316>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800493a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800493c:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800493e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004940:	f7ff fe02 	bl	8004548 <HAL_UARTEx_RxEventCallback>
 8004944:	e67e      	b.n	8004644 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004946:	6921      	ldr	r1, [r4, #16]
 8004948:	2900      	cmp	r1, #0
 800494a:	f47f af23 	bne.w	8004794 <HAL_UART_IRQHandler+0x188>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800494e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004952:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004956:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004958:	6222      	str	r2, [r4, #32]
 800495a:	e71f      	b.n	800479c <HAL_UART_IRQHandler+0x190>
 800495c:	08004539 	.word	0x08004539

08004960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004960:	b084      	sub	sp, #16
 8004962:	a801      	add	r0, sp, #4
 8004964:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004968:	b004      	add	sp, #16
 800496a:	2000      	movs	r0, #0
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop

08004970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004970:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004972:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004974:	f44f 413f 	mov.w	r1, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8004978:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  return HAL_OK;
}
 800497c:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800497e:	f8a3 1040 	strh.w	r1, [r3, #64]	@ 0x40
}
 8004982:	4770      	bx	lr

08004984 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004984:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004986:	f244 02ff 	movw	r2, #16639	@ 0x40ff
 800498a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40

  return HAL_OK;
}
 800498e:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004990:	400a      	ands	r2, r1
 8004992:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
}
 8004996:	4770      	bx	lr

08004998 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004998:	2000      	movs	r0, #0
 800499a:	4770      	bx	lr

0800499c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800499c:	b084      	sub	sp, #16
 800499e:	f10d 0c04 	add.w	ip, sp, #4
 80049a2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80049a6:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049a8:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049aa:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80049ac:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049ae:	f8a3 1040 	strh.w	r1, [r3, #64]	@ 0x40
}
 80049b2:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 80049b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  USBx->ISTR = 0U;
 80049b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80049bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop

080049c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049c6:	780a      	ldrb	r2, [r1, #0]
{
 80049c8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049ca:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80049ce:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049d2:	f420 40ec 	bic.w	r0, r0, #30208	@ 0x7600
 80049d6:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 80049da:	0400      	lsls	r0, r0, #16
 80049dc:	0c00      	lsrs	r0, r0, #16
  switch (ep->type)
 80049de:	f1be 0f03 	cmp.w	lr, #3
 80049e2:	f200 819d 	bhi.w	8004d20 <USB_ActivateEndpoint+0x35c>
 80049e6:	e8df f00e 	tbb	[pc, lr]
 80049ea:	726f      	.short	0x726f
 80049ec:	0252      	.short	0x0252
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049ee:	f440 60c0 	orr.w	r0, r0, #1536	@ 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80049f2:	f248 0c80 	movw	ip, #32896	@ 0x8080
 80049f6:	ea40 000c 	orr.w	r0, r0, ip
 80049fa:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049fe:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004a02:	f420 40e0 	bic.w	r0, r0, #28672	@ 0x7000
 8004a06:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 8004a0a:	0400      	lsls	r0, r0, #16
 8004a0c:	0c00      	lsrs	r0, r0, #16
 8004a0e:	4310      	orrs	r0, r2
 8004a10:	ea4c 0c00 	orr.w	ip, ip, r0
 8004a14:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004a18:	7b08      	ldrb	r0, [r1, #12]
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d16b      	bne.n	8004af6 <USB_ActivateEndpoint+0x132>
 8004a1e:	2000      	movs	r0, #0
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a20:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8004a22:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a24:	0864      	lsrs	r4, r4, #1
 8004a26:	0064      	lsls	r4, r4, #1
 8004a28:	eb03 1502 	add.w	r5, r3, r2, lsl #4
    if (ep->is_in != 0U)
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	f000 8115 	beq.w	8004c5c <USB_ActivateEndpoint+0x298>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a32:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004a36:	b289      	uxth	r1, r1
 8004a38:	4429      	add	r1, r5
 8004a3a:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a42:	0649      	lsls	r1, r1, #25
 8004a44:	d50d      	bpl.n	8004a62 <USB_ActivateEndpoint+0x9e>
 8004a46:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a4a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004a4e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004a52:	0409      	lsls	r1, r1, #16
 8004a54:	0c09      	lsrs	r1, r1, #16
 8004a56:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004a5a:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004a5e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a62:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004a66:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a6a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004a6e:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8004a72:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8004a76:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8004a7a:	d035      	beq.n	8004ae8 <USB_ActivateEndpoint+0x124>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a7c:	f081 0120 	eor.w	r1, r1, #32
 8004a80:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004a84:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004a88:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004a8c:	bd70      	pop	{r4, r5, r6, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a8e:	f248 0480 	movw	r4, #32896	@ 0x8080
 8004a92:	4320      	orrs	r0, r4
 8004a94:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a98:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004a9c:	4dac      	ldr	r5, [pc, #688]	@ (8004d50 <USB_ActivateEndpoint+0x38c>)
 8004a9e:	b280      	uxth	r0, r0
 8004aa0:	4028      	ands	r0, r5
 8004aa2:	4310      	orrs	r0, r2
 8004aa4:	4304      	orrs	r4, r0
 8004aa6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8004aaa:	7b08      	ldrb	r0, [r1, #12]
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d0b6      	beq.n	8004a1e <USB_ActivateEndpoint+0x5a>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ab0:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004ab4:	b280      	uxth	r0, r0
 8004ab6:	4028      	ands	r0, r5
 8004ab8:	f440 4001 	orr.w	r0, r0, #33024	@ 0x8100
 8004abc:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8004ac0:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e027      	b.n	8004b18 <USB_ActivateEndpoint+0x154>
      wEpRegVal |= USB_EP_CONTROL;
 8004ac8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
      break;
 8004acc:	e791      	b.n	80049f2 <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ace:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
      break;
 8004ad2:	e78e      	b.n	80049f2 <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004ad4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ad8:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004adc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004ae0:	0409      	lsls	r1, r1, #16
 8004ae2:	0c09      	lsrs	r1, r1, #16
 8004ae4:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8004ae8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004aec:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004af0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
  if (ep->doublebuffer == 0U)
 8004af6:	2000      	movs	r0, #0
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004af8:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8004afc:	f42c 4ce2 	bic.w	ip, ip, #28928	@ 0x7100
 8004b00:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
 8004b04:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004b08:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004b0c:	f44c 4c00 	orr.w	ip, ip, #32768	@ 0x8000
 8004b10:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
 8004b14:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b18:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004b1c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004b20:	eb03 1502 	add.w	r5, r3, r2, lsl #4
 8004b24:	b2a4      	uxth	r4, r4
 8004b26:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004b2a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004b2e:	442c      	add	r4, r5
 8004b30:	f8a4 c400 	strh.w	ip, [r4, #1024]	@ 0x400
 8004b34:	894c      	ldrh	r4, [r1, #10]
 8004b36:	f8b3 c050 	ldrh.w	ip, [r3, #80]	@ 0x50
 8004b3a:	0864      	lsrs	r4, r4, #1
 8004b3c:	fa1f fc8c 	uxth.w	ip, ip
 8004b40:	44ac      	add	ip, r5
 8004b42:	0064      	lsls	r4, r4, #1
 8004b44:	f8ac 4408 	strh.w	r4, [ip, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8004b48:	7849      	ldrb	r1, [r1, #1]
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	d13e      	bne.n	8004bcc <USB_ActivateEndpoint+0x208>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b52:	044e      	lsls	r6, r1, #17
 8004b54:	d50d      	bpl.n	8004b72 <USB_ActivateEndpoint+0x1ae>
 8004b56:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b5a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004b5e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004b62:	0409      	lsls	r1, r1, #16
 8004b64:	0c09      	lsrs	r1, r1, #16
 8004b66:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004b6a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004b6e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b72:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b76:	064d      	lsls	r5, r1, #25
 8004b78:	d50d      	bpl.n	8004b96 <USB_ActivateEndpoint+0x1d2>
 8004b7a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b7e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004b82:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004b86:	0409      	lsls	r1, r1, #16
 8004b88:	0c09      	lsrs	r1, r1, #16
 8004b8a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004b8e:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004b92:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b96:	f248 0480 	movw	r4, #32896	@ 0x8080
 8004b9a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b9e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004ba2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004ba6:	0409      	lsls	r1, r1, #16
 8004ba8:	0c09      	lsrs	r1, r1, #16
 8004baa:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8004bae:	4321      	orrs	r1, r4
 8004bb0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bb4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bb8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004bbc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8004bc0:	0409      	lsls	r1, r1, #16
 8004bc2:	0c09      	lsrs	r1, r1, #16
 8004bc4:	430c      	orrs	r4, r1
 8004bc6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
}
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bcc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bd0:	044c      	lsls	r4, r1, #17
 8004bd2:	d50d      	bpl.n	8004bf0 <USB_ActivateEndpoint+0x22c>
 8004bd4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bd8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004bdc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004be0:	0409      	lsls	r1, r1, #16
 8004be2:	0c09      	lsrs	r1, r1, #16
 8004be4:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004be8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004bec:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bf4:	0649      	lsls	r1, r1, #25
 8004bf6:	d50d      	bpl.n	8004c14 <USB_ActivateEndpoint+0x250>
 8004bf8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bfc:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004c00:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004c04:	0409      	lsls	r1, r1, #16
 8004c06:	0c09      	lsrs	r1, r1, #16
 8004c08:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004c0c:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004c10:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c14:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004c18:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c1c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004c20:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8004c24:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8004c28:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8004c2c:	bf18      	it	ne
 8004c2e:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c32:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004c36:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004c3a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004c42:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004c46:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004c4a:	0409      	lsls	r1, r1, #16
 8004c4c:	0c09      	lsrs	r1, r1, #16
 8004c4e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004c52:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004c56:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c5c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c5e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c62:	2e3e      	cmp	r6, #62	@ 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c64:	b289      	uxth	r1, r1
 8004c66:	4429      	add	r1, r5
 8004c68:	f8a1 4408 	strh.w	r4, [r1, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c6c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004c70:	b289      	uxth	r1, r1
 8004c72:	4429      	add	r1, r5
 8004c74:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 8004c78:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004c7c:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
 8004c80:	d82e      	bhi.n	8004ce0 <USB_ActivateEndpoint+0x31c>
 8004c82:	2e00      	cmp	r6, #0
 8004c84:	d13e      	bne.n	8004d04 <USB_ActivateEndpoint+0x340>
 8004c86:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 8004c8a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004c8e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004c92:	b2a4      	uxth	r4, r4
 8004c94:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c98:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004c9c:	0449      	lsls	r1, r1, #17
 8004c9e:	d50d      	bpl.n	8004cbc <USB_ActivateEndpoint+0x2f8>
 8004ca0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ca4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004ca8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004cac:	0409      	lsls	r1, r1, #16
 8004cae:	0c09      	lsrs	r1, r1, #16
 8004cb0:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004cb4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004cb8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	f47f af09 	bne.w	8004ad4 <USB_ActivateEndpoint+0x110>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cc8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ccc:	0412      	lsls	r2, r2, #16
 8004cce:	0c12      	lsrs	r2, r2, #16
 8004cd0:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8004cd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004cdc:	801a      	strh	r2, [r3, #0]
}
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ce0:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 8004ce4:	0975      	lsrs	r5, r6, #5
 8004ce6:	06f6      	lsls	r6, r6, #27
 8004ce8:	bf08      	it	eq
 8004cea:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8004cee:	b2a4      	uxth	r4, r4
 8004cf0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004cf4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004cf8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004cfc:	b2a4      	uxth	r4, r4
 8004cfe:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
 8004d02:	e7c9      	b.n	8004c98 <USB_ActivateEndpoint+0x2d4>
 8004d04:	07f4      	lsls	r4, r6, #31
 8004d06:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 8004d0a:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8004d0e:	bf48      	it	mi
 8004d10:	3501      	addmi	r5, #1
 8004d12:	b2a4      	uxth	r4, r4
 8004d14:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004d18:	b2a4      	uxth	r4, r4
 8004d1a:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
 8004d1e:	e7bb      	b.n	8004c98 <USB_ActivateEndpoint+0x2d4>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d20:	f248 0480 	movw	r4, #32896	@ 0x8080
 8004d24:	4320      	orrs	r0, r4
 8004d26:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d2a:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004d2e:	f420 40e0 	bic.w	r0, r0, #28672	@ 0x7000
 8004d32:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 8004d36:	0400      	lsls	r0, r0, #16
 8004d38:	0c00      	lsrs	r0, r0, #16
 8004d3a:	4310      	orrs	r0, r2
 8004d3c:	4304      	orrs	r4, r0
 8004d3e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8004d42:	7b08      	ldrb	r0, [r1, #12]
 8004d44:	b908      	cbnz	r0, 8004d4a <USB_ActivateEndpoint+0x386>
 8004d46:	2001      	movs	r0, #1
 8004d48:	e66a      	b.n	8004a20 <USB_ActivateEndpoint+0x5c>
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e6d4      	b.n	8004af8 <USB_ActivateEndpoint+0x134>
 8004d4e:	bf00      	nop
 8004d50:	ffff8f8f 	.word	0xffff8f8f

08004d54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d54:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 8004d56:	7b0c      	ldrb	r4, [r1, #12]
  {
    if (ep->is_in != 0U)
 8004d58:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d5a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004d5c:	b9c4      	cbnz	r4, 8004d90 <USB_DeactivateEndpoint+0x3c>
    if (ep->is_in != 0U)
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	f000 80b2 	beq.w	8004ec8 <USB_DeactivateEndpoint+0x174>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d64:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d68:	0654      	lsls	r4, r2, #25
 8004d6a:	f100 80c6 	bmi.w	8004efa <USB_DeactivateEndpoint+0x1a6>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d72:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7a:	0412      	lsls	r2, r2, #16
 8004d7c:	0c12      	lsrs	r2, r2, #16
 8004d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004d8a:	bc10      	pop	{r4}
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	4770      	bx	lr
    if (ep->is_in == 0U)
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	d14c      	bne.n	8004e2e <USB_DeactivateEndpoint+0xda>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d94:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d98:	0452      	lsls	r2, r2, #17
 8004d9a:	d50d      	bpl.n	8004db8 <USB_DeactivateEndpoint+0x64>
 8004d9c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004da0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004da4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004da8:	0412      	lsls	r2, r2, #16
 8004daa:	0c12      	lsrs	r2, r2, #16
 8004dac:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004db0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004db4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004dbc:	0654      	lsls	r4, r2, #25
 8004dbe:	d50d      	bpl.n	8004ddc <USB_DeactivateEndpoint+0x88>
 8004dc0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004dc4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004dc8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004dcc:	0412      	lsls	r2, r2, #16
 8004dce:	0c12      	lsrs	r2, r2, #16
 8004dd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dd4:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004dd8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ddc:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004de0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
}
 8004de4:	bc10      	pop	{r4}
      PCD_TX_DTOG(USBx, ep->num);
 8004de6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004dea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004dee:	0412      	lsls	r2, r2, #16
 8004df0:	0c12      	lsrs	r2, r2, #16
 8004df2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004df6:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004dfa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dfe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004e0a:	0412      	lsls	r2, r2, #16
 8004e0c:	0c12      	lsrs	r2, r2, #16
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e14:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e18:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e20:	0412      	lsls	r2, r2, #16
 8004e22:	0c12      	lsrs	r2, r2, #16
 8004e24:	4311      	orrs	r1, r2
 8004e26:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
}
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e32:	0451      	lsls	r1, r2, #17
 8004e34:	d50d      	bpl.n	8004e52 <USB_DeactivateEndpoint+0xfe>
 8004e36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e3a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004e3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004e42:	0412      	lsls	r2, r2, #16
 8004e44:	0c12      	lsrs	r2, r2, #16
 8004e46:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004e4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e52:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e56:	0652      	lsls	r2, r2, #25
 8004e58:	d50d      	bpl.n	8004e76 <USB_DeactivateEndpoint+0x122>
 8004e5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e5e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004e62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004e66:	0412      	lsls	r2, r2, #16
 8004e68:	0c12      	lsrs	r2, r2, #16
 8004e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e6e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004e72:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e76:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004e7a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
}
 8004e7e:	bc10      	pop	{r4}
      PCD_RX_DTOG(USBx, ep->num);
 8004e80:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004e84:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004e88:	0412      	lsls	r2, r2, #16
 8004e8a:	0c12      	lsrs	r2, r2, #16
 8004e8c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004e90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e94:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e98:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e9c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea4:	0412      	lsls	r2, r2, #16
 8004ea6:	0c12      	lsrs	r2, r2, #16
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004eb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004eb6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004eba:	0412      	lsls	r2, r2, #16
 8004ebc:	0c12      	lsrs	r2, r2, #16
 8004ebe:	4311      	orrs	r1, r2
 8004ec0:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
}
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ec8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ecc:	0451      	lsls	r1, r2, #17
 8004ece:	d50d      	bpl.n	8004eec <USB_DeactivateEndpoint+0x198>
 8004ed0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ed4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004ed8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004edc:	0412      	lsls	r2, r2, #16
 8004ede:	0c12      	lsrs	r2, r2, #16
 8004ee0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004ee4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ee8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ef0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ef4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ef8:	e73f      	b.n	8004d7a <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004efa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004efe:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004f02:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004f06:	0412      	lsls	r2, r2, #16
 8004f08:	0c12      	lsrs	r2, r2, #16
 8004f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f0e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004f12:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8004f16:	e72a      	b.n	8004d6e <USB_DeactivateEndpoint+0x1a>

08004f18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f1c:	784b      	ldrb	r3, [r1, #1]
    {
      len = ep->xfer_len;
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f1e:	7b0c      	ldrb	r4, [r1, #12]
  if (ep->is_in == 1U)
 8004f20:	2b01      	cmp	r3, #1
{
 8004f22:	b083      	sub	sp, #12
  if (ep->is_in == 1U)
 8004f24:	d072      	beq.n	800500c <USB_EPStartXfer+0xf4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004f26:	2c00      	cmp	r4, #0
 8004f28:	d03c      	beq.n	8004fa4 <USB_EPStartXfer+0x8c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f2a:	78ca      	ldrb	r2, [r1, #3]
 8004f2c:	2a02      	cmp	r2, #2
 8004f2e:	f000 80df 	beq.w	80050f0 <USB_EPStartXfer+0x1d8>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f32:	2a01      	cmp	r2, #1
 8004f34:	f040 80d8 	bne.w	80050e8 <USB_EPStartXfer+0x1d0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f38:	698a      	ldr	r2, [r1, #24]
 8004f3a:	690c      	ldr	r4, [r1, #16]
 8004f3c:	42a2      	cmp	r2, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8004f3e:	bf94      	ite	ls
 8004f40:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 8004f42:	1b15      	subhi	r5, r2, r4
 8004f44:	618d      	str	r5, [r1, #24]
 8004f46:	bf88      	it	hi
 8004f48:	4622      	movhi	r2, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d149      	bne.n	8004fe2 <USB_EPStartXfer+0xca>
 8004f4e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8004f52:	780b      	ldrb	r3, [r1, #0]
 8004f54:	b2a4      	uxth	r4, r4
 8004f56:	f200 4504 	addw	r5, r0, #1028	@ 0x404
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4425      	add	r5, r4
 8004f5e:	5aec      	ldrh	r4, [r5, r3]
 8004f60:	2a3e      	cmp	r2, #62	@ 0x3e
 8004f62:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004f66:	52ec      	strh	r4, [r5, r3]
 8004f68:	f200 460c 	addw	r6, r0, #1036	@ 0x40c
 8004f6c:	f200 81c3 	bhi.w	80052f6 <USB_EPStartXfer+0x3de>
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	f040 8223 	bne.w	80053bc <USB_EPStartXfer+0x4a4>
 8004f76:	5aea      	ldrh	r2, [r5, r3]
 8004f78:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004f7c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004f80:	b292      	uxth	r2, r2
 8004f82:	52ea      	strh	r2, [r5, r3]
 8004f84:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004f88:	b292      	uxth	r2, r2
 8004f8a:	4432      	add	r2, r6
 8004f8c:	5ad4      	ldrh	r4, [r2, r3]
 8004f8e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004f92:	52d4      	strh	r4, [r2, r3]
 8004f94:	5ad4      	ldrh	r4, [r2, r3]
 8004f96:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004f9a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004f9e:	b2a4      	uxth	r4, r4
 8004fa0:	52d4      	strh	r4, [r2, r3]
 8004fa2:	e01e      	b.n	8004fe2 <USB_EPStartXfer+0xca>
      if (ep->xfer_len > ep->maxpacket)
 8004fa4:	698a      	ldr	r2, [r1, #24]
 8004fa6:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004fa8:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8004faa:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8004fac:	bf84      	itt	hi
 8004fae:	1ad4      	subhi	r4, r2, r3
 8004fb0:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004fb2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004fb6:	618c      	str	r4, [r1, #24]
 8004fb8:	b29c      	uxth	r4, r3
 8004fba:	f200 430c 	addw	r3, r0, #1036	@ 0x40c
 8004fbe:	012d      	lsls	r5, r5, #4
 8004fc0:	4423      	add	r3, r4
 8004fc2:	5aec      	ldrh	r4, [r5, r3]
 8004fc4:	2a3e      	cmp	r2, #62	@ 0x3e
 8004fc6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004fca:	52ec      	strh	r4, [r5, r3]
 8004fcc:	d87c      	bhi.n	80050c8 <USB_EPStartXfer+0x1b0>
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	f040 80d9 	bne.w	8005186 <USB_EPStartXfer+0x26e>
 8004fd4:	5aea      	ldrh	r2, [r5, r3]
 8004fd6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004fda:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	52ea      	strh	r2, [r5, r3]
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004fe2:	780a      	ldrb	r2, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fe4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005000:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
 8005004:	2000      	movs	r0, #0
}
 8005006:	b003      	add	sp, #12
 8005008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800500c:	690d      	ldr	r5, [r1, #16]
 800500e:	698a      	ldr	r2, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005010:	694b      	ldr	r3, [r1, #20]
 8005012:	42aa      	cmp	r2, r5
 8005014:	bf28      	it	cs
 8005016:	462a      	movcs	r2, r5
    if (ep->doublebuffer == 0U)
 8005018:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 800501c:	b344      	cbz	r4, 8005070 <USB_EPStartXfer+0x158>
      if (ep->type == EP_TYPE_BULK)
 800501e:	78cf      	ldrb	r7, [r1, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005020:	780e      	ldrb	r6, [r1, #0]
      if (ep->type == EP_TYPE_BULK)
 8005022:	2f02      	cmp	r7, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8005024:	6a0c      	ldr	r4, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005026:	ea4f 1e06 	mov.w	lr, r6, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800502a:	f000 80b7 	beq.w	800519c <USB_EPStartXfer+0x284>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800502e:	f830 5026 	ldrh.w	r5, [r0, r6, lsl #2]
        ep->xfer_len_db -= len;
 8005032:	1aa4      	subs	r4, r4, r2
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005034:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
        ep->xfer_len_db -= len;
 8005038:	620c      	str	r4, [r1, #32]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800503a:	b294      	uxth	r4, r2
 800503c:	3401      	adds	r4, #1
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800503e:	066f      	lsls	r7, r5, #25
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005040:	b292      	uxth	r2, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005042:	ea4f 0454 	mov.w	r4, r4, lsr #1
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005046:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005048:	f140 80fd 	bpl.w	8005246 <USB_EPStartXfer+0x32e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800504c:	f200 450c 	addw	r5, r0, #1036	@ 0x40c
 8005050:	4435      	add	r5, r6
 8005052:	f825 200e 	strh.w	r2, [r5, lr]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005056:	894a      	ldrh	r2, [r1, #10]
 8005058:	eb0c 0242 	add.w	r2, ip, r2, lsl #1

  for (count = n; count != 0U; count--)
 800505c:	b314      	cbz	r4, 80050a4 <USB_EPStartXfer+0x18c>
 800505e:	eb03 0544 	add.w	r5, r3, r4, lsl #1
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005062:	f833 4b02 	ldrh.w	r4, [r3], #2
  for (count = n; count != 0U; count--)
 8005066:	42ab      	cmp	r3, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8005068:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 800506c:	d1f9      	bne.n	8005062 <USB_EPStartXfer+0x14a>
 800506e:	e019      	b.n	80050a4 <USB_EPStartXfer+0x18c>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005070:	b296      	uxth	r6, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005072:	88cc      	ldrh	r4, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005074:	3601      	adds	r6, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005076:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
  for (count = n; count != 0U; count--)
 800507a:	0876      	lsrs	r6, r6, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800507c:	b292      	uxth	r2, r2
  for (count = n; count != 0U; count--)
 800507e:	bf18      	it	ne
 8005080:	eb04 0686 	addne.w	r6, r4, r6, lsl #2
 8005084:	d005      	beq.n	8005092 <USB_EPStartXfer+0x17a>
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005086:	f833 5b02 	ldrh.w	r5, [r3], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800508a:	f824 5b04 	strh.w	r5, [r4], #4
  for (count = n; count != 0U; count--)
 800508e:	42b4      	cmp	r4, r6
 8005090:	d1f9      	bne.n	8005086 <USB_EPStartXfer+0x16e>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005092:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
 8005096:	780c      	ldrb	r4, [r1, #0]
 8005098:	b2ad      	uxth	r5, r5
 800509a:	f200 4304 	addw	r3, r0, #1028	@ 0x404
 800509e:	0124      	lsls	r4, r4, #4
 80050a0:	442b      	add	r3, r5
 80050a2:	52e2      	strh	r2, [r4, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80050a4:	780a      	ldrb	r2, [r1, #0]
 80050a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80050ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80050c6:	e79d      	b.n	8005004 <USB_EPStartXfer+0xec>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80050c8:	0954      	lsrs	r4, r2, #5
 80050ca:	06d6      	lsls	r6, r2, #27
 80050cc:	5aea      	ldrh	r2, [r5, r3]
 80050ce:	bf08      	it	eq
 80050d0:	f104 34ff 	addeq.w	r4, r4, #4294967295
 80050d4:	b292      	uxth	r2, r2
 80050d6:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 80050da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80050de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80050e2:	b292      	uxth	r2, r2
 80050e4:	52ea      	strh	r2, [r5, r3]
 80050e6:	e77c      	b.n	8004fe2 <USB_EPStartXfer+0xca>
        return HAL_ERROR;
 80050e8:	2001      	movs	r0, #1
}
 80050ea:	b003      	add	sp, #12
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80050f0:	bb53      	cbnz	r3, 8005148 <USB_EPStartXfer+0x230>
 80050f2:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 80050f6:	780a      	ldrb	r2, [r1, #0]
 80050f8:	b2a4      	uxth	r4, r4
 80050fa:	f200 4304 	addw	r3, r0, #1028	@ 0x404
 80050fe:	0112      	lsls	r2, r2, #4
 8005100:	4423      	add	r3, r4
 8005102:	5a9c      	ldrh	r4, [r3, r2]
 8005104:	690d      	ldr	r5, [r1, #16]
 8005106:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800510a:	2d3e      	cmp	r5, #62	@ 0x3e
 800510c:	529c      	strh	r4, [r3, r2]
 800510e:	f200 460c 	addw	r6, r0, #1036	@ 0x40c
 8005112:	f200 80d2 	bhi.w	80052ba <USB_EPStartXfer+0x3a2>
 8005116:	2d00      	cmp	r5, #0
 8005118:	f040 8139 	bne.w	800538e <USB_EPStartXfer+0x476>
 800511c:	5a9c      	ldrh	r4, [r3, r2]
 800511e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005122:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005126:	b2a4      	uxth	r4, r4
 8005128:	529c      	strh	r4, [r3, r2]
 800512a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	4433      	add	r3, r6
 8005132:	5a9c      	ldrh	r4, [r3, r2]
 8005134:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005138:	529c      	strh	r4, [r3, r2]
 800513a:	5a9c      	ldrh	r4, [r3, r2]
 800513c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005140:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005144:	b2a4      	uxth	r4, r4
 8005146:	529c      	strh	r4, [r3, r2]
        if (ep->xfer_count != 0U)
 8005148:	69cb      	ldr	r3, [r1, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f43f af49 	beq.w	8004fe2 <USB_EPStartXfer+0xca>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005150:	f244 0340 	movw	r3, #16448	@ 0x4040
 8005154:	780a      	ldrb	r2, [r1, #0]
 8005156:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800515a:	ea03 0504 	and.w	r5, r3, r4
 800515e:	43a3      	bics	r3, r4
 8005160:	d002      	beq.n	8005168 <USB_EPStartXfer+0x250>
 8005162:	2d00      	cmp	r5, #0
 8005164:	f47f af3e 	bne.w	8004fe4 <USB_EPStartXfer+0xcc>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005168:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800516c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800517c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005180:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005184:	e72d      	b.n	8004fe2 <USB_EPStartXfer+0xca>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005186:	0854      	lsrs	r4, r2, #1
 8005188:	07d2      	lsls	r2, r2, #31
 800518a:	5aea      	ldrh	r2, [r5, r3]
 800518c:	bf48      	it	mi
 800518e:	3401      	addmi	r4, #1
 8005190:	b292      	uxth	r2, r2
 8005192:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 8005196:	b292      	uxth	r2, r2
 8005198:	52ea      	strh	r2, [r5, r3]
 800519a:	e722      	b.n	8004fe2 <USB_EPStartXfer+0xca>
        if (ep->xfer_len_db > ep->maxpacket)
 800519c:	42a5      	cmp	r5, r4
 800519e:	f200 4b04 	addw	fp, r0, #1028	@ 0x404
 80051a2:	d264      	bcs.n	800526e <USB_EPStartXfer+0x356>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051a4:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
          ep->xfer_len_db -= len;
 80051a8:	1aa4      	subs	r4, r4, r2
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051aa:	f427 47e0 	bic.w	r7, r7, #28672	@ 0x7000
 80051ae:	f027 0770 	bic.w	r7, r7, #112	@ 0x70
 80051b2:	043f      	lsls	r7, r7, #16
 80051b4:	0c3f      	lsrs	r7, r7, #16
 80051b6:	f447 4701 	orr.w	r7, r7, #33024	@ 0x8100
 80051ba:	f047 0780 	orr.w	r7, r7, #128	@ 0x80
 80051be:	f820 7026 	strh.w	r7, [r0, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051c2:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051c6:	b296      	uxth	r6, r2
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051c8:	f017 0f40 	tst.w	r7, #64	@ 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051cc:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051d0:	f106 0601 	add.w	r6, r6, #1
          ep->xfer_len_db -= len;
 80051d4:	620c      	str	r4, [r1, #32]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051d6:	ea4f 0656 	mov.w	r6, r6, lsr #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051da:	fa1f f982 	uxth.w	r9, r2
 80051de:	f200 4a0c 	addw	sl, r0, #1036	@ 0x40c
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051e2:	b2bf      	uxth	r7, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051e4:	f000 80a5 	beq.w	8005332 <USB_EPStartXfer+0x41a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051e8:	4457      	add	r7, sl
 80051ea:	f827 900e 	strh.w	r9, [r7, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051ee:	f8b1 800a 	ldrh.w	r8, [r1, #10]
 80051f2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
  for (count = n; count != 0U; count--)
 80051f6:	b156      	cbz	r6, 800520e <USB_EPStartXfer+0x2f6>
  uint8_t *pBuf = pbUsrBuf;
 80051f8:	461f      	mov	r7, r3
 80051fa:	eb03 0a46 	add.w	sl, r3, r6, lsl #1
 80051fe:	9501      	str	r5, [sp, #4]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005200:	f837 5b02 	ldrh.w	r5, [r7], #2
  for (count = n; count != 0U; count--)
 8005204:	4557      	cmp	r7, sl
    *pdwVal = (WrVal & 0xFFFFU);
 8005206:	f828 5b04 	strh.w	r5, [r8], #4
  for (count = n; count != 0U; count--)
 800520a:	d1f9      	bne.n	8005200 <USB_EPStartXfer+0x2e8>
 800520c:	9d01      	ldr	r5, [sp, #4]
            ep->xfer_buff += len;
 800520e:	4413      	add	r3, r2
            if (ep->xfer_len_db > ep->maxpacket)
 8005210:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 8005212:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005214:	f080 80e9 	bcs.w	80053ea <USB_EPStartXfer+0x4d2>
              ep->xfer_len_db -= len;
 8005218:	1aa2      	subs	r2, r4, r2
 800521a:	620a      	str	r2, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800521c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005220:	b292      	uxth	r2, r2
 8005222:	445a      	add	r2, fp
 8005224:	f822 900e 	strh.w	r9, [r2, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005228:	890a      	ldrh	r2, [r1, #8]
 800522a:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 800522e:	2e00      	cmp	r6, #0
 8005230:	f43f af38 	beq.w	80050a4 <USB_EPStartXfer+0x18c>
 8005234:	eb03 0646 	add.w	r6, r3, r6, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005238:	f833 4b02 	ldrh.w	r4, [r3], #2
  for (count = n; count != 0U; count--)
 800523c:	42b3      	cmp	r3, r6
    *pdwVal = (WrVal & 0xFFFFU);
 800523e:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 8005242:	d1f9      	bne.n	8005238 <USB_EPStartXfer+0x320>
 8005244:	e72e      	b.n	80050a4 <USB_EPStartXfer+0x18c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005246:	f200 4504 	addw	r5, r0, #1028	@ 0x404
 800524a:	4435      	add	r5, r6
 800524c:	f825 200e 	strh.w	r2, [r5, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005250:	890a      	ldrh	r2, [r1, #8]
 8005252:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 8005256:	2c00      	cmp	r4, #0
 8005258:	f43f af24 	beq.w	80050a4 <USB_EPStartXfer+0x18c>
 800525c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005260:	f833 2b02 	ldrh.w	r2, [r3], #2
  for (count = n; count != 0U; count--)
 8005264:	42a3      	cmp	r3, r4
    *pdwVal = (WrVal & 0xFFFFU);
 8005266:	f82c 2b04 	strh.w	r2, [ip], #4
  for (count = n; count != 0U; count--)
 800526a:	d1f9      	bne.n	8005260 <USB_EPStartXfer+0x348>
 800526c:	e71a      	b.n	80050a4 <USB_EPStartXfer+0x18c>
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800526e:	b2a5      	uxth	r5, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005270:	462c      	mov	r4, r5
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005272:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005276:	3401      	adds	r4, #1
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005278:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800527c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005280:	0412      	lsls	r2, r2, #16
 8005282:	0c12      	lsrs	r2, r2, #16
 8005284:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005288:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800528c:	f820 2026 	strh.w	r2, [r0, r6, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005290:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
  for (count = n; count != 0U; count--)
 8005294:	0864      	lsrs	r4, r4, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005296:	b292      	uxth	r2, r2
 8005298:	445a      	add	r2, fp
 800529a:	f822 500e 	strh.w	r5, [r2, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800529e:	890a      	ldrh	r2, [r1, #8]
 80052a0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 80052a4:	f43f aefe 	beq.w	80050a4 <USB_EPStartXfer+0x18c>
 80052a8:	eb02 0584 	add.w	r5, r2, r4, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 80052ac:	f833 4b02 	ldrh.w	r4, [r3], #2
    *pdwVal = (WrVal & 0xFFFFU);
 80052b0:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 80052b4:	42aa      	cmp	r2, r5
 80052b6:	d1f9      	bne.n	80052ac <USB_EPStartXfer+0x394>
 80052b8:	e6f4      	b.n	80050a4 <USB_EPStartXfer+0x18c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80052ba:	096c      	lsrs	r4, r5, #5
 80052bc:	06ef      	lsls	r7, r5, #27
 80052be:	bf08      	it	eq
 80052c0:	f104 34ff 	addeq.w	r4, r4, #4294967295
 80052c4:	5a9d      	ldrh	r5, [r3, r2]
 80052c6:	02a4      	lsls	r4, r4, #10
 80052c8:	b2a4      	uxth	r4, r4
 80052ca:	b2ad      	uxth	r5, r5
 80052cc:	4325      	orrs	r5, r4
 80052ce:	f445 4500 	orr.w	r5, r5, #32768	@ 0x8000
 80052d2:	529d      	strh	r5, [r3, r2]
 80052d4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
 80052d8:	b2ad      	uxth	r5, r5
 80052da:	4435      	add	r5, r6
 80052dc:	5aab      	ldrh	r3, [r5, r2]
 80052de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e2:	52ab      	strh	r3, [r5, r2]
 80052e4:	5aab      	ldrh	r3, [r5, r2]
 80052e6:	4323      	orrs	r3, r4
 80052e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	52ab      	strh	r3, [r5, r2]
 80052f4:	e728      	b.n	8005148 <USB_EPStartXfer+0x230>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052f6:	0954      	lsrs	r4, r2, #5
 80052f8:	06d7      	lsls	r7, r2, #27
 80052fa:	bf08      	it	eq
 80052fc:	f104 34ff 	addeq.w	r4, r4, #4294967295
 8005300:	02a2      	lsls	r2, r4, #10
 8005302:	5aec      	ldrh	r4, [r5, r3]
 8005304:	b292      	uxth	r2, r2
 8005306:	b2a4      	uxth	r4, r4
 8005308:	4314      	orrs	r4, r2
 800530a:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800530e:	52ec      	strh	r4, [r5, r3]
 8005310:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8005314:	b2a4      	uxth	r4, r4
 8005316:	4434      	add	r4, r6
 8005318:	5ae5      	ldrh	r5, [r4, r3]
 800531a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800531e:	52e5      	strh	r5, [r4, r3]
 8005320:	5ae5      	ldrh	r5, [r4, r3]
 8005322:	432a      	orrs	r2, r5
 8005324:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005328:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800532c:	b292      	uxth	r2, r2
 800532e:	52e2      	strh	r2, [r4, r3]
 8005330:	e657      	b.n	8004fe2 <USB_EPStartXfer+0xca>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005332:	445f      	add	r7, fp
 8005334:	f827 900e 	strh.w	r9, [r7, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005338:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 800533c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
  for (count = n; count != 0U; count--)
 8005340:	b156      	cbz	r6, 8005358 <USB_EPStartXfer+0x440>
  uint8_t *pBuf = pbUsrBuf;
 8005342:	461f      	mov	r7, r3
 8005344:	eb03 0b46 	add.w	fp, r3, r6, lsl #1
 8005348:	9501      	str	r5, [sp, #4]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800534a:	f837 5b02 	ldrh.w	r5, [r7], #2
  for (count = n; count != 0U; count--)
 800534e:	455f      	cmp	r7, fp
    *pdwVal = (WrVal & 0xFFFFU);
 8005350:	f828 5b04 	strh.w	r5, [r8], #4
  for (count = n; count != 0U; count--)
 8005354:	d1f9      	bne.n	800534a <USB_EPStartXfer+0x432>
 8005356:	9d01      	ldr	r5, [sp, #4]
            ep->xfer_buff += len;
 8005358:	4413      	add	r3, r2
            if (ep->xfer_len_db > ep->maxpacket)
 800535a:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800535c:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800535e:	d24b      	bcs.n	80053f8 <USB_EPStartXfer+0x4e0>
              ep->xfer_len_db -= len;
 8005360:	1aa4      	subs	r4, r4, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005362:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005366:	620c      	str	r4, [r1, #32]
 8005368:	b292      	uxth	r2, r2
 800536a:	4452      	add	r2, sl
 800536c:	f822 900e 	strh.w	r9, [r2, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005370:	894a      	ldrh	r2, [r1, #10]
 8005372:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 8005376:	2e00      	cmp	r6, #0
 8005378:	f43f ae94 	beq.w	80050a4 <USB_EPStartXfer+0x18c>
 800537c:	eb03 0646 	add.w	r6, r3, r6, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005380:	f833 4b02 	ldrh.w	r4, [r3], #2
  for (count = n; count != 0U; count--)
 8005384:	42b3      	cmp	r3, r6
    *pdwVal = (WrVal & 0xFFFFU);
 8005386:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 800538a:	d1f9      	bne.n	8005380 <USB_EPStartXfer+0x468>
 800538c:	e68a      	b.n	80050a4 <USB_EPStartXfer+0x18c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800538e:	086c      	lsrs	r4, r5, #1
 8005390:	07ed      	lsls	r5, r5, #31
 8005392:	bf48      	it	mi
 8005394:	3401      	addmi	r4, #1
 8005396:	5a9d      	ldrh	r5, [r3, r2]
 8005398:	02a4      	lsls	r4, r4, #10
 800539a:	b2a4      	uxth	r4, r4
 800539c:	b2ad      	uxth	r5, r5
 800539e:	4325      	orrs	r5, r4
 80053a0:	529d      	strh	r5, [r3, r2]
 80053a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4433      	add	r3, r6
 80053aa:	5a9d      	ldrh	r5, [r3, r2]
 80053ac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80053b0:	529d      	strh	r5, [r3, r2]
 80053b2:	5a9d      	ldrh	r5, [r3, r2]
 80053b4:	b2ad      	uxth	r5, r5
 80053b6:	432c      	orrs	r4, r5
 80053b8:	529c      	strh	r4, [r3, r2]
 80053ba:	e6c5      	b.n	8005148 <USB_EPStartXfer+0x230>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053bc:	0854      	lsrs	r4, r2, #1
 80053be:	07d2      	lsls	r2, r2, #31
 80053c0:	bf48      	it	mi
 80053c2:	3401      	addmi	r4, #1
 80053c4:	02a2      	lsls	r2, r4, #10
 80053c6:	5aec      	ldrh	r4, [r5, r3]
 80053c8:	b292      	uxth	r2, r2
 80053ca:	b2a4      	uxth	r4, r4
 80053cc:	4314      	orrs	r4, r2
 80053ce:	52ec      	strh	r4, [r5, r3]
 80053d0:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 80053d4:	b2a4      	uxth	r4, r4
 80053d6:	4434      	add	r4, r6
 80053d8:	5ae5      	ldrh	r5, [r4, r3]
 80053da:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80053de:	52e5      	strh	r5, [r4, r3]
 80053e0:	5ae5      	ldrh	r5, [r4, r3]
 80053e2:	b2ad      	uxth	r5, r5
 80053e4:	432a      	orrs	r2, r5
 80053e6:	52e2      	strh	r2, [r4, r3]
 80053e8:	e5fb      	b.n	8004fe2 <USB_EPStartXfer+0xca>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053ea:	b2a6      	uxth	r6, r4
 80053ec:	3601      	adds	r6, #1
              ep->xfer_len_db = 0U;
 80053ee:	2200      	movs	r2, #0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053f0:	fa1f f984 	uxth.w	r9, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053f4:	0876      	lsrs	r6, r6, #1
 80053f6:	e710      	b.n	800521a <USB_EPStartXfer+0x302>
 80053f8:	b2a6      	uxth	r6, r4
 80053fa:	3601      	adds	r6, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053fc:	fa1f f984 	uxth.w	r9, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005400:	0876      	lsrs	r6, r6, #1
              ep->xfer_len_db = 0U;
 8005402:	2400      	movs	r4, #0
 8005404:	e7ad      	b.n	8005362 <USB_EPStartXfer+0x44a>
 8005406:	bf00      	nop

08005408 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8005408:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800540a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800540c:	b18b      	cbz	r3, 8005432 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800540e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f083 0310 	eor.w	r3, r3, #16
 8005422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800542e:	2000      	movs	r0, #0
 8005430:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005432:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800543a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543e:	041b      	lsls	r3, r3, #16
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800544a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005452:	2000      	movs	r0, #0
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8005458:	7b0b      	ldrb	r3, [r1, #12]
 800545a:	bb3b      	cbnz	r3, 80054ac <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800545c:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800545e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005460:	b333      	cbz	r3, 80054b0 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005462:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005466:	065b      	lsls	r3, r3, #25
 8005468:	d50d      	bpl.n	8005486 <USB_EPClearStall+0x2e>
 800546a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	0c1b      	lsrs	r3, r3, #16
 800547a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005482:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005486:	78cb      	ldrb	r3, [r1, #3]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d00f      	beq.n	80054ac <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800548c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	f083 0320 	eor.w	r3, r3, #32
 80054a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80054ac:	2000      	movs	r0, #0
 80054ae:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054b4:	045b      	lsls	r3, r3, #17
 80054b6:	d50d      	bpl.n	80054d4 <USB_EPClearStall+0x7c>
 80054b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80054e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80054f4:	2000      	movs	r0, #0
 80054f6:	4770      	bx	lr

080054f8 <USB_SetDevAddress>:
  if (address == 0U)
 80054f8:	b911      	cbnz	r1, 8005500 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80054fa:	2380      	movs	r3, #128	@ 0x80
 80054fc:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
}
 8005500:	2000      	movs	r0, #0
 8005502:	4770      	bx	lr

08005504 <USB_DevConnect>:
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8005504:	2000      	movs	r0, #0
 8005506:	4770      	bx	lr

08005508 <USB_DevDisconnect>:
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8005508:	2000      	movs	r0, #0
 800550a:	4770      	bx	lr

0800550c <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800550c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
}
 8005510:	b280      	uxth	r0, r0
 8005512:	4770      	bx	lr

08005514 <USB_EP0_OutStart>:
}
 8005514:	2000      	movs	r0, #0
 8005516:	4770      	bx	lr

08005518 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005518:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800551a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  for (count = n; count != 0U; count--)
 800551e:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005520:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  for (count = n; count != 0U; count--)
 8005524:	d007      	beq.n	8005536 <USB_WritePMA+0x1e>
 8005526:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 800552a:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800552e:	f820 3b04 	strh.w	r3, [r0], #4
  for (count = n; count != 0U; count--)
 8005532:	4282      	cmp	r2, r0
 8005534:	d1f9      	bne.n	800552a <USB_WritePMA+0x12>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005536:	4770      	bx	lr

08005538 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005538:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800553a:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (count = n; count != 0U; count--)
 800553e:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005540:	f500 6580 	add.w	r5, r0, #1024	@ 0x400
  for (count = n; count != 0U; count--)
 8005544:	d014      	beq.n	8005570 <USB_ReadPMA+0x38>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005546:	4628      	mov	r0, r5
  for (count = n; count != 0U; count--)
 8005548:	46b6      	mov	lr, r6
 800554a:	f101 0c02 	add.w	ip, r1, #2
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800554e:	f830 2b04 	ldrh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8005552:	f10c 0c02 	add.w	ip, ip, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 8005556:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005558:	0a14      	lsrs	r4, r2, #8
  for (count = n; count != 0U; count--)
 800555a:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800555e:	f80c 2c04 	strb.w	r2, [ip, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005562:	f80c 4c03 	strb.w	r4, [ip, #-3]
  for (count = n; count != 0U; count--)
 8005566:	d1f2      	bne.n	800554e <USB_ReadPMA+0x16>
    pBuf++;
 8005568:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800556c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005570:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8005572:	bf44      	itt	mi
 8005574:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005576:	700b      	strbmi	r3, [r1, #0]
  }
}
 8005578:	bd70      	pop	{r4, r5, r6, pc}
 800557a:	bf00      	nop

0800557c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800557c:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800557e:	2229      	movs	r2, #41	@ 0x29
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8005580:	4801      	ldr	r0, [pc, #4]	@ (8005588 <USBD_CUSTOM_HID_GetFSCfgDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005582:	801a      	strh	r2, [r3, #0]
}
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	2000007c 	.word	0x2000007c

0800558c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800558c:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800558e:	2229      	movs	r2, #41	@ 0x29
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8005590:	4801      	ldr	r0, [pc, #4]	@ (8005598 <USBD_CUSTOM_HID_GetHSCfgDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005592:	801a      	strh	r2, [r3, #0]
}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000050 	.word	0x20000050

0800559c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800559c:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800559e:	2229      	movs	r2, #41	@ 0x29
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 80055a0:	4801      	ldr	r0, [pc, #4]	@ (80055a8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80055a2:	801a      	strh	r2, [r3, #0]
}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000024 	.word	0x20000024

080055ac <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 80055b2:	4618      	mov	r0, r3
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80055b4:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop

080055bc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055bc:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80055be:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8

  if (hhid->IsReportAvailable == 1U)
 80055c2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d106      	bne.n	80055d6 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80055c8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80055cc:	4620      	mov	r0, r4
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	64e3      	str	r3, [r4, #76]	@ 0x4c
  }

  return USBD_OK;
}
 80055d6:	2000      	movs	r0, #0
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	bf00      	nop

080055dc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80055dc:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80055de:	220a      	movs	r2, #10
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 80055e0:	4801      	ldr	r0, [pc, #4]	@ (80055e8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80055e2:	801a      	strh	r2, [r3, #0]
}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	2000000c 	.word	0x2000000c

080055ec <USBD_CUSTOM_HID_DataOut>:
{
 80055ec:	b538      	push	{r3, r4, r5, lr}
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80055ee:	e9d0 53ae 	ldrd	r5, r3, [r0, #696]	@ 0x2b8
{
 80055f2:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4628      	mov	r0, r5
 80055f8:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80055fa:	2340      	movs	r3, #64	@ 0x40
 80055fc:	462a      	mov	r2, r5
 80055fe:	2101      	movs	r1, #1
 8005600:	4620      	mov	r0, r4
 8005602:	f001 fe37 	bl	8007274 <USBD_LL_PrepareReceive>
}
 8005606:	2000      	movs	r0, #0
 8005608:	bd38      	pop	{r3, r4, r5, pc}
 800560a:	bf00      	nop

0800560c <USBD_CUSTOM_HID_Setup>:
  uint16_t status_info = 0U;
 800560c:	2200      	movs	r2, #0
{
 800560e:	b510      	push	{r4, lr}
 8005610:	b082      	sub	sp, #8
  uint16_t status_info = 0U;
 8005612:	f8ad 2006 	strh.w	r2, [sp, #6]
 8005616:	780a      	ldrb	r2, [r1, #0]
{
 8005618:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561a:	f012 0260 	ands.w	r2, r2, #96	@ 0x60
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800561e:	f8d0 12b8 	ldr.w	r1, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005622:	d016      	beq.n	8005652 <USBD_CUSTOM_HID_Setup+0x46>
 8005624:	2a20      	cmp	r2, #32
 8005626:	d10e      	bne.n	8005646 <USBD_CUSTOM_HID_Setup+0x3a>
      switch (req->bRequest)
 8005628:	785a      	ldrb	r2, [r3, #1]
 800562a:	3a02      	subs	r2, #2
 800562c:	2a09      	cmp	r2, #9
 800562e:	d80a      	bhi.n	8005646 <USBD_CUSTOM_HID_Setup+0x3a>
 8005630:	e8df f002 	tbb	[pc, r2]
 8005634:	09093732 	.word	0x09093732
 8005638:	3c090909 	.word	0x3c090909
 800563c:	2e42      	.short	0x2e42
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005642:	2a03      	cmp	r2, #3
 8005644:	d057      	beq.n	80056f6 <USBD_CUSTOM_HID_Setup+0xea>
            USBD_CtlError(pdev, req);
 8005646:	4619      	mov	r1, r3
 8005648:	f000 fc58 	bl	8005efc <USBD_CtlError>
      ret = USBD_FAIL;
 800564c:	2002      	movs	r0, #2
}
 800564e:	b002      	add	sp, #8
 8005650:	bd10      	pop	{r4, pc}
      switch (req->bRequest)
 8005652:	785a      	ldrb	r2, [r3, #1]
 8005654:	2a0b      	cmp	r2, #11
 8005656:	d8f6      	bhi.n	8005646 <USBD_CUSTOM_HID_Setup+0x3a>
 8005658:	f20f 0c04 	addw	ip, pc, #4
 800565c:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
 8005660:	0800563f 	.word	0x0800563f
 8005664:	08005647 	.word	0x08005647
 8005668:	08005647 	.word	0x08005647
 800566c:	08005647 	.word	0x08005647
 8005670:	08005647 	.word	0x08005647
 8005674:	08005647 	.word	0x08005647
 8005678:	080056e1 	.word	0x080056e1
 800567c:	08005647 	.word	0x08005647
 8005680:	08005647 	.word	0x08005647
 8005684:	08005647 	.word	0x08005647
 8005688:	080056cf 	.word	0x080056cf
 800568c:	080056c1 	.word	0x080056c1
          hhid->Protocol = (uint8_t)(req->wValue);
 8005690:	789b      	ldrb	r3, [r3, #2]
 8005692:	640b      	str	r3, [r1, #64]	@ 0x40
  uint8_t ret = USBD_OK;
 8005694:	2000      	movs	r0, #0
 8005696:	e7da      	b.n	800564e <USBD_CUSTOM_HID_Setup+0x42>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005698:	2201      	movs	r2, #1
 800569a:	3144      	adds	r1, #68	@ 0x44
 800569c:	f000 fc62 	bl	8005f64 <USBD_CtlSendData>
          break;
 80056a0:	e7f8      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80056a2:	2201      	movs	r2, #1
 80056a4:	3140      	adds	r1, #64	@ 0x40
 80056a6:	f000 fc5d 	bl	8005f64 <USBD_CtlSendData>
          break;
 80056aa:	e7f3      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
          hhid->IsReportAvailable = 1U;
 80056ac:	2401      	movs	r4, #1
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80056ae:	88da      	ldrh	r2, [r3, #6]
          hhid->IsReportAvailable = 1U;
 80056b0:	64cc      	str	r4, [r1, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80056b2:	f000 fc6f 	bl	8005f94 <USBD_CtlPrepareRx>
          break;
 80056b6:	e7ed      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80056b8:	885b      	ldrh	r3, [r3, #2]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	644b      	str	r3, [r1, #68]	@ 0x44
          break;
 80056be:	e7e9      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80056c4:	2a03      	cmp	r2, #3
 80056c6:	d1be      	bne.n	8005646 <USBD_CUSTOM_HID_Setup+0x3a>
            hhid->AltSetting = (uint8_t)(req->wValue);
 80056c8:	789b      	ldrb	r3, [r3, #2]
 80056ca:	648b      	str	r3, [r1, #72]	@ 0x48
 80056cc:	e7e2      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ce:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80056d2:	2a03      	cmp	r2, #3
 80056d4:	d1b7      	bne.n	8005646 <USBD_CUSTOM_HID_Setup+0x3a>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80056d6:	2201      	movs	r2, #1
 80056d8:	3148      	adds	r1, #72	@ 0x48
 80056da:	f000 fc43 	bl	8005f64 <USBD_CtlSendData>
 80056de:	e7d9      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80056e0:	885a      	ldrh	r2, [r3, #2]
 80056e2:	0a12      	lsrs	r2, r2, #8
 80056e4:	2a22      	cmp	r2, #34	@ 0x22
 80056e6:	d00c      	beq.n	8005702 <USBD_CUSTOM_HID_Setup+0xf6>
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80056e8:	2a21      	cmp	r2, #33	@ 0x21
 80056ea:	d012      	beq.n	8005712 <USBD_CUSTOM_HID_Setup+0x106>
  uint8_t  *pbuf = NULL;
 80056ec:	2100      	movs	r1, #0
  uint16_t len = 0U;
 80056ee:	460a      	mov	r2, r1
          USBD_CtlSendData(pdev, pbuf, len);
 80056f0:	f000 fc38 	bl	8005f64 <USBD_CtlSendData>
          break;
 80056f4:	e7ce      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80056f6:	2202      	movs	r2, #2
 80056f8:	f10d 0106 	add.w	r1, sp, #6
 80056fc:	f000 fc32 	bl	8005f64 <USBD_CtlSendData>
 8005700:	e7c8      	b.n	8005694 <USBD_CUSTOM_HID_Setup+0x88>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005702:	88da      	ldrh	r2, [r3, #6]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005704:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005708:	2a21      	cmp	r2, #33	@ 0x21
 800570a:	bf28      	it	cs
 800570c:	2221      	movcs	r2, #33	@ 0x21
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	e7ee      	b.n	80056f0 <USBD_CUSTOM_HID_Setup+0xe4>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005712:	88da      	ldrh	r2, [r3, #6]
              pbuf = USBD_CUSTOM_HID_Desc;
 8005714:	4902      	ldr	r1, [pc, #8]	@ (8005720 <USBD_CUSTOM_HID_Setup+0x114>)
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005716:	2a09      	cmp	r2, #9
 8005718:	bf28      	it	cs
 800571a:	2209      	movcs	r2, #9
 800571c:	e7e8      	b.n	80056f0 <USBD_CUSTOM_HID_Setup+0xe4>
 800571e:	bf00      	nop
 8005720:	20000018 	.word	0x20000018

08005724 <USBD_CUSTOM_HID_DeInit>:
{
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4604      	mov	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005728:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800572a:	2181      	movs	r1, #129	@ 0x81
 800572c:	f001 fd52 	bl	80071d4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005730:	2101      	movs	r1, #1
 8005732:	4620      	mov	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005734:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005736:	f001 fd4d 	bl	80071d4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800573a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800573e:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  if (pdev->pClassData != NULL)
 8005742:	b14b      	cbz	r3, 8005758 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005744:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800574c:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8005750:	f001 fda0 	bl	8007294 <USBD_static_free>
    pdev->pClassData = NULL;
 8005754:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8005758:	2000      	movs	r0, #0
 800575a:	bd38      	pop	{r3, r4, r5, pc}

0800575c <USBD_CUSTOM_HID_Init>:
{
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	4604      	mov	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005760:	2601      	movs	r6, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005762:	2340      	movs	r3, #64	@ 0x40
 8005764:	2203      	movs	r2, #3
 8005766:	2181      	movs	r1, #129	@ 0x81
 8005768:	f001 fd26 	bl	80071b8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800576c:	2340      	movs	r3, #64	@ 0x40
 800576e:	2203      	movs	r2, #3
 8005770:	4631      	mov	r1, r6
 8005772:	4620      	mov	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005774:	62e6      	str	r6, [r4, #44]	@ 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005776:	f001 fd1f 	bl	80071b8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800577a:	2054      	movs	r0, #84	@ 0x54
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800577c:	f8c4 616c 	str.w	r6, [r4, #364]	@ 0x16c
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005780:	f001 fd84 	bl	800728c <USBD_static_malloc>
 8005784:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8005788:	b178      	cbz	r0, 80057aa <USBD_CUSTOM_HID_Init+0x4e>
    hhid->state = CUSTOM_HID_IDLE;
 800578a:	2700      	movs	r7, #0
 800578c:	4605      	mov	r5, r0
 800578e:	f880 7050 	strb.w	r7, [r0, #80]	@ 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005792:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800579a:	2340      	movs	r3, #64	@ 0x40
 800579c:	462a      	mov	r2, r5
 800579e:	4631      	mov	r1, r6
 80057a0:	4620      	mov	r0, r4
 80057a2:	f001 fd67 	bl	8007274 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80057a6:	4638      	mov	r0, r7
}
 80057a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 80057aa:	4630      	mov	r0, r6
}
 80057ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ae:	bf00      	nop

080057b0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80057b0:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80057b2:	b119      	cbz	r1, 80057bc <USBD_CUSTOM_HID_RegisterInterface+0xc>
  {
    pdev->pUserData = fops;
    ret = USBD_OK;
 80057b4:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 80057b6:	f8c3 12bc 	str.w	r1, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80057ba:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80057bc:	2002      	movs	r0, #2
  }

  return ret;
}
 80057be:	4770      	bx	lr

080057c0 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057c0:	b188      	cbz	r0, 80057e6 <USBD_Init+0x26>
{
 80057c2:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80057c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057c8:	b113      	cbz	r3, 80057d0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057d0:	b109      	cbz	r1, 80057d6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80057d2:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057d6:	2301      	movs	r3, #1
  pdev->id = id;
 80057d8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057da:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057de:	f001 fca3 	bl	8007128 <USBD_LL_Init>

  return USBD_OK;
 80057e2:	2000      	movs	r0, #0
}
 80057e4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80057e6:	2002      	movs	r0, #2
}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057ec:	4603      	mov	r3, r0
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80057ee:	b119      	cbz	r1, 80057f8 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 80057f0:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 80057f2:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80057f6:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057f8:	2002      	movs	r0, #2
  }

  return status;
}
 80057fa:	4770      	bx	lr

080057fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057fc:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80057fe:	f001 fccf 	bl	80071a0 <USBD_LL_Start>

  return USBD_OK;
}
 8005802:	2000      	movs	r0, #0
 8005804:	bd08      	pop	{r3, pc}
 8005806:	bf00      	nop

08005808 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005808:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800580a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800580e:	b133      	cbz	r3, 800581e <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4798      	blx	r3
 8005814:	3800      	subs	r0, #0
 8005816:	bf18      	it	ne
 8005818:	2001      	movne	r0, #1
 800581a:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800581c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800581e:	2002      	movs	r0, #2
}
 8005820:	bd08      	pop	{r3, pc}
 8005822:	bf00      	nop

08005824 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005824:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005826:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4798      	blx	r3

  return USBD_OK;
}
 800582e:	2000      	movs	r0, #0
 8005830:	bd08      	pop	{r3, pc}
 8005832:	bf00      	nop

08005834 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005838:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 800583c:	4628      	mov	r0, r5
 800583e:	f000 fb51 	bl	8005ee4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005842:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8005844:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae

  switch (pdev->request.bmRequest & 0x1FU)
 8005848:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 800584c:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
 8005850:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8005854:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8005856:	f8c4 2294 	str.w	r2, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800585a:	d009      	beq.n	8005870 <USBD_LL_SetupStage+0x3c>
 800585c:	2b02      	cmp	r3, #2
 800585e:	d013      	beq.n	8005888 <USBD_LL_SetupStage+0x54>
 8005860:	b163      	cbz	r3, 800587c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005862:	4620      	mov	r0, r4
 8005864:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005868:	f001 fcc0 	bl	80071ec <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 800586c:	2000      	movs	r0, #0
 800586e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005870:	4629      	mov	r1, r5
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fa66 	bl	8005d44 <USBD_StdItfReq>
}
 8005878:	2000      	movs	r0, #0
 800587a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 800587c:	4629      	mov	r1, r5
 800587e:	4620      	mov	r0, r4
 8005880:	f000 f8f0 	bl	8005a64 <USBD_StdDevReq>
}
 8005884:	2000      	movs	r0, #0
 8005886:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8005888:	4629      	mov	r1, r5
 800588a:	4620      	mov	r0, r4
 800588c:	f000 fa8e 	bl	8005dac <USBD_StdEPReq>
}
 8005890:	2000      	movs	r0, #0
 8005892:	bd38      	pop	{r3, r4, r5, pc}

08005894 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005894:	b510      	push	{r4, lr}
 8005896:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005898:	b959      	cbnz	r1, 80058b2 <USBD_LL_DataOutStage+0x1e>
 800589a:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800589c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80058a0:	2a03      	cmp	r2, #3
 80058a2:	d013      	beq.n	80058cc <USBD_LL_DataOutStage+0x38>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80058a4:	2a05      	cmp	r2, #5
 80058a6:	d10d      	bne.n	80058c4 <USBD_LL_DataOutStage+0x30>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80058a8:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80058ac:	f001 fc9e 	bl	80071ec <USBD_LL_StallEP>
 80058b0:	e008      	b.n	80058c4 <USBD_LL_DataOutStage+0x30>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80058b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	b133      	cbz	r3, 80058c8 <USBD_LL_DataOutStage+0x34>
 80058ba:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80058be:	2a03      	cmp	r2, #3
 80058c0:	d102      	bne.n	80058c8 <USBD_LL_DataOutStage+0x34>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 80058c2:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80058c4:	2000      	movs	r0, #0
}
 80058c6:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80058c8:	2002      	movs	r0, #2
}
 80058ca:	bd10      	pop	{r4, pc}
      if (pep->rem_length > pep->maxpacket)
 80058cc:	e9d0 3258 	ldrd	r3, r2, [r0, #352]	@ 0x160
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d90a      	bls.n	80058ea <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 80058d4:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 80058d6:	429a      	cmp	r2, r3
 80058d8:	4661      	mov	r1, ip
        pep->rem_length -= pep->maxpacket;
 80058da:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80058de:	bf8c      	ite	hi
 80058e0:	b29a      	uxthhi	r2, r3
 80058e2:	b292      	uxthls	r2, r2
 80058e4:	f000 fb64 	bl	8005fb0 <USBD_CtlContinueRx>
 80058e8:	e7ec      	b.n	80058c4 <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80058ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	b11b      	cbz	r3, 80058fa <USBD_LL_DataOutStage+0x66>
 80058f2:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80058f6:	2a03      	cmp	r2, #3
 80058f8:	d003      	beq.n	8005902 <USBD_LL_DataOutStage+0x6e>
        USBD_CtlSendStatus(pdev);
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fb62 	bl	8005fc4 <USBD_CtlSendStatus>
 8005900:	e7e0      	b.n	80058c4 <USBD_LL_DataOutStage+0x30>
          pdev->pClass->EP0_RxReady(pdev);
 8005902:	4798      	blx	r3
 8005904:	e7f9      	b.n	80058fa <USBD_LL_DataOutStage+0x66>
 8005906:	bf00      	nop

08005908 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800590c:	b991      	cbnz	r1, 8005934 <USBD_LL_DataInStage+0x2c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800590e:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8005912:	2b02      	cmp	r3, #2
 8005914:	d01b      	beq.n	800594e <USBD_LL_DataInStage+0x46>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005916:	f033 0304 	bics.w	r3, r3, #4
 800591a:	d102      	bne.n	8005922 <USBD_LL_DataInStage+0x1a>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800591c:	2180      	movs	r1, #128	@ 0x80
 800591e:	f001 fc65 	bl	80071ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005922:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <USBD_LL_DataInStage+0x28>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005930:	2000      	movs	r0, #0
}
 8005932:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8005934:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	b133      	cbz	r3, 800594a <USBD_LL_DataInStage+0x42>
 800593c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005940:	2a03      	cmp	r2, #3
 8005942:	d102      	bne.n	800594a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 8005944:	4798      	blx	r3
  return USBD_OK;
 8005946:	2000      	movs	r0, #0
 8005948:	e7f3      	b.n	8005932 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 800594a:	2002      	movs	r0, #2
}
 800594c:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 800594e:	e9d0 3608 	ldrd	r3, r6, [r0, #32]
 8005952:	42b3      	cmp	r3, r6
 8005954:	d827      	bhi.n	80059a6 <USBD_LL_DataInStage+0x9e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005956:	69c3      	ldr	r3, [r0, #28]
 8005958:	fbb3 f5f6 	udiv	r5, r3, r6
 800595c:	fb06 3515 	mls	r5, r6, r5, r3
 8005960:	b98d      	cbnz	r5, 8005986 <USBD_LL_DataInStage+0x7e>
 8005962:	429e      	cmp	r6, r3
 8005964:	d80f      	bhi.n	8005986 <USBD_LL_DataInStage+0x7e>
            (pep->total_length >= pep->maxpacket) &&
 8005966:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800596a:	4293      	cmp	r3, r2
 800596c:	d20b      	bcs.n	8005986 <USBD_LL_DataInStage+0x7e>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800596e:	462a      	mov	r2, r5
 8005970:	f000 fb06 	bl	8005f80 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005974:	462b      	mov	r3, r5
 8005976:	462a      	mov	r2, r5
 8005978:	4629      	mov	r1, r5
 800597a:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800597c:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005980:	f001 fc78 	bl	8007274 <USBD_LL_PrepareReceive>
 8005984:	e7cd      	b.n	8005922 <USBD_LL_DataInStage+0x1a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005986:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	b11b      	cbz	r3, 8005996 <USBD_LL_DataInStage+0x8e>
 800598e:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8005992:	2a03      	cmp	r2, #3
 8005994:	d015      	beq.n	80059c2 <USBD_LL_DataInStage+0xba>
          USBD_LL_StallEP(pdev, 0x80U);
 8005996:	2180      	movs	r1, #128	@ 0x80
 8005998:	4620      	mov	r0, r4
 800599a:	f001 fc27 	bl	80071ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 fb1c 	bl	8005fdc <USBD_CtlReceiveStatus>
 80059a4:	e7bd      	b.n	8005922 <USBD_LL_DataInStage+0x1a>
        pep->rem_length -= pep->maxpacket;
 80059a6:	460d      	mov	r5, r1
 80059a8:	1b9b      	subs	r3, r3, r6
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80059aa:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 80059ac:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	f000 fae6 	bl	8005f80 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059b4:	462b      	mov	r3, r5
 80059b6:	462a      	mov	r2, r5
 80059b8:	4629      	mov	r1, r5
 80059ba:	4620      	mov	r0, r4
 80059bc:	f001 fc5a 	bl	8007274 <USBD_LL_PrepareReceive>
 80059c0:	e7af      	b.n	8005922 <USBD_LL_DataInStage+0x1a>
            pdev->pClass->EP0_TxSent(pdev);
 80059c2:	4620      	mov	r0, r4
 80059c4:	4798      	blx	r3
 80059c6:	e7e6      	b.n	8005996 <USBD_LL_DataInStage+0x8e>

080059c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059c8:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059ca:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059cc:	2640      	movs	r6, #64	@ 0x40
{
 80059ce:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059d0:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059d2:	4611      	mov	r1, r2
 80059d4:	4633      	mov	r3, r6
 80059d6:	f001 fbef 	bl	80071b8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059da:	4633      	mov	r3, r6
 80059dc:	2180      	movs	r1, #128	@ 0x80
 80059de:	2200      	movs	r2, #0
 80059e0:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059e2:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059e6:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059ea:	f001 fbe5 	bl	80071b8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80059ee:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80059f0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059f4:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059f6:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059f8:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059fc:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005a00:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a02:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8005a06:	b123      	cbz	r3, 8005a12 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a08:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005a12:	2000      	movs	r0, #0
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	bf00      	nop

08005a18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a18:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8005a1a:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8005a1c:	7419      	strb	r1, [r3, #16]
}
 8005a1e:	4770      	bx	lr

08005a20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a20:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005a22:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 8005a24:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
}
 8005a28:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005a2a:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->dev_old_state =  pdev->dev_state;
 8005a2e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
}
 8005a32:	4770      	bx	lr

08005a34 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a34:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a38:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a3a:	bf04      	itt	eq
 8005a3c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8005a40:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8005a44:	2000      	movs	r0, #0
 8005a46:	4770      	bx	lr

08005a48 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a48:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005a4c:	2a03      	cmp	r2, #3
 8005a4e:	d001      	beq.n	8005a54 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8005a50:	2000      	movs	r0, #0
 8005a52:	4770      	bx	lr
{
 8005a54:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8005a56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	b103      	cbz	r3, 8005a60 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8005a5e:	4798      	blx	r3
}
 8005a60:	2000      	movs	r0, #0
 8005a62:	bd08      	pop	{r3, pc}

08005a64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005a64:	b530      	push	{r4, r5, lr}
 8005a66:	780b      	ldrb	r3, [r1, #0]
 8005a68:	460d      	mov	r5, r1
 8005a6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a6e:	2b20      	cmp	r3, #32
{
 8005a70:	4604      	mov	r4, r0
 8005a72:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a74:	d00d      	beq.n	8005a92 <USBD_StdDevReq+0x2e>
 8005a76:	2b40      	cmp	r3, #64	@ 0x40
 8005a78:	d00b      	beq.n	8005a92 <USBD_StdDevReq+0x2e>
 8005a7a:	b19b      	cbz	r3, 8005aa4 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005a7c:	2180      	movs	r1, #128	@ 0x80
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f001 fbb4 	bl	80071ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005a84:	2100      	movs	r1, #0
 8005a86:	4620      	mov	r0, r4
 8005a88:	f001 fbb0 	bl	80071ec <USBD_LL_StallEP>
}
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	b003      	add	sp, #12
 8005a90:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8005a92:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005a96:	4629      	mov	r1, r5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4798      	blx	r3
}
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	b003      	add	sp, #12
 8005aa2:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8005aa4:	784b      	ldrb	r3, [r1, #1]
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d8e8      	bhi.n	8005a7c <USBD_StdDevReq+0x18>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <USBD_StdDevReq+0x4c>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005b0b 	.word	0x08005b0b
 8005ab4:	08005b33 	.word	0x08005b33
 8005ab8:	08005a7d 	.word	0x08005a7d
 8005abc:	08005b51 	.word	0x08005b51
 8005ac0:	08005a7d 	.word	0x08005a7d
 8005ac4:	08005b59 	.word	0x08005b59
 8005ac8:	08005b91 	.word	0x08005b91
 8005acc:	08005a7d 	.word	0x08005a7d
 8005ad0:	08005bc5 	.word	0x08005bc5
 8005ad4:	08005ad9 	.word	0x08005ad9
  cfgidx = (uint8_t)(req->wValue);
 8005ad8:	7889      	ldrb	r1, [r1, #2]
 8005ada:	4d99      	ldr	r5, [pc, #612]	@ (8005d40 <USBD_StdDevReq+0x2dc>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005adc:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005ade:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ae0:	d8cc      	bhi.n	8005a7c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005ae2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	f000 810a 	beq.w	8005d00 <USBD_StdDevReq+0x29c>
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	f000 80f8 	beq.w	8005ce2 <USBD_StdDevReq+0x27e>
  USBD_LL_StallEP(pdev, 0x80U);
 8005af2:	2180      	movs	r1, #128	@ 0x80
 8005af4:	f001 fb7a 	bl	80071ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005af8:	2100      	movs	r1, #0
 8005afa:	4620      	mov	r0, r4
 8005afc:	f001 fb76 	bl	80071ec <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005b00:	4620      	mov	r0, r4
 8005b02:	7829      	ldrb	r1, [r5, #0]
 8005b04:	f7ff fe8e 	bl	8005824 <USBD_ClrClassConfig>
        break;
 8005b08:	e7c0      	b.n	8005a8c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8005b0a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d8b3      	bhi.n	8005a7c <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8005b14:	88ca      	ldrh	r2, [r1, #6]
 8005b16:	2a02      	cmp	r2, #2
 8005b18:	d1b0      	bne.n	8005a7c <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup)
 8005b1a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005b1e:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2303      	movne	r3, #3
 8005b28:	f841 3f0c 	str.w	r3, [r1, #12]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005b2c:	f000 fa1a 	bl	8005f64 <USBD_CtlSendData>
      break;
 8005b30:	e7ac      	b.n	8005a8c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8005b32:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b36:	3b01      	subs	r3, #1
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d89f      	bhi.n	8005a7c <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b3c:	884b      	ldrh	r3, [r1, #2]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d1a4      	bne.n	8005a8c <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8005b42:	2300      	movs	r3, #0
        USBD_CtlSendStatus(pdev);
 8005b44:	4620      	mov	r0, r4
        pdev->dev_remote_wakeup = 0U;
 8005b46:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005b4a:	f000 fa3b 	bl	8005fc4 <USBD_CtlSendStatus>
 8005b4e:	e79d      	b.n	8005a8c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b50:	884b      	ldrh	r3, [r1, #2]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d19a      	bne.n	8005a8c <USBD_StdDevReq+0x28>
 8005b56:	e7f5      	b.n	8005b44 <USBD_StdDevReq+0xe0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b58:	888b      	ldrh	r3, [r1, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d18e      	bne.n	8005a7c <USBD_StdDevReq+0x18>
 8005b5e:	88cb      	ldrh	r3, [r1, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d18b      	bne.n	8005a7c <USBD_StdDevReq+0x18>
 8005b64:	884d      	ldrh	r5, [r1, #2]
 8005b66:	2d7f      	cmp	r5, #127	@ 0x7f
 8005b68:	d888      	bhi.n	8005a7c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d084      	beq.n	8005a7c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b72:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005b74:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b78:	f001 fb64 	bl	8007244 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fa21 	bl	8005fc4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	f000 80d7 	beq.w	8005d36 <USBD_StdDevReq+0x2d2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005b8e:	e77d      	b.n	8005a8c <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 8005b90:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8005b92:	886a      	ldrh	r2, [r5, #2]
  uint16_t len = 0U;
 8005b94:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8005b98:	0a13      	lsrs	r3, r2, #8
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	2b06      	cmp	r3, #6
 8005b9e:	f63f af6d 	bhi.w	8005a7c <USBD_StdDevReq+0x18>
 8005ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ba8 <USBD_StdDevReq+0x144>)
 8005ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba8:	08005c57 	.word	0x08005c57
 8005bac:	08005c3f 	.word	0x08005c3f
 8005bb0:	08005c2d 	.word	0x08005c2d
 8005bb4:	08005a7d 	.word	0x08005a7d
 8005bb8:	08005a7d 	.word	0x08005a7d
 8005bbc:	08005c17 	.word	0x08005c17
 8005bc0:	08005be9 	.word	0x08005be9
  if (req->wLength != 1U)
 8005bc4:	88ca      	ldrh	r2, [r1, #6]
 8005bc6:	2a01      	cmp	r2, #1
 8005bc8:	f47f af58 	bne.w	8005a7c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005bcc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d871      	bhi.n	8005cb8 <USBD_StdDevReq+0x254>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f43f af51 	beq.w	8005a7c <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8005bda:	4601      	mov	r1, r0
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005be2:	f000 f9bf 	bl	8005f64 <USBD_CtlSendData>
        break;
 8005be6:	e751      	b.n	8005a8c <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005be8:	7c03      	ldrb	r3, [r0, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f47f af46 	bne.w	8005a7c <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bf0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005bf4:	f10d 0006 	add.w	r0, sp, #6
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8005c00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005c04:	88ea      	ldrh	r2, [r5, #6]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d067      	beq.n	8005cda <USBD_StdDevReq+0x276>
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	d15b      	bne.n	8005cc6 <USBD_StdDevReq+0x262>
          USBD_CtlSendStatus(pdev);
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 f9d8 	bl	8005fc4 <USBD_CtlSendStatus>
 8005c14:	e73a      	b.n	8005a8c <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c16:	7c03      	ldrb	r3, [r0, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f af2f 	bne.w	8005a7c <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c22:	f10d 0006 	add.w	r0, sp, #6
 8005c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c28:	4798      	blx	r3
  if (err != 0U)
 8005c2a:	e7e9      	b.n	8005c00 <USBD_StdDevReq+0x19c>
      switch ((uint8_t)(req->wValue))
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	2a05      	cmp	r2, #5
 8005c30:	f63f af24 	bhi.w	8005a7c <USBD_StdDevReq+0x18>
 8005c34:	e8df f002 	tbb	[pc, r2]
 8005c38:	282e343a 	.word	0x282e343a
 8005c3c:	1722      	.short	0x1722
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3e:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8005c40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c44:	2a00      	cmp	r2, #0
 8005c46:	d168      	bne.n	8005d1a <USBD_StdDevReq+0x2b6>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	f10d 0006 	add.w	r0, sp, #6
 8005c4e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c50:	2302      	movs	r3, #2
 8005c52:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005c54:	e7d4      	b.n	8005c00 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c56:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005c5a:	f10d 0106 	add.w	r1, sp, #6
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	7c00      	ldrb	r0, [r0, #16]
 8005c62:	4798      	blx	r3
  if (err != 0U)
 8005c64:	e7cc      	b.n	8005c00 <USBD_StdDevReq+0x19c>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c66:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f43f af05 	beq.w	8005a7c <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c72:	7c20      	ldrb	r0, [r4, #16]
 8005c74:	f10d 0106 	add.w	r1, sp, #6
 8005c78:	4798      	blx	r3
  if (err != 0U)
 8005c7a:	e7c1      	b.n	8005c00 <USBD_StdDevReq+0x19c>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c7c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f5      	bne.n	8005c72 <USBD_StdDevReq+0x20e>
 8005c86:	e6f9      	b.n	8005a7c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1ef      	bne.n	8005c72 <USBD_StdDevReq+0x20e>
 8005c92:	e6f3      	b.n	8005a7c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c94:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e9      	bne.n	8005c72 <USBD_StdDevReq+0x20e>
 8005c9e:	e6ed      	b.n	8005a7c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ca0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <USBD_StdDevReq+0x20e>
 8005caa:	e6e7      	b.n	8005a7c <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005cac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1dd      	bne.n	8005c72 <USBD_StdDevReq+0x20e>
 8005cb6:	e6e1      	b.n	8005a7c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	f47f aedf 	bne.w	8005a7c <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005cbe:	1d01      	adds	r1, r0, #4
 8005cc0:	f000 f950 	bl	8005f64 <USBD_CtlSendData>
        break;
 8005cc4:	e6e2      	b.n	8005a8c <USBD_StdDevReq+0x28>
      len = MIN(len, req->wLength);
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	bf28      	it	cs
 8005cca:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ccc:	4601      	mov	r1, r0
 8005cce:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005cd0:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cd4:	f000 f946 	bl	8005f64 <USBD_CtlSendData>
 8005cd8:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 8005cda:	2a00      	cmp	r2, #0
 8005cdc:	f47f aed6 	bne.w	8005a8c <USBD_StdDevReq+0x28>
 8005ce0:	e795      	b.n	8005c0e <USBD_StdDevReq+0x1aa>
        if (cfgidx == 0U)
 8005ce2:	b309      	cbz	r1, 8005d28 <USBD_StdDevReq+0x2c4>
        else if (cfgidx != pdev->dev_config)
 8005ce4:	6841      	ldr	r1, [r0, #4]
 8005ce6:	2901      	cmp	r1, #1
 8005ce8:	d091      	beq.n	8005c0e <USBD_StdDevReq+0x1aa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cea:	b2c9      	uxtb	r1, r1
 8005cec:	f7ff fd9a 	bl	8005824 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005cf0:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cf2:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8005cf4:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cf6:	f7ff fd87 	bl	8005808 <USBD_SetClassConfig>
 8005cfa:	2802      	cmp	r0, #2
 8005cfc:	d187      	bne.n	8005c0e <USBD_StdDevReq+0x1aa>
 8005cfe:	e6bd      	b.n	8005a7c <USBD_StdDevReq+0x18>
        if (cfgidx)
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d084      	beq.n	8005c0e <USBD_StdDevReq+0x1aa>
          pdev->dev_config = cfgidx;
 8005d04:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d06:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005d08:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d0a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d0e:	f7ff fd7b 	bl	8005808 <USBD_SetClassConfig>
 8005d12:	2802      	cmp	r0, #2
 8005d14:	f47f af7b 	bne.w	8005c0e <USBD_StdDevReq+0x1aa>
 8005d18:	e6b0      	b.n	8005a7c <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	f10d 0006 	add.w	r0, sp, #6
 8005d20:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d22:	2302      	movs	r3, #2
 8005d24:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005d26:	e76b      	b.n	8005c00 <USBD_StdDevReq+0x19c>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d28:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005d2a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d2c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005d30:	f7ff fd78 	bl	8005824 <USBD_ClrClassConfig>
 8005d34:	e76b      	b.n	8005c0e <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005d3c:	e6a6      	b.n	8005a8c <USBD_StdDevReq+0x28>
 8005d3e:	bf00      	nop
 8005d40:	200007ac 	.word	0x200007ac

08005d44 <USBD_StdItfReq>:
{
 8005d44:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d46:	780b      	ldrb	r3, [r1, #0]
{
 8005d48:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d4a:	065a      	lsls	r2, r3, #25
{
 8005d4c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d4e:	d50c      	bpl.n	8005d6a <USBD_StdItfReq+0x26>
 8005d50:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005d54:	2a40      	cmp	r2, #64	@ 0x40
 8005d56:	d008      	beq.n	8005d6a <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 8005d58:	2180      	movs	r1, #128	@ 0x80
 8005d5a:	f001 fa47 	bl	80071ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4620      	mov	r0, r4
 8005d62:	f001 fa43 	bl	80071ec <USBD_LL_StallEP>
}
 8005d66:	2000      	movs	r0, #0
 8005d68:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005d6a:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d811      	bhi.n	8005d98 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d74:	792b      	ldrb	r3, [r5, #4]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d80e      	bhi.n	8005d98 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d7a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	4620      	mov	r0, r4
 8005d84:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d86:	88eb      	ldrh	r3, [r5, #6]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ec      	bne.n	8005d66 <USBD_StdItfReq+0x22>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d1ea      	bne.n	8005d66 <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 f917 	bl	8005fc4 <USBD_CtlSendStatus>
 8005d96:	e7e6      	b.n	8005d66 <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 8005d98:	2180      	movs	r1, #128	@ 0x80
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f001 fa26 	bl	80071ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005da0:	2100      	movs	r1, #0
 8005da2:	4620      	mov	r0, r4
 8005da4:	f001 fa22 	bl	80071ec <USBD_LL_StallEP>
}
 8005da8:	2000      	movs	r0, #0
 8005daa:	bd38      	pop	{r3, r4, r5, pc}

08005dac <USBD_StdEPReq>:
{
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	780b      	ldrb	r3, [r1, #0]
 8005db0:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005db2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005db6:	2b20      	cmp	r3, #32
  ep_addr  = LOBYTE(req->wIndex);
 8005db8:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dba:	d00c      	beq.n	8005dd6 <USBD_StdEPReq+0x2a>
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	d00a      	beq.n	8005dd6 <USBD_StdEPReq+0x2a>
 8005dc0:	b183      	cbz	r3, 8005de4 <USBD_StdEPReq+0x38>
  USBD_LL_StallEP(pdev, 0x80U);
 8005dc2:	2180      	movs	r1, #128	@ 0x80
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f001 fa11 	bl	80071ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005dca:	2100      	movs	r1, #0
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f001 fa0d 	bl	80071ec <USBD_LL_StallEP>
}
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8005dd6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005dda:	4620      	mov	r0, r4
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4798      	blx	r3
}
 8005de0:	2000      	movs	r0, #0
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8005de4:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005de6:	fa5f fc82 	uxtb.w	ip, r2
      switch (req->bRequest)
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d03e      	beq.n	8005e6c <USBD_StdEPReq+0xc0>
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d02b      	beq.n	8005e4a <USBD_StdEPReq+0x9e>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 8005df6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d051      	beq.n	8005ea2 <USBD_StdEPReq+0xf6>
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d1df      	bne.n	8005dc2 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e02:	f00c 030f 	and.w	r3, ip, #15
 8005e06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8005e0a:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8005e10:	d456      	bmi.n	8005ec0 <USBD_StdEPReq+0x114>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e12:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0d3      	beq.n	8005dc2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e1a:	f00c 037f 	and.w	r3, ip, #127	@ 0x7f
 8005e1e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8005e22:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005e26:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d054      	beq.n	8005ed8 <USBD_StdEPReq+0x12c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005e2e:	4661      	mov	r1, ip
 8005e30:	4620      	mov	r0, r4
 8005e32:	f001 f9f3 	bl	800721c <USBD_LL_IsStallEP>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d04e      	beq.n	8005ed8 <USBD_StdEPReq+0x12c>
 8005e3a:	2301      	movs	r3, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	4629      	mov	r1, r5
 8005e40:	4620      	mov	r0, r4
                pep->status = 0x0000U;
 8005e42:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e44:	f000 f88e 	bl	8005f64 <USBD_CtlSendData>
              break;
 8005e48:	e7c3      	b.n	8005dd2 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 8005e4a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d01c      	beq.n	8005e8c <USBD_StdEPReq+0xe0>
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d1b5      	bne.n	8005dc2 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e56:	884b      	ldrh	r3, [r1, #2]
 8005e58:	b9a3      	cbnz	r3, 8005e84 <USBD_StdEPReq+0xd8>
                if ((ep_addr != 0x00U) &&
 8005e5a:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005e5e:	d011      	beq.n	8005e84 <USBD_StdEPReq+0xd8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e60:	88cb      	ldrh	r3, [r1, #6]
 8005e62:	b97b      	cbnz	r3, 8005e84 <USBD_StdEPReq+0xd8>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e64:	4661      	mov	r1, ip
 8005e66:	f001 f9c1 	bl	80071ec <USBD_LL_StallEP>
 8005e6a:	e00b      	b.n	8005e84 <USBD_StdEPReq+0xd8>
          switch (pdev->dev_state)
 8005e6c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d00b      	beq.n	8005e8c <USBD_StdEPReq+0xe0>
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d1a4      	bne.n	8005dc2 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e78:	884b      	ldrh	r3, [r1, #2]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1a9      	bne.n	8005dd2 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e7e:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005e82:	d12b      	bne.n	8005edc <USBD_StdEPReq+0x130>
              USBD_CtlSendStatus(pdev);
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f89d 	bl	8005fc4 <USBD_CtlSendStatus>
              break;
 8005e8a:	e7a2      	b.n	8005dd2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e8c:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005e90:	d097      	beq.n	8005dc2 <USBD_StdEPReq+0x16>
                USBD_LL_StallEP(pdev, ep_addr);
 8005e92:	4661      	mov	r1, ip
 8005e94:	f001 f9aa 	bl	80071ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e98:	2180      	movs	r1, #128	@ 0x80
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f001 f9a6 	bl	80071ec <USBD_LL_StallEP>
 8005ea0:	e797      	b.n	8005dd2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ea2:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005ea6:	d18c      	bne.n	8005dc2 <USBD_StdEPReq+0x16>
              pep->status = 0x0000U;
 8005ea8:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005eaa:	0611      	lsls	r1, r2, #24
 8005eac:	bf4c      	ite	mi
 8005eae:	f100 0114 	addmi.w	r1, r0, #20
 8005eb2:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005eb6:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005eb8:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005eba:	f000 f853 	bl	8005f64 <USBD_CtlSendData>
              break;
 8005ebe:	e788      	b.n	8005dd2 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f43f af7d 	beq.w	8005dc2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ec8:	f00c 037f 	and.w	r3, ip, #127	@ 0x7f
 8005ecc:	1c5d      	adds	r5, r3, #1
 8005ece:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005ed2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005ed6:	e7a8      	b.n	8005e2a <USBD_StdEPReq+0x7e>
{
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e7af      	b.n	8005e3c <USBD_StdEPReq+0x90>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005edc:	4661      	mov	r1, ip
 8005ede:	f001 f991 	bl	8007204 <USBD_LL_ClearStallEP>
 8005ee2:	e7cf      	b.n	8005e84 <USBD_StdEPReq+0xd8>

08005ee4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005ee4:	780b      	ldrb	r3, [r1, #0]
 8005ee6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005ee8:	784b      	ldrb	r3, [r1, #1]
 8005eea:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005eec:	884b      	ldrh	r3, [r1, #2]
 8005eee:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ef0:	888b      	ldrh	r3, [r1, #4]
 8005ef2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005ef4:	88cb      	ldrh	r3, [r1, #6]
 8005ef6:	80c3      	strh	r3, [r0, #6]
}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop

08005efc <USBD_CtlError>:
{
 8005efc:	b510      	push	{r4, lr}
 8005efe:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005f00:	2180      	movs	r1, #128	@ 0x80
 8005f02:	f001 f973 	bl	80071ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005f06:	4620      	mov	r0, r4
}
 8005f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	f001 b96d 	b.w	80071ec <USBD_LL_StallEP>
 8005f12:	bf00      	nop

08005f14 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8005f14:	b308      	cbz	r0, 8005f5a <USBD_GetString+0x46>
{
 8005f16:	b570      	push	{r4, r5, r6, lr}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005f18:	7803      	ldrb	r3, [r0, #0]
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	460e      	mov	r6, r1
 8005f1e:	4614      	mov	r4, r2
 8005f20:	b1e3      	cbz	r3, 8005f5c <USBD_GetString+0x48>
 8005f22:	3001      	adds	r0, #1
 8005f24:	f7fa f914 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	8023      	strh	r3, [r4, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f34:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005f36:	7032      	strb	r2, [r6, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f38:	7073      	strb	r3, [r6, #1]
    while (*desc != '\0')
 8005f3a:	782c      	ldrb	r4, [r5, #0]
 8005f3c:	b164      	cbz	r4, 8005f58 <USBD_GetString+0x44>
 8005f3e:	4628      	mov	r0, r5
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f40:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8005f42:	2100      	movs	r1, #0
      unicode[idx++] = *desc++;
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	54f4      	strb	r4, [r6, r3]
      unicode[idx++] =  0U;
 8005f4a:	54b1      	strb	r1, [r6, r2]
    while (*desc != '\0')
 8005f4c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8005f50:	3302      	adds	r3, #2
 8005f52:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	d1f5      	bne.n	8005f44 <USBD_GetString+0x30>
}
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
 8005f5a:	4770      	bx	lr
  while (*buf != '\0')
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	4613      	mov	r3, r2
 8005f60:	e7e7      	b.n	8005f32 <USBD_GetString+0x1e>
 8005f62:	bf00      	nop

08005f64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005f64:	b510      	push	{r4, lr}
 8005f66:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f68:	2402      	movs	r4, #2
{
 8005f6a:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 8005f6c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f70:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f72:	f8c0 4294 	str.w	r4, [r0, #660]	@ 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f76:	f001 f971 	bl	800725c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	bf00      	nop

08005f80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005f80:	468c      	mov	ip, r1
 8005f82:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f84:	2100      	movs	r1, #0
{
 8005f86:	4613      	mov	r3, r2
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f88:	4662      	mov	r2, ip
 8005f8a:	f001 f967 	bl	800725c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f8e:	2000      	movs	r0, #0
 8005f90:	bd08      	pop	{r3, pc}
 8005f92:	bf00      	nop

08005f94 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005f94:	b510      	push	{r4, lr}
 8005f96:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005f98:	2403      	movs	r4, #3
{
 8005f9a:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8005f9c:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fa0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fa2:	f8c0 4294 	str.w	r4, [r0, #660]	@ 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fa6:	f001 f965 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005faa:	2000      	movs	r0, #0
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	bf00      	nop

08005fb0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005fb0:	468c      	mov	ip, r1
 8005fb2:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fb4:	2100      	movs	r1, #0
{
 8005fb6:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fb8:	4662      	mov	r2, ip
 8005fba:	f001 f95b 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	bd08      	pop	{r3, pc}
 8005fc2:	bf00      	nop

08005fc4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005fc4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fc6:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005fc8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fca:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f001 f943 	bl	800725c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	bd08      	pop	{r3, pc}
 8005fda:	bf00      	nop

08005fdc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005fdc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005fde:	2105      	movs	r1, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fe0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005fe2:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f001 f943 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005fee:	2000      	movs	r0, #0
 8005ff0:	bd08      	pop	{r3, pc}
 8005ff2:	bf00      	nop

08005ff4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ff4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005ff6:	f000 fae3 	bl	80065c0 <vTaskStartScheduler>
  
  return osOK;
}
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	bd08      	pop	{r3, pc}
 8005ffe:	bf00      	nop

08006000 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006000:	4684      	mov	ip, r0
 8006002:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006004:	6945      	ldr	r5, [r0, #20]
{
 8006006:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006008:	6840      	ldr	r0, [r0, #4]
 800600a:	f8dc 1000 	ldr.w	r1, [ip]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800600e:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8006012:	f9bc e008 	ldrsh.w	lr, [ip, #8]
{
 8006016:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006018:	b17d      	cbz	r5, 800603a <osThreadCreate+0x3a>
 800601a:	f8dc 6018 	ldr.w	r6, [ip, #24]
 800601e:	b166      	cbz	r6, 800603a <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 8006020:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006024:	bf0c      	ite	eq
 8006026:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8006028:	f10e 0403 	addne.w	r4, lr, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800602c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006030:	9400      	str	r4, [sp, #0]
 8006032:	f000 f985 	bl	8006340 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8006036:	b006      	add	sp, #24
 8006038:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800603a:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800603e:	bf0c      	ite	eq
 8006040:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8006042:	f10e 0403 	addne.w	r4, lr, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006046:	9400      	str	r4, [sp, #0]
 8006048:	ac05      	add	r4, sp, #20
 800604a:	b292      	uxth	r2, r2
 800604c:	9401      	str	r4, [sp, #4]
 800604e:	f000 fa1f 	bl	8006490 <xTaskCreate>
 8006052:	2801      	cmp	r0, #1
      return NULL;
 8006054:	bf14      	ite	ne
 8006056:	2000      	movne	r0, #0
  return handle;
 8006058:	9805      	ldreq	r0, [sp, #20]
}
 800605a:	b006      	add	sp, #24
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	bf00      	nop

08006060 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006060:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006062:	2801      	cmp	r0, #1
 8006064:	bf38      	it	cc
 8006066:	2001      	movcc	r0, #1
 8006068:	f000 fc98 	bl	800699c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800606c:	2000      	movs	r0, #0
 800606e:	bd08      	pop	{r3, pc}

08006070 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006070:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006074:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006076:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800607a:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800607e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006082:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop

08006088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop

08006090 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006090:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006092:	6803      	ldr	r3, [r0, #0]
{
 8006094:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006096:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8006098:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800609a:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800609e:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060a0:	6091      	str	r1, [r2, #8]
}
 80060a2:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060a4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80060a6:	6003      	str	r3, [r0, #0]
}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop

080060ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ac:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060ae:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060b0:	1c6b      	adds	r3, r5, #1
 80060b2:	d010      	beq.n	80060d6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b4:	f100 0308 	add.w	r3, r0, #8
 80060b8:	461c      	mov	r4, r3
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	42aa      	cmp	r2, r5
 80060c0:	d9fa      	bls.n	80060b8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80060c2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80060c4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80060c6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060c8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060ca:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80060cc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060ce:	6108      	str	r0, [r1, #16]
}
 80060d0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80060d2:	6002      	str	r2, [r0, #0]
}
 80060d4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80060d6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80060d8:	6863      	ldr	r3, [r4, #4]
 80060da:	e7f2      	b.n	80060c2 <vListInsert+0x16>

080060dc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80060dc:	6903      	ldr	r3, [r0, #16]
{
 80060de:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060e0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060e4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060e6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060e8:	6051      	str	r1, [r2, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80060ea:	2100      	movs	r1, #0
	if( pxList->pxIndex == pxItemToRemove )
 80060ec:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060ee:	bf08      	it	eq
 80060f0:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80060f2:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 80060f4:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80060f6:	3a01      	subs	r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060fa:	6818      	ldr	r0, [r3, #0]
}
 80060fc:	bc10      	pop	{r4}
 80060fe:	4770      	bx	lr

08006100 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006106:	f000 fd15 	bl	8006b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800610a:	4a35      	ldr	r2, [pc, #212]	@ (80061e0 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 800610c:	4d35      	ldr	r5, [pc, #212]	@ (80061e4 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d033      	beq.n	8006182 <prvAddNewTaskToReadyList+0x82>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800611a:	4f33      	ldr	r7, [pc, #204]	@ (80061e8 <prvAddNewTaskToReadyList+0xe8>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800611c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	b33b      	cbz	r3, 8006172 <prvAddNewTaskToReadyList+0x72>
 8006122:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80061ec <prvAddNewTaskToReadyList+0xec>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006126:	2301      	movs	r3, #1
		uxTaskNumber++;
 8006128:	4831      	ldr	r0, [pc, #196]	@ (80061f0 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 800612a:	4e32      	ldr	r6, [pc, #200]	@ (80061f4 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 800612c:	6801      	ldr	r1, [r0, #0]
 800612e:	4419      	add	r1, r3
 8006130:	6001      	str	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006132:	6831      	ldr	r1, [r6, #0]
 8006134:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8006138:	4093      	lsls	r3, r2
 800613a:	430b      	orrs	r3, r1
 800613c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006140:	1d21      	adds	r1, r4, #4
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f7ff ffa4 	bl	8006090 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006148:	f000 fd16 	bl	8006b78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	b173      	cbz	r3, 800616e <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006150:	682a      	ldr	r2, [r5, #0]
 8006152:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006154:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006156:	429a      	cmp	r2, r3
 8006158:	d209      	bcs.n	800616e <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800615a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800615e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006162:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80061ec <prvAddNewTaskToReadyList+0xec>
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	4293      	cmp	r3, r2
					pxCurrentTCB = pxNewTCB;
 800617c:	bf98      	it	ls
 800617e:	602c      	strls	r4, [r5, #0]
 8006180:	e7d1      	b.n	8006126 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8006182:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006184:	6813      	ldr	r3, [r2, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d004      	beq.n	8006194 <prvAddNewTaskToReadyList+0x94>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800618a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800618c:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 80061ec <prvAddNewTaskToReadyList+0xec>
 8006190:	4f15      	ldr	r7, [pc, #84]	@ (80061e8 <prvAddNewTaskToReadyList+0xe8>)
 8006192:	e7c8      	b.n	8006126 <prvAddNewTaskToReadyList+0x26>
 8006194:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 80061ec <prvAddNewTaskToReadyList+0xec>
 8006198:	4646      	mov	r6, r8
 800619a:	f108 078c 	add.w	r7, r8, #140	@ 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800619e:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a0:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061a2:	f7ff ff65 	bl	8006070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a6:	42be      	cmp	r6, r7
 80061a8:	d1f9      	bne.n	800619e <prvAddNewTaskToReadyList+0x9e>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061aa:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 80061f8 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80061ae:	4e13      	ldr	r6, [pc, #76]	@ (80061fc <prvAddNewTaskToReadyList+0xfc>)
	vListInitialise( &xDelayedTaskList1 );
 80061b0:	4648      	mov	r0, r9
 80061b2:	f7ff ff5d 	bl	8006070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061b6:	4630      	mov	r0, r6
 80061b8:	f7ff ff5a 	bl	8006070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061bc:	4810      	ldr	r0, [pc, #64]	@ (8006200 <prvAddNewTaskToReadyList+0x100>)
 80061be:	f7ff ff57 	bl	8006070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061c2:	4810      	ldr	r0, [pc, #64]	@ (8006204 <prvAddNewTaskToReadyList+0x104>)
 80061c4:	f7ff ff54 	bl	8006070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061c8:	480f      	ldr	r0, [pc, #60]	@ (8006208 <prvAddNewTaskToReadyList+0x108>)
 80061ca:	f7ff ff51 	bl	8006070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ce:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <prvAddNewTaskToReadyList+0x10c>)
 80061d0:	4f05      	ldr	r7, [pc, #20]	@ (80061e8 <prvAddNewTaskToReadyList+0xe8>)
 80061d2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006210 <prvAddNewTaskToReadyList+0x110>)
		prvAddTaskToReadyList( pxNewTCB );
 80061d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061da:	601e      	str	r6, [r3, #0]
}
 80061dc:	e7a3      	b.n	8006126 <prvAddNewTaskToReadyList+0x26>
 80061de:	bf00      	nop
 80061e0:	200007d4 	.word	0x200007d4
 80061e4:	200008d4 	.word	0x200008d4
 80061e8:	200007c8 	.word	0x200007c8
 80061ec:	20000848 	.word	0x20000848
 80061f0:	200007b8 	.word	0x200007b8
 80061f4:	200007cc 	.word	0x200007cc
 80061f8:	20000834 	.word	0x20000834
 80061fc:	20000820 	.word	0x20000820
 8006200:	20000804 	.word	0x20000804
 8006204:	200007f0 	.word	0x200007f0
 8006208:	200007d8 	.word	0x200007d8
 800620c:	2000081c 	.word	0x2000081c
 8006210:	20000818 	.word	0x20000818

08006214 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006216:	4b1b      	ldr	r3, [pc, #108]	@ (8006284 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006218:	4e1b      	ldr	r6, [pc, #108]	@ (8006288 <prvAddCurrentTaskToDelayedList+0x74>)
{
 800621a:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 800621c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800621e:	6830      	ldr	r0, [r6, #0]
{
 8006220:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006222:	3004      	adds	r0, #4
 8006224:	f7ff ff5a 	bl	80060dc <uxListRemove>
 8006228:	b940      	cbnz	r0, 800623c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800622a:	2201      	movs	r2, #1
 800622c:	6833      	ldr	r3, [r6, #0]
 800622e:	4917      	ldr	r1, [pc, #92]	@ (800628c <prvAddCurrentTaskToDelayedList+0x78>)
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	409a      	lsls	r2, r3
 8006234:	680b      	ldr	r3, [r1, #0]
 8006236:	ea23 0302 	bic.w	r3, r3, r2
 800623a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800623c:	1c6b      	adds	r3, r5, #1
 800623e:	d017      	beq.n	8006270 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	1964      	adds	r4, r4, r5
 8006244:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006246:	d307      	bcc.n	8006258 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006248:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <prvAddCurrentTaskToDelayedList+0x7c>)
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800624e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006252:	3104      	adds	r1, #4
 8006254:	f7ff bf2a 	b.w	80060ac <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006258:	4b0e      	ldr	r3, [pc, #56]	@ (8006294 <prvAddCurrentTaskToDelayedList+0x80>)
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	6831      	ldr	r1, [r6, #0]
 800625e:	3104      	adds	r1, #4
 8006260:	f7ff ff24 	bl	80060ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006264:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <prvAddCurrentTaskToDelayedList+0x84>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800626a:	bf88      	it	hi
 800626c:	601c      	strhi	r4, [r3, #0]
}
 800626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006270:	2f00      	cmp	r7, #0
 8006272:	d0e5      	beq.n	8006240 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006274:	6831      	ldr	r1, [r6, #0]
 8006276:	4809      	ldr	r0, [pc, #36]	@ (800629c <prvAddCurrentTaskToDelayedList+0x88>)
 8006278:	3104      	adds	r1, #4
}
 800627a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627e:	f7ff bf07 	b.w	8006090 <vListInsertEnd>
 8006282:	bf00      	nop
 8006284:	200007d0 	.word	0x200007d0
 8006288:	200008d4 	.word	0x200008d4
 800628c:	200007cc 	.word	0x200007cc
 8006290:	20000818 	.word	0x20000818
 8006294:	2000081c 	.word	0x2000081c
 8006298:	200007b4 	.word	0x200007b4
 800629c:	200007d8 	.word	0x200007d8

080062a0 <prvIdleTask>:
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	4d23      	ldr	r5, [pc, #140]	@ (8006330 <prvIdleTask+0x90>)
 80062a4:	4f23      	ldr	r7, [pc, #140]	@ (8006334 <prvIdleTask+0x94>)
 80062a6:	4e24      	ldr	r6, [pc, #144]	@ (8006338 <prvIdleTask+0x98>)
 80062a8:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 800633c <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b35b      	cbz	r3, 8006308 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 80062b0:	f000 fc40 	bl	8006b34 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b8:	1d20      	adds	r0, r4, #4
 80062ba:	f7ff ff0f 	bl	80060dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062be:	6833      	ldr	r3, [r6, #0]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 80062ca:	f000 fc55 	bl	8006b78 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062ce:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 80062d2:	f001 ff5b 	bl	800818c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062d6:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 80062da:	b163      	cbz	r3, 80062f6 <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d022      	beq.n	8006326 <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d0e3      	beq.n	80062ac <prvIdleTask+0xc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	e7fe      	b.n	80062f4 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 80062f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80062f8:	f000 fdc8 	bl	8006e8c <vPortFree>
				vPortFree( pxTCB );
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 fdc5 	bl	8006e8c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006302:	682b      	ldr	r3, [r5, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1d3      	bne.n	80062b0 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006308:	f8d8 3000 	ldr.w	r3, [r8]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d9cd      	bls.n	80062ac <prvIdleTask+0xc>
				taskYIELD();
 8006310:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006318:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	e7c2      	b.n	80062ac <prvIdleTask+0xc>
				vPortFree( pxTCB );
 8006326:	4620      	mov	r0, r4
 8006328:	f000 fdb0 	bl	8006e8c <vPortFree>
 800632c:	e7be      	b.n	80062ac <prvIdleTask+0xc>
 800632e:	bf00      	nop
 8006330:	200007ec 	.word	0x200007ec
 8006334:	200007f0 	.word	0x200007f0
 8006338:	200007d4 	.word	0x200007d4
 800633c:	20000848 	.word	0x20000848

08006340 <xTaskCreateStatic>:
	{
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	e9dd 640b 	ldrd	r6, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800634a:	b1c6      	cbz	r6, 800637e <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 800634c:	b174      	cbz	r4, 800636c <xTaskCreateStatic+0x2c>
 800634e:	4605      	mov	r5, r0
			volatile size_t xSize = sizeof( StaticTask_t );
 8006350:	20a0      	movs	r0, #160	@ 0xa0
 8006352:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006354:	9803      	ldr	r0, [sp, #12]
 8006356:	28a0      	cmp	r0, #160	@ 0xa0
 8006358:	d01a      	beq.n	8006390 <xTaskCreateStatic+0x50>
 800635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	e7fe      	b.n	800636a <xTaskCreateStatic+0x2a>
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800637c:	e7fe      	b.n	800637c <xTaskCreateStatic+0x3c>
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800638e:	e7fe      	b.n	800638e <xTaskCreateStatic+0x4e>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006390:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006394:	3a01      	subs	r2, #1
 8006396:	eb06 0282 	add.w	r2, r6, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800639a:	6326      	str	r6, [r4, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800639c:	f022 0607 	bic.w	r6, r2, #7
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063a0:	2202      	movs	r2, #2
 80063a2:	f884 209d 	strb.w	r2, [r4, #157]	@ 0x9d
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063a6:	780a      	ldrb	r2, [r1, #0]
 80063a8:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
		if( pcName[ x ] == 0x00 )
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	d036      	beq.n	800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063b0:	784a      	ldrb	r2, [r1, #1]
 80063b2:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
		if( pcName[ x ] == 0x00 )
 80063b6:	b392      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063b8:	788a      	ldrb	r2, [r1, #2]
 80063ba:	f884 2036 	strb.w	r2, [r4, #54]	@ 0x36
		if( pcName[ x ] == 0x00 )
 80063be:	b372      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063c0:	78ca      	ldrb	r2, [r1, #3]
 80063c2:	f884 2037 	strb.w	r2, [r4, #55]	@ 0x37
		if( pcName[ x ] == 0x00 )
 80063c6:	b352      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063c8:	790a      	ldrb	r2, [r1, #4]
 80063ca:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
		if( pcName[ x ] == 0x00 )
 80063ce:	b332      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063d0:	794a      	ldrb	r2, [r1, #5]
 80063d2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
		if( pcName[ x ] == 0x00 )
 80063d6:	b312      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063d8:	798a      	ldrb	r2, [r1, #6]
 80063da:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
		if( pcName[ x ] == 0x00 )
 80063de:	b1f2      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e0:	79ca      	ldrb	r2, [r1, #7]
 80063e2:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
		if( pcName[ x ] == 0x00 )
 80063e6:	b1d2      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e8:	7a0a      	ldrb	r2, [r1, #8]
 80063ea:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
		if( pcName[ x ] == 0x00 )
 80063ee:	b1b2      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063f0:	7a4a      	ldrb	r2, [r1, #9]
 80063f2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
		if( pcName[ x ] == 0x00 )
 80063f6:	b192      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063f8:	7a8a      	ldrb	r2, [r1, #10]
 80063fa:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
		if( pcName[ x ] == 0x00 )
 80063fe:	b172      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006400:	7aca      	ldrb	r2, [r1, #11]
 8006402:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
		if( pcName[ x ] == 0x00 )
 8006406:	b152      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006408:	7b0a      	ldrb	r2, [r1, #12]
 800640a:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
		if( pcName[ x ] == 0x00 )
 800640e:	b132      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006410:	7b4a      	ldrb	r2, [r1, #13]
 8006412:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
		if( pcName[ x ] == 0x00 )
 8006416:	b112      	cbz	r2, 800641e <xTaskCreateStatic+0xde>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006418:	7b8a      	ldrb	r2, [r1, #14]
 800641a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800641e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006420:	f04f 0800 	mov.w	r8, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006424:	2f06      	cmp	r7, #6
 8006426:	bf28      	it	cs
 8006428:	2706      	movcs	r7, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800642a:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800642c:	e9c4 7811 	strd	r7, r8, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8006430:	62e7      	str	r7, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006432:	f884 8043 	strb.w	r8, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	f7ff fe26 	bl	8006088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800643c:	f104 0018 	add.w	r0, r4, #24
 8006440:	f7ff fe22 	bl	8006088 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006444:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006446:	f1c7 0707 	rsb	r7, r7, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800644a:	4641      	mov	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644c:	61a7      	str	r7, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800644e:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006452:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006454:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006456:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006458:	f884 809c 	strb.w	r8, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800645c:	f001 fe8e 	bl	800817c <memset>
 8006460:	4f0a      	ldr	r7, [pc, #40]	@ (800648c <xTaskCreateStatic+0x14c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006462:	9b01      	ldr	r3, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006464:	6527      	str	r7, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006466:	461a      	mov	r2, r3
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006468:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800646c:	37d0      	adds	r7, #208	@ 0xd0
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800646e:	4629      	mov	r1, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006470:	6563      	str	r3, [r4, #84]	@ 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006472:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006474:	65a7      	str	r7, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006476:	f000 fb35 	bl	8006ae4 <pxPortInitialiseStack>
 800647a:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 800647c:	4620      	mov	r0, r4
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800647e:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8006480:	f7ff fe3e 	bl	8006100 <prvAddNewTaskToReadyList>
	}
 8006484:	4620      	mov	r0, r4
 8006486:	b004      	add	sp, #16
 8006488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800648c:	2000250c 	.word	0x2000250c

08006490 <xTaskCreate>:
	{
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006494:	ea4f 0982 	mov.w	r9, r2, lsl #2
	{
 8006498:	4607      	mov	r7, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649a:	4648      	mov	r0, r9
	{
 800649c:	460d      	mov	r5, r1
 800649e:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a0:	f000 fc42 	bl	8006d28 <pvPortMalloc>
			if( pxStack != NULL )
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f000 8085 	beq.w	80065b4 <xTaskCreate+0x124>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80064aa:	4606      	mov	r6, r0
 80064ac:	20a0      	movs	r0, #160	@ 0xa0
 80064ae:	f000 fc3b 	bl	8006d28 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80064b2:	4604      	mov	r4, r0
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d07a      	beq.n	80065ae <xTaskCreate+0x11e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064b8:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80064ba:	6306      	str	r6, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064bc:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064c0:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064c2:	f1a9 0904 	sub.w	r9, r9, #4
 80064c6:	444e      	add	r6, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064c8:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064cc:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
		if( pcName[ x ] == 0x00 )
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d036      	beq.n	8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064d4:	786b      	ldrb	r3, [r5, #1]
 80064d6:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
		if( pcName[ x ] == 0x00 )
 80064da:	b393      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064dc:	78ab      	ldrb	r3, [r5, #2]
 80064de:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
		if( pcName[ x ] == 0x00 )
 80064e2:	b373      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064e4:	78eb      	ldrb	r3, [r5, #3]
 80064e6:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
		if( pcName[ x ] == 0x00 )
 80064ea:	b353      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064ec:	792b      	ldrb	r3, [r5, #4]
 80064ee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
		if( pcName[ x ] == 0x00 )
 80064f2:	b333      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064f4:	796b      	ldrb	r3, [r5, #5]
 80064f6:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
		if( pcName[ x ] == 0x00 )
 80064fa:	b313      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064fc:	79ab      	ldrb	r3, [r5, #6]
 80064fe:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
		if( pcName[ x ] == 0x00 )
 8006502:	b1f3      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006504:	79eb      	ldrb	r3, [r5, #7]
 8006506:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
		if( pcName[ x ] == 0x00 )
 800650a:	b1d3      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800650c:	7a2b      	ldrb	r3, [r5, #8]
 800650e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
		if( pcName[ x ] == 0x00 )
 8006512:	b1b3      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006514:	7a6b      	ldrb	r3, [r5, #9]
 8006516:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
		if( pcName[ x ] == 0x00 )
 800651a:	b193      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800651c:	7aab      	ldrb	r3, [r5, #10]
 800651e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
		if( pcName[ x ] == 0x00 )
 8006522:	b173      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006524:	7aeb      	ldrb	r3, [r5, #11]
 8006526:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
		if( pcName[ x ] == 0x00 )
 800652a:	b153      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800652c:	7b2b      	ldrb	r3, [r5, #12]
 800652e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
		if( pcName[ x ] == 0x00 )
 8006532:	b133      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006534:	7b6b      	ldrb	r3, [r5, #13]
 8006536:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
		if( pcName[ x ] == 0x00 )
 800653a:	b113      	cbz	r3, 8006542 <xTaskCreate+0xb2>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800653c:	7bab      	ldrb	r3, [r5, #14]
 800653e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006542:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006544:	f04f 0900 	mov.w	r9, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006548:	2d06      	cmp	r5, #6
 800654a:	bf28      	it	cs
 800654c:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800654e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006550:	e9c4 5911 	strd	r5, r9, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8006554:	62e5      	str	r5, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006556:	f884 9043 	strb.w	r9, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800655a:	f7ff fd95 	bl	8006088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800655e:	f104 0018 	add.w	r0, r4, #24
 8006562:	f7ff fd91 	bl	8006088 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006566:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006568:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800656c:	4649      	mov	r1, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800656e:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8006570:	f8c4 9098 	str.w	r9, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006574:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006576:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006578:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800657a:	f884 909c 	strb.w	r9, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800657e:	f001 fdfd 	bl	800817c <memset>
 8006582:	4b0e      	ldr	r3, [pc, #56]	@ (80065bc <xTaskCreate+0x12c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006584:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006586:	6523      	str	r3, [r4, #80]	@ 0x50
 8006588:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 800658c:	33d0      	adds	r3, #208	@ 0xd0
 800658e:	65a3      	str	r3, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006590:	4639      	mov	r1, r7
 8006592:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006594:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006596:	f000 faa5 	bl	8006ae4 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 800659a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800659c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800659e:	b103      	cbz	r3, 80065a2 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065a0:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80065a2:	4620      	mov	r0, r4
 80065a4:	f7ff fdac 	bl	8006100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065a8:	2001      	movs	r0, #1
	}
 80065aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80065ae:	4630      	mov	r0, r6
 80065b0:	f000 fc6c 	bl	8006e8c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80065b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065bc:	2000250c 	.word	0x2000250c

080065c0 <vTaskStartScheduler>:
{
 80065c0:	b570      	push	{r4, r5, r6, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065c2:	2400      	movs	r4, #0
{
 80065c4:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065c6:	aa02      	add	r2, sp, #8
 80065c8:	4668      	mov	r0, sp
 80065ca:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065cc:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065d0:	f7fa fcd4 	bl	8000f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065d4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80065d8:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 80065da:	b1bb      	cbz	r3, 800660c <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 80065dc:	b16d      	cbz	r5, 80065fa <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80065de:	21a0      	movs	r1, #160	@ 0xa0
 80065e0:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065e2:	9903      	ldr	r1, [sp, #12]
 80065e4:	29a0      	cmp	r1, #160	@ 0xa0
 80065e6:	d01a      	beq.n	800661e <vTaskStartScheduler+0x5e>
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	e7fe      	b.n	80065f8 <vTaskStartScheduler+0x38>
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800660a:	e7fe      	b.n	800660a <vTaskStartScheduler+0x4a>
 800660c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800661c:	e7fe      	b.n	800661c <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800661e:	2102      	movs	r1, #2
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006620:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006624:	3a01      	subs	r2, #1
 8006626:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800662a:	632b      	str	r3, [r5, #48]	@ 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800662c:	4b26      	ldr	r3, [pc, #152]	@ (80066c8 <vTaskStartScheduler+0x108>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800662e:	f885 109d 	strb.w	r1, [r5, #157]	@ 0x9d
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006632:	636b      	str	r3, [r5, #52]	@ 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006634:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006636:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800663a:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800663e:	f885 4043 	strb.w	r4, [r5, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 8006642:	62ec      	str	r4, [r5, #44]	@ 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006644:	f022 0607 	bic.w	r6, r2, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006648:	f7ff fd1e 	bl	8006088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800664c:	f105 0018 	add.w	r0, r5, #24
 8006650:	f7ff fd1a 	bl	8006088 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006654:	2307      	movs	r3, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006656:	224c      	movs	r2, #76	@ 0x4c
 8006658:	4621      	mov	r1, r4
		pxNewTCB->ulNotifiedValue = 0;
 800665a:	f8c5 4098 	str.w	r4, [r5, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800665e:	18a8      	adds	r0, r5, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006660:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006662:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006664:	626d      	str	r5, [r5, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006666:	f885 409c 	strb.w	r4, [r5, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800666a:	f001 fd87 	bl	800817c <memset>
 800666e:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <vTaskStartScheduler+0x10c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006670:	4917      	ldr	r1, [pc, #92]	@ (80066d0 <vTaskStartScheduler+0x110>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006676:	652b      	str	r3, [r5, #80]	@ 0x50
 8006678:	33d0      	adds	r3, #208	@ 0xd0
 800667a:	656a      	str	r2, [r5, #84]	@ 0x54
 800667c:	65ab      	str	r3, [r5, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800667e:	4622      	mov	r2, r4
 8006680:	4630      	mov	r0, r6
 8006682:	f000 fa2f 	bl	8006ae4 <pxPortInitialiseStack>
 8006686:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 8006688:	4628      	mov	r0, r5
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800668a:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800668c:	f7ff fd38 	bl	8006100 <prvAddNewTaskToReadyList>
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80066a0:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 80066a4:	2101      	movs	r1, #1
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066a6:	4b0b      	ldr	r3, [pc, #44]	@ (80066d4 <vTaskStartScheduler+0x114>)
 80066a8:	4a0b      	ldr	r2, [pc, #44]	@ (80066d8 <vTaskStartScheduler+0x118>)
 80066aa:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80066ac:	480b      	ldr	r0, [pc, #44]	@ (80066dc <vTaskStartScheduler+0x11c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066ae:	334c      	adds	r3, #76	@ 0x4c
 80066b0:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 80066b2:	4a0b      	ldr	r2, [pc, #44]	@ (80066e0 <vTaskStartScheduler+0x120>)
		xTickCount = ( TickType_t ) 0U;
 80066b4:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <vTaskStartScheduler+0x124>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80066b6:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 80066b8:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80066ba:	601c      	str	r4, [r3, #0]
}
 80066bc:	b004      	add	sp, #16
 80066be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 80066c2:	f000 babb 	b.w	8006c3c <xPortStartScheduler>
 80066c6:	bf00      	nop
 80066c8:	454c4449 	.word	0x454c4449
 80066cc:	2000250c 	.word	0x2000250c
 80066d0:	080062a1 	.word	0x080062a1
 80066d4:	200008d4 	.word	0x200008d4
 80066d8:	20000168 	.word	0x20000168
 80066dc:	200007b4 	.word	0x200007b4
 80066e0:	200007c8 	.word	0x200007c8
 80066e4:	200007d0 	.word	0x200007d0

080066e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80066e8:	4a02      	ldr	r2, [pc, #8]	@ (80066f4 <vTaskSuspendAll+0xc>)
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	200007b0 	.word	0x200007b0

080066f8 <xTaskIncrementTick>:
{
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066fc:	4b50      	ldr	r3, [pc, #320]	@ (8006840 <xTaskIncrementTick+0x148>)
{
 80066fe:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d14b      	bne.n	800679e <xTaskIncrementTick+0xa6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006706:	4b4f      	ldr	r3, [pc, #316]	@ (8006844 <xTaskIncrementTick+0x14c>)
 8006708:	681e      	ldr	r6, [r3, #0]
 800670a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800670c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800670e:	2e00      	cmp	r6, #0
 8006710:	d053      	beq.n	80067ba <xTaskIncrementTick+0xc2>
 8006712:	4b4d      	ldr	r3, [pc, #308]	@ (8006848 <xTaskIncrementTick+0x150>)
 8006714:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	42b3      	cmp	r3, r6
 800671a:	d865      	bhi.n	80067e8 <xTaskIncrementTick+0xf0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800671c:	4f4b      	ldr	r7, [pc, #300]	@ (800684c <xTaskIncrementTick+0x154>)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681c      	ldr	r4, [r3, #0]
 8006722:	2c00      	cmp	r4, #0
 8006724:	d07a      	beq.n	800681c <xTaskIncrementTick+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 8006726:	2400      	movs	r4, #0
 8006728:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 8006850 <xTaskIncrementTick+0x158>
 800672c:	f8df a124 	ldr.w	sl, [pc, #292]	@ 8006854 <xTaskIncrementTick+0x15c>
					prvAddTaskToReadyList( pxTCB );
 8006730:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8006858 <xTaskIncrementTick+0x160>
 8006734:	e026      	b.n	8006784 <xTaskIncrementTick+0x8c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006736:	4628      	mov	r0, r5
 8006738:	f7ff fcd0 	bl	80060dc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800673c:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006740:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006744:	b10a      	cbz	r2, 800674a <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006746:	f7ff fcc9 	bl	80060dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800674a:	2301      	movs	r3, #1
 800674c:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8006750:	4629      	mov	r1, r5
 8006752:	f8d8 5000 	ldr.w	r5, [r8]
 8006756:	fa03 f200 	lsl.w	r2, r3, r0
 800675a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800675e:	432a      	orrs	r2, r5
 8006760:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8006764:	f8c8 2000 	str.w	r2, [r8]
 8006768:	f7ff fc92 	bl	8006090 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800676c:	f8da 3000 	ldr.w	r3, [sl]
 8006770:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006776:	429a      	cmp	r2, r3
 8006778:	bf28      	it	cs
 800677a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d04f      	beq.n	8006824 <xTaskIncrementTick+0x12c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800678c:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006790:	f10b 0504 	add.w	r5, fp, #4
					if( xConstTickCount < xItemValue )
 8006794:	4296      	cmp	r6, r2
 8006796:	d2ce      	bcs.n	8006736 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 8006798:	9b01      	ldr	r3, [sp, #4]
 800679a:	601a      	str	r2, [r3, #0]
						break;
 800679c:	e029      	b.n	80067f2 <xTaskIncrementTick+0xfa>
BaseType_t xSwitchRequired = pdFALSE;
 800679e:	2400      	movs	r4, #0
		++uxPendedTicks;
 80067a0:	4a2e      	ldr	r2, [pc, #184]	@ (800685c <xTaskIncrementTick+0x164>)
 80067a2:	6813      	ldr	r3, [r2, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80067a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006860 <xTaskIncrementTick+0x168>)
 80067aa:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80067ac:	2b00      	cmp	r3, #0
}
 80067ae:	bf0c      	ite	eq
 80067b0:	4620      	moveq	r0, r4
 80067b2:	2001      	movne	r0, #1
 80067b4:	b003      	add	sp, #12
 80067b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80067ba:	4b24      	ldr	r3, [pc, #144]	@ (800684c <xTaskIncrementTick+0x154>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	bb1a      	cbnz	r2, 800680a <xTaskIncrementTick+0x112>
 80067c2:	4a28      	ldr	r2, [pc, #160]	@ (8006864 <xTaskIncrementTick+0x16c>)
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	6811      	ldr	r1, [r2, #0]
 80067c8:	6019      	str	r1, [r3, #0]
 80067ca:	4927      	ldr	r1, [pc, #156]	@ (8006868 <xTaskIncrementTick+0x170>)
 80067cc:	6010      	str	r0, [r2, #0]
 80067ce:	680a      	ldr	r2, [r1, #0]
 80067d0:	3201      	adds	r2, #1
 80067d2:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	bb4a      	cbnz	r2, 800682e <xTaskIncrementTick+0x136>
		xNextTaskUnblockTime = portMAX_DELAY;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	4a1a      	ldr	r2, [pc, #104]	@ (8006848 <xTaskIncrementTick+0x150>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	9201      	str	r2, [sp, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	e796      	b.n	8006716 <xTaskIncrementTick+0x1e>
BaseType_t xSwitchRequired = pdFALSE;
 80067e8:	2400      	movs	r4, #0
 80067ea:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8006850 <xTaskIncrementTick+0x158>
 80067ee:	f8df a064 	ldr.w	sl, [pc, #100]	@ 8006854 <xTaskIncrementTick+0x15c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067f2:	f8da 3000 	ldr.w	r3, [sl]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	f859 3003 	ldr.w	r3, [r9, r3]
				xSwitchRequired = pdTRUE;
 8006802:	2b02      	cmp	r3, #2
 8006804:	bf28      	it	cs
 8006806:	2401      	movcs	r4, #1
 8006808:	e7ce      	b.n	80067a8 <xTaskIncrementTick+0xb0>
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
 800681a:	e7fe      	b.n	800681a <xTaskIncrementTick+0x122>
 800681c:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 8006850 <xTaskIncrementTick+0x158>
 8006820:	f8df a030 	ldr.w	sl, [pc, #48]	@ 8006854 <xTaskIncrementTick+0x15c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	9a01      	ldr	r2, [sp, #4]
 800682a:	6013      	str	r3, [r2, #0]
					break;
 800682c:	e7e1      	b.n	80067f2 <xTaskIncrementTick+0xfa>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800682e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006830:	4a05      	ldr	r2, [pc, #20]	@ (8006848 <xTaskIncrementTick+0x150>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006832:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006834:	9201      	str	r2, [sp, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	4613      	mov	r3, r2
}
 800683e:	e76a      	b.n	8006716 <xTaskIncrementTick+0x1e>
 8006840:	200007b0 	.word	0x200007b0
 8006844:	200007d0 	.word	0x200007d0
 8006848:	200007b4 	.word	0x200007b4
 800684c:	2000081c 	.word	0x2000081c
 8006850:	20000848 	.word	0x20000848
 8006854:	200008d4 	.word	0x200008d4
 8006858:	200007cc 	.word	0x200007cc
 800685c:	200007c4 	.word	0x200007c4
 8006860:	200007c0 	.word	0x200007c0
 8006864:	20000818 	.word	0x20000818
 8006868:	200007bc 	.word	0x200007bc

0800686c <xTaskResumeAll>:
{
 800686c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006870:	4c40      	ldr	r4, [pc, #256]	@ (8006974 <xTaskResumeAll+0x108>)
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	b943      	cbnz	r3, 8006888 <xTaskResumeAll+0x1c>
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	e7fe      	b.n	8006886 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006888:	f000 f954 	bl	8006b34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	3b01      	subs	r3, #1
 8006890:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d159      	bne.n	800694c <xTaskResumeAll+0xe0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006898:	4b37      	ldr	r3, [pc, #220]	@ (8006978 <xTaskResumeAll+0x10c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d055      	beq.n	800694c <xTaskResumeAll+0xe0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a0:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ 800697c <xTaskResumeAll+0x110>
 80068a4:	f8da 3000 	ldr.w	r3, [sl]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d05f      	beq.n	800696c <xTaskResumeAll+0x100>
					prvAddTaskToReadyList( pxTCB );
 80068ac:	2601      	movs	r6, #1
 80068ae:	4d34      	ldr	r5, [pc, #208]	@ (8006980 <xTaskResumeAll+0x114>)
 80068b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8006984 <xTaskResumeAll+0x118>
 80068b4:	4f34      	ldr	r7, [pc, #208]	@ (8006988 <xTaskResumeAll+0x11c>)
 80068b6:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 800698c <xTaskResumeAll+0x120>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80068ba:	f8da 300c 	ldr.w	r3, [sl, #12]
 80068be:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c0:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068c4:	f104 0018 	add.w	r0, r4, #24
 80068c8:	f7ff fc08 	bl	80060dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068cc:	4658      	mov	r0, fp
 80068ce:	f7ff fc05 	bl	80060dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068d2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80068d4:	682a      	ldr	r2, [r5, #0]
 80068d6:	fa06 f300 	lsl.w	r3, r6, r0
 80068da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068de:	4313      	orrs	r3, r2
 80068e0:	4659      	mov	r1, fp
 80068e2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7ff fbd2 	bl	8006090 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d330      	bcc.n	8006958 <xTaskResumeAll+0xec>
						xYieldPending = pdTRUE;
 80068f6:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068fa:	f8da 3000 	ldr.w	r3, [sl]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1db      	bne.n	80068ba <xTaskResumeAll+0x4e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006902:	4b23      	ldr	r3, [pc, #140]	@ (8006990 <xTaskResumeAll+0x124>)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	b35a      	cbz	r2, 8006962 <xTaskResumeAll+0xf6>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800690a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800690c:	4b21      	ldr	r3, [pc, #132]	@ (8006994 <xTaskResumeAll+0x128>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800690e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006910:	68d2      	ldr	r2, [r2, #12]
 8006912:	6852      	ldr	r2, [r2, #4]
 8006914:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006916:	4d20      	ldr	r5, [pc, #128]	@ (8006998 <xTaskResumeAll+0x12c>)
 8006918:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800691a:	b144      	cbz	r4, 800692e <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
 800691c:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 800691e:	f7ff feeb 	bl	80066f8 <xTaskIncrementTick>
 8006922:	b108      	cbz	r0, 8006928 <xTaskResumeAll+0xbc>
								xYieldPending = pdTRUE;
 8006924:	f8c9 6000 	str.w	r6, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006928:	3c01      	subs	r4, #1
 800692a:	d1f8      	bne.n	800691e <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 800692c:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800692e:	f8d9 3000 	ldr.w	r3, [r9]
 8006932:	b15b      	cbz	r3, 800694c <xTaskResumeAll+0xe0>
					taskYIELD_IF_USING_PREEMPTION();
 8006934:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800693c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006948:	2401      	movs	r4, #1
 800694a:	e000      	b.n	800694e <xTaskResumeAll+0xe2>
BaseType_t xAlreadyYielded = pdFALSE;
 800694c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800694e:	f000 f913 	bl	8006b78 <vPortExitCritical>
}
 8006952:	4620      	mov	r0, r4
 8006954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006958:	f8da 3000 	ldr.w	r3, [sl]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ac      	bne.n	80068ba <xTaskResumeAll+0x4e>
 8006960:	e7cf      	b.n	8006902 <xTaskResumeAll+0x96>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006962:	f04f 32ff 	mov.w	r2, #4294967295
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <xTaskResumeAll+0x128>)
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e7d4      	b.n	8006916 <xTaskResumeAll+0xaa>
 800696c:	f8df 901c 	ldr.w	r9, [pc, #28]	@ 800698c <xTaskResumeAll+0x120>
 8006970:	e7d1      	b.n	8006916 <xTaskResumeAll+0xaa>
 8006972:	bf00      	nop
 8006974:	200007b0 	.word	0x200007b0
 8006978:	200007d4 	.word	0x200007d4
 800697c:	20000804 	.word	0x20000804
 8006980:	200007cc 	.word	0x200007cc
 8006984:	20000848 	.word	0x20000848
 8006988:	200008d4 	.word	0x200008d4
 800698c:	200007c0 	.word	0x200007c0
 8006990:	2000081c 	.word	0x2000081c
 8006994:	200007b4 	.word	0x200007b4
 8006998:	200007c4 	.word	0x200007c4

0800699c <vTaskDelay>:
	{
 800699c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800699e:	b198      	cbz	r0, 80069c8 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 80069a0:	4b0f      	ldr	r3, [pc, #60]	@ (80069e0 <vTaskDelay+0x44>)
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	b141      	cbz	r1, 80069b8 <vTaskDelay+0x1c>
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	e7fe      	b.n	80069b6 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	3201      	adds	r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069be:	f7ff fc29 	bl	8006214 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80069c2:	f7ff ff53 	bl	800686c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80069c6:	b948      	cbnz	r0, 80069dc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80069c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80069cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	f3bf 8f6f 	isb	sy
	}
 80069dc:	bd08      	pop	{r3, pc}
 80069de:	bf00      	nop
 80069e0:	200007b0 	.word	0x200007b0

080069e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069e4:	4b19      	ldr	r3, [pc, #100]	@ (8006a4c <vTaskSwitchContext+0x68>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	b11b      	cbz	r3, 80069f2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80069ea:	2201      	movs	r2, #1
 80069ec:	4b18      	ldr	r3, [pc, #96]	@ (8006a50 <vTaskSwitchContext+0x6c>)
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80069f2:	4917      	ldr	r1, [pc, #92]	@ (8006a50 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80069f4:	4a17      	ldr	r2, [pc, #92]	@ (8006a54 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 80069f6:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80069f8:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80069fa:	fab3 f383 	clz	r3, r3
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f1c3 031f 	rsb	r3, r3, #31
 8006a04:	4914      	ldr	r1, [pc, #80]	@ (8006a58 <vTaskSwitchContext+0x74>)
 8006a06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a0a:	009a      	lsls	r2, r3, #2
 8006a0c:	5888      	ldr	r0, [r1, r2]
 8006a0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006a12:	b940      	cbnz	r0, 8006a26 <vTaskSwitchContext+0x42>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	e7fe      	b.n	8006a24 <vTaskSwitchContext+0x40>
 8006a26:	6858      	ldr	r0, [r3, #4]
 8006a28:	3208      	adds	r2, #8
 8006a2a:	6840      	ldr	r0, [r0, #4]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	4290      	cmp	r0, r2
 8006a30:	6058      	str	r0, [r3, #4]
 8006a32:	bf08      	it	eq
 8006a34:	6840      	ldreq	r0, [r0, #4]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a36:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <vTaskSwitchContext+0x78>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006a38:	68c1      	ldr	r1, [r0, #12]
 8006a3a:	bf08      	it	eq
 8006a3c:	6058      	streq	r0, [r3, #4]
 8006a3e:	4b08      	ldr	r3, [pc, #32]	@ (8006a60 <vTaskSwitchContext+0x7c>)
 8006a40:	6019      	str	r1, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	334c      	adds	r3, #76	@ 0x4c
 8006a46:	6013      	str	r3, [r2, #0]
}
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	200007b0 	.word	0x200007b0
 8006a50:	200007c0 	.word	0x200007c0
 8006a54:	200007cc 	.word	0x200007cc
 8006a58:	20000848 	.word	0x20000848
 8006a5c:	20000168 	.word	0x20000168
 8006a60:	200008d4 	.word	0x200008d4

08006a64 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006a64:	4b05      	ldr	r3, [pc, #20]	@ (8006a7c <xTaskGetSchedulerState+0x18>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	b133      	cbz	r3, 8006a78 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a6a:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <xTaskGetSchedulerState+0x1c>)
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	fab0 f080 	clz	r0, r0
 8006a72:	0940      	lsrs	r0, r0, #5
 8006a74:	0040      	lsls	r0, r0, #1
 8006a76:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a78:	2001      	movs	r0, #1
	}
 8006a7a:	4770      	bx	lr
 8006a7c:	200007c8 	.word	0x200007c8
 8006a80:	200007b0 	.word	0x200007b0

08006a84 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006a84:	4806      	ldr	r0, [pc, #24]	@ (8006aa0 <prvPortStartFirstTask+0x1c>)
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	6800      	ldr	r0, [r0, #0]
 8006a8a:	f380 8808 	msr	MSP, r0
 8006a8e:	b662      	cpsie	i
 8006a90:	b661      	cpsie	f
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	df00      	svc	0
 8006a9c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a9e:	0000      	.short	0x0000
 8006aa0:	e000ed08 	.word	0xe000ed08

08006aa4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8006aa4:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae0 <prvTaskExitError+0x3c>)
{
 8006aa8:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 8006aaa:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 8006aac:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006aae:	3301      	adds	r3, #1
 8006ab0:	d008      	beq.n	8006ac4 <prvTaskExitError+0x20>
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	e7fe      	b.n	8006ac2 <prvTaskExitError+0x1e>
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0fc      	beq.n	8006ad4 <prvTaskExitError+0x30>
}
 8006ada:	b002      	add	sp, #8
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	200000e0 	.word	0x200000e0

08006ae4 <pxPortInitialiseStack>:
{
 8006ae4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ae6:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006aea:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006aec:	f021 0101 	bic.w	r1, r1, #1
 8006af0:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006af4:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006af8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006afc:	bc10      	pop	{r4}
 8006afe:	3840      	subs	r0, #64	@ 0x40
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	08006aa5 	.word	0x08006aa5
	...

08006b10 <SVC_Handler>:
	__asm volatile (
 8006b10:	4b07      	ldr	r3, [pc, #28]	@ (8006b30 <pxCurrentTCBConst2>)
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6808      	ldr	r0, [r1, #0]
 8006b16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b1a:	f380 8809 	msr	PSP, r0
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b2e:	4770      	bx	lr

08006b30 <pxCurrentTCBConst2>:
 8006b30:	200008d4 	.word	0x200008d4

08006b34 <vPortEnterCritical>:
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b44:	4a0b      	ldr	r2, [pc, #44]	@ (8006b74 <vPortEnterCritical+0x40>)
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006b4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006b4e:	d000      	beq.n	8006b52 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006b50:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b56:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f7      	beq.n	8006b50 <vPortEnterCritical+0x1c>
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	e7fe      	b.n	8006b70 <vPortEnterCritical+0x3c>
 8006b72:	bf00      	nop
 8006b74:	200000e0 	.word	0x200000e0

08006b78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006b78:	4a08      	ldr	r2, [pc, #32]	@ (8006b9c <vPortExitCritical+0x24>)
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	b943      	cbnz	r3, 8006b90 <vPortExitCritical+0x18>
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	e7fe      	b.n	8006b8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006b90:	3b01      	subs	r3, #1
 8006b92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b94:	b90b      	cbnz	r3, 8006b9a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b96:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b9a:	4770      	bx	lr
 8006b9c:	200000e0 	.word	0x200000e0

08006ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ba0:	f3ef 8009 	mrs	r0, PSP
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <pxCurrentTCBConst>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bb0:	6010      	str	r0, [r2, #0]
 8006bb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006bb6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006bba:	f380 8811 	msr	BASEPRI, r0
 8006bbe:	f7ff ff11 	bl	80069e4 <vTaskSwitchContext>
 8006bc2:	f04f 0000 	mov.w	r0, #0
 8006bc6:	f380 8811 	msr	BASEPRI, r0
 8006bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	6808      	ldr	r0, [r1, #0]
 8006bd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bd6:	f380 8809 	msr	PSP, r0
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	4770      	bx	lr

08006be0 <pxCurrentTCBConst>:
 8006be0:	200008d4 	.word	0x200008d4

08006be4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006be4:	b508      	push	{r3, lr}
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bf6:	f7ff fd7f 	bl	80066f8 <xTaskIncrementTick>
 8006bfa:	b128      	cbz	r0, 8006c08 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bfc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c0e:	bd08      	pop	{r3, pc}

08006c10 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c10:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006c14:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c16:	2007      	movs	r0, #7
{
 8006c18:	b410      	push	{r4}
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c1a:	4c06      	ldr	r4, [pc, #24]	@ (8006c34 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c1c:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c1e:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	4905      	ldr	r1, [pc, #20]	@ (8006c38 <vPortSetupTimerInterrupt+0x28>)
}
 8006c24:	bc10      	pop	{r4}
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c26:	fba1 1303 	umull	r1, r3, r1, r3
 8006c2a:	099b      	lsrs	r3, r3, #6
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c30:	6110      	str	r0, [r2, #16]
}
 8006c32:	4770      	bx	lr
 8006c34:	20000000 	.word	0x20000000
 8006c38:	10624dd3 	.word	0x10624dd3

08006c3c <xPortStartScheduler>:
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
{
 8006c40:	b570      	push	{r4, r5, r6, lr}
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c42:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c44:	4b34      	ldr	r3, [pc, #208]	@ (8006d18 <xPortStartScheduler+0xdc>)
{
 8006c46:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c48:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c4a:	4934      	ldr	r1, [pc, #208]	@ (8006d1c <xPortStartScheduler+0xe0>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c50:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c54:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c56:	4832      	ldr	r0, [pc, #200]	@ (8006d20 <xPortStartScheduler+0xe4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c62:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c66:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c6a:	0612      	lsls	r2, r2, #24
 8006c6c:	bf48      	it	mi
 8006c6e:	2206      	movmi	r2, #6
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c70:	6004      	str	r4, [r0, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c72:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c74:	d50e      	bpl.n	8006c94 <xPortStartScheduler+0x58>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c88:	3a01      	subs	r2, #1
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	d4f3      	bmi.n	8006c76 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c8e:	2903      	cmp	r1, #3
 8006c90:	d009      	beq.n	8006ca6 <xPortStartScheduler+0x6a>
 8006c92:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	e7fe      	b.n	8006ca4 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ca6:	f44f 7640 	mov.w	r6, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006caa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8006cae:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cb0:	9a02      	ldr	r2, [sp, #8]
 8006cb2:	4919      	ldr	r1, [pc, #100]	@ (8006d18 <xPortStartScheduler+0xdc>)
 8006cb4:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cb6:	6006      	str	r6, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cb8:	700a      	strb	r2, [r1, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cba:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 8006cbe:	4d19      	ldr	r5, [pc, #100]	@ (8006d24 <xPortStartScheduler+0xe8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cc0:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8006cc4:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cc8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006ccc:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8006cd0:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006cd4:	f7ff ff9c 	bl	8006c10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006cd8:	602c      	str	r4, [r5, #0]
	prvPortStartFirstTask();
 8006cda:	f7ff fed3 	bl	8006a84 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006cde:	f7ff fe81 	bl	80069e4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8006ce2:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0UL;
 8006ce4:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	d008      	beq.n	8006cfc <xPortStartScheduler+0xc0>
 8006cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	e7fe      	b.n	8006cfa <xPortStartScheduler+0xbe>
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0fc      	beq.n	8006d0c <xPortStartScheduler+0xd0>
}
 8006d12:	2000      	movs	r0, #0
 8006d14:	b004      	add	sp, #16
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	e000e400 	.word	0xe000e400
 8006d1c:	200008dc 	.word	0x200008dc
 8006d20:	200008d8 	.word	0x200008d8
 8006d24:	200000e0 	.word	0x200000e0

08006d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8006d2e:	f7ff fcdb 	bl	80066e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d32:	4a4f      	ldr	r2, [pc, #316]	@ (8006e70 <pvPortMalloc+0x148>)
 8006d34:	6815      	ldr	r5, [r2, #0]
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	d036      	beq.n	8006da8 <pvPortMalloc+0x80>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e74 <pvPortMalloc+0x14c>)
 8006d3c:	681e      	ldr	r6, [r3, #0]
 8006d3e:	4234      	tst	r4, r6
 8006d40:	d12c      	bne.n	8006d9c <pvPortMalloc+0x74>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d42:	b35c      	cbz	r4, 8006d9c <pvPortMalloc+0x74>
			{
				xWantedSize += xHeapStructSize;
 8006d44:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d48:	0764      	lsls	r4, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d4a:	bf1c      	itt	ne
 8006d4c:	f020 0007 	bicne.w	r0, r0, #7
 8006d50:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d52:	b318      	cbz	r0, 8006d9c <pvPortMalloc+0x74>
 8006d54:	f8df e120 	ldr.w	lr, [pc, #288]	@ 8006e78 <pvPortMalloc+0x150>
 8006d58:	f8de c000 	ldr.w	ip, [lr]
 8006d5c:	4584      	cmp	ip, r0
 8006d5e:	d31d      	bcc.n	8006d9c <pvPortMalloc+0x74>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8006d60:	4b46      	ldr	r3, [pc, #280]	@ (8006e7c <pvPortMalloc+0x154>)
				pxPreviousBlock = &xStart;
 8006d62:	461c      	mov	r4, r3
				pxBlock = xStart.pxNextFreeBlock;
 8006d64:	681b      	ldr	r3, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d66:	e003      	b.n	8006d70 <pvPortMalloc+0x48>
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	b122      	cbz	r2, 8006d76 <pvPortMalloc+0x4e>
 8006d6c:	461c      	mov	r4, r3
 8006d6e:	4613      	mov	r3, r2
 8006d70:	6859      	ldr	r1, [r3, #4]
 8006d72:	4281      	cmp	r1, r0
 8006d74:	d3f8      	bcc.n	8006d68 <pvPortMalloc+0x40>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d76:	42ab      	cmp	r3, r5
 8006d78:	d010      	beq.n	8006d9c <pvPortMalloc+0x74>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d7e:	1a0a      	subs	r2, r1, r0
 8006d80:	2a10      	cmp	r2, #16
 8006d82:	d946      	bls.n	8006e12 <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d84:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d86:	0761      	lsls	r1, r4, #29
 8006d88:	d02c      	beq.n	8006de4 <pvPortMalloc+0xbc>
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	e7fe      	b.n	8006d9a <pvPortMalloc+0x72>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d9c:	f7ff fd66 	bl	800686c <xTaskResumeAll>
void *pvReturn = NULL;
 8006da0:	2400      	movs	r4, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8006da2:	4620      	mov	r0, r4
 8006da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8006da8:	2000      	movs	r0, #0
	uxAddress = ( size_t ) ucHeap;
 8006daa:	4b35      	ldr	r3, [pc, #212]	@ (8006e80 <pvPortMalloc+0x158>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dac:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006db0:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006db2:	bf1c      	itt	ne
 8006db4:	3307      	addne	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db6:	f023 0307 	bicne.w	r3, r3, #7
 8006dba:	4619      	mov	r1, r3
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dbc:	4d2f      	ldr	r5, [pc, #188]	@ (8006e7c <pvPortMalloc+0x154>)
}
 8006dbe:	463e      	mov	r6, r7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dc0:	602b      	str	r3, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dc2:	6068      	str	r0, [r5, #4]
	uxAddress -= xHeapStructSize;
 8006dc4:	4d2f      	ldr	r5, [pc, #188]	@ (8006e84 <pvPortMalloc+0x15c>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc6:	f025 0507 	bic.w	r5, r5, #7
	pxEnd = ( void * ) uxAddress;
 8006dca:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8006e88 <pvPortMalloc+0x160>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dce:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd2:	4a29      	ldr	r2, [pc, #164]	@ (8006e78 <pvPortMalloc+0x150>)
	pxEnd->pxNextFreeBlock = NULL;
 8006dd4:	e9c5 0000 	strd	r0, r0, [r5]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd8:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dda:	e9c1 5300 	strd	r5, r3, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dde:	4b25      	ldr	r3, [pc, #148]	@ (8006e74 <pvPortMalloc+0x14c>)
 8006de0:	601f      	str	r7, [r3, #0]
}
 8006de2:	e7ac      	b.n	8006d3e <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006de4:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006de6:	4a25      	ldr	r2, [pc, #148]	@ (8006e7c <pvPortMalloc+0x154>)
						pxBlock->xBlockSize = xWantedSize;
 8006de8:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dea:	4617      	mov	r7, r2
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	4294      	cmp	r4, r2
 8006df0:	d8fb      	bhi.n	8006dea <pvPortMalloc+0xc2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006df2:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006df4:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006df8:	eb07 0901 	add.w	r9, r7, r1
 8006dfc:	454c      	cmp	r4, r9
 8006dfe:	d024      	beq.n	8006e4a <pvPortMalloc+0x122>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e00:	eb04 0108 	add.w	r1, r4, r8
 8006e04:	428a      	cmp	r2, r1
 8006e06:	d02a      	beq.n	8006e5e <pvPortMalloc+0x136>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e08:	4601      	mov	r1, r0
 8006e0a:	6022      	str	r2, [r4, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e0c:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e0e:	bf18      	it	ne
 8006e10:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e12:	481d      	ldr	r0, [pc, #116]	@ (8006e88 <pvPortMalloc+0x160>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e14:	ebac 0201 	sub.w	r2, ip, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e18:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e1a:	f8ce 2000 	str.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e1e:	42a2      	cmp	r2, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e20:	bf38      	it	cc
 8006e22:	6002      	strcc	r2, [r0, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006e24:	2200      	movs	r2, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e26:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 8006e28:	e9c3 2100 	strd	r2, r1, [r3]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e2c:	f103 0408 	add.w	r4, r3, #8
	( void ) xTaskResumeAll();
 8006e30:	f7ff fd1c 	bl	800686c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e34:	0763      	lsls	r3, r4, #29
 8006e36:	d0b4      	beq.n	8006da2 <pvPortMalloc+0x7a>
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	e7fe      	b.n	8006e48 <pvPortMalloc+0x120>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e4a:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e4c:	eb07 0108 	add.w	r1, r7, r8
 8006e50:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e52:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e56:	d001      	beq.n	8006e5c <pvPortMalloc+0x134>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e58:	6859      	ldr	r1, [r3, #4]
 8006e5a:	e7da      	b.n	8006e12 <pvPortMalloc+0xea>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e5c:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e5e:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e60:	bf1f      	itttt	ne
 8006e62:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e64:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e66:	4441      	addne	r1, r8
 8006e68:	6061      	strne	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e6a:	6859      	ldr	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e6c:	6022      	str	r2, [r4, #0]
 8006e6e:	e7cd      	b.n	8006e0c <pvPortMalloc+0xe4>
 8006e70:	200008ec 	.word	0x200008ec
 8006e74:	200008e0 	.word	0x200008e0
 8006e78:	200008e8 	.word	0x200008e8
 8006e7c:	200008f0 	.word	0x200008f0
 8006e80:	200008f8 	.word	0x200008f8
 8006e84:	20001cf0 	.word	0x20001cf0
 8006e88:	200008e4 	.word	0x200008e4

08006e8c <vPortFree>:
	if( pv != NULL )
 8006e8c:	b1d0      	cbz	r0, 8006ec4 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f38 <vPortFree+0xac>)
 8006e90:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006e94:	6812      	ldr	r2, [r2, #0]
 8006e96:	4213      	tst	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e9a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006e9e:	b191      	cbz	r1, 8006ec6 <vPortFree+0x3a>
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	e7fe      	b.n	8006eb0 <vPortFree+0x24>
 8006eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ec2:	e7fe      	b.n	8006ec2 <vPortFree+0x36>
 8006ec4:	4770      	bx	lr
{
 8006ec6:	b570      	push	{r4, r5, r6, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ec8:	ea23 0302 	bic.w	r3, r3, r2
{
 8006ecc:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ece:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ed2:	4c1a      	ldr	r4, [pc, #104]	@ (8006f3c <vPortFree+0xb0>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ed4:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8006ed6:	f7ff fc07 	bl	80066e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006eda:	9801      	ldr	r0, [sp, #4]
 8006edc:	6822      	ldr	r2, [r4, #0]
 8006ede:	f850 5c04 	ldr.w	r5, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ee2:	4b17      	ldr	r3, [pc, #92]	@ (8006f40 <vPortFree+0xb4>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ee4:	1951      	adds	r1, r2, r5
 8006ee6:	6021      	str	r1, [r4, #0]
		puc -= xHeapStructSize;
 8006ee8:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006eec:	4619      	mov	r1, r3
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d8fb      	bhi.n	8006eec <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ef4:	684e      	ldr	r6, [r1, #4]
 8006ef6:	198c      	adds	r4, r1, r6
 8006ef8:	42a2      	cmp	r2, r4
 8006efa:	d00d      	beq.n	8006f18 <vPortFree+0x8c>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006efc:	eb02 0e05 	add.w	lr, r2, r5
 8006f00:	4573      	cmp	r3, lr
 8006f02:	d00f      	beq.n	8006f24 <vPortFree+0x98>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f04:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 8006f08:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f0a:	bf18      	it	ne
 8006f0c:	600a      	strne	r2, [r1, #0]
}
 8006f0e:	b002      	add	sp, #8
 8006f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				( void ) xTaskResumeAll();
 8006f14:	f7ff bcaa 	b.w	800686c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f18:	4435      	add	r5, r6
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1a:	194a      	adds	r2, r1, r5
 8006f1c:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f1e:	604d      	str	r5, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f20:	d1f5      	bne.n	8006f0e <vPortFree+0x82>
 8006f22:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f24:	4807      	ldr	r0, [pc, #28]	@ (8006f44 <vPortFree+0xb8>)
 8006f26:	6800      	ldr	r0, [r0, #0]
 8006f28:	4283      	cmp	r3, r0
 8006f2a:	d003      	beq.n	8006f34 <vPortFree+0xa8>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f2c:	e9d3 0400 	ldrd	r0, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f30:	1963      	adds	r3, r4, r5
 8006f32:	6053      	str	r3, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f34:	6010      	str	r0, [r2, #0]
 8006f36:	e7e7      	b.n	8006f08 <vPortFree+0x7c>
 8006f38:	200008e0 	.word	0x200008e0
 8006f3c:	200008e8 	.word	0x200008e8
 8006f40:	200008f0 	.word	0x200008f0
 8006f44:	200008ec 	.word	0x200008ec

08006f48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4917      	ldr	r1, [pc, #92]	@ (8006fac <MX_USB_DEVICE_Init+0x64>)
 8006f4e:	4818      	ldr	r0, [pc, #96]	@ (8006fb0 <MX_USB_DEVICE_Init+0x68>)
 8006f50:	f7fe fc36 	bl	80057c0 <USBD_Init>
 8006f54:	b970      	cbnz	r0, 8006f74 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006f56:	4917      	ldr	r1, [pc, #92]	@ (8006fb4 <MX_USB_DEVICE_Init+0x6c>)
 8006f58:	4815      	ldr	r0, [pc, #84]	@ (8006fb0 <MX_USB_DEVICE_Init+0x68>)
 8006f5a:	f7fe fc47 	bl	80057ec <USBD_RegisterClass>
 8006f5e:	b988      	cbnz	r0, 8006f84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006f60:	4915      	ldr	r1, [pc, #84]	@ (8006fb8 <MX_USB_DEVICE_Init+0x70>)
 8006f62:	4813      	ldr	r0, [pc, #76]	@ (8006fb0 <MX_USB_DEVICE_Init+0x68>)
 8006f64:	f7fe fc24 	bl	80057b0 <USBD_CUSTOM_HID_RegisterInterface>
 8006f68:	b9a0      	cbnz	r0, 8006f94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f6a:	4811      	ldr	r0, [pc, #68]	@ (8006fb0 <MX_USB_DEVICE_Init+0x68>)
 8006f6c:	f7fe fc46 	bl	80057fc <USBD_Start>
 8006f70:	b9b8      	cbnz	r0, 8006fa2 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f72:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006f74:	f7fa f94e 	bl	8001214 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006f78:	490e      	ldr	r1, [pc, #56]	@ (8006fb4 <MX_USB_DEVICE_Init+0x6c>)
 8006f7a:	480d      	ldr	r0, [pc, #52]	@ (8006fb0 <MX_USB_DEVICE_Init+0x68>)
 8006f7c:	f7fe fc36 	bl	80057ec <USBD_RegisterClass>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d0ed      	beq.n	8006f60 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006f84:	f7fa f946 	bl	8001214 <Error_Handler>
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006f88:	490b      	ldr	r1, [pc, #44]	@ (8006fb8 <MX_USB_DEVICE_Init+0x70>)
 8006f8a:	4809      	ldr	r0, [pc, #36]	@ (8006fb0 <MX_USB_DEVICE_Init+0x68>)
 8006f8c:	f7fe fc10 	bl	80057b0 <USBD_CUSTOM_HID_RegisterInterface>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d0ea      	beq.n	8006f6a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006f94:	f7fa f93e 	bl	8001214 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f98:	4805      	ldr	r0, [pc, #20]	@ (8006fb0 <MX_USB_DEVICE_Init+0x68>)
 8006f9a:	f7fe fc2f 	bl	80057fc <USBD_Start>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d0e7      	beq.n	8006f72 <MX_USB_DEVICE_Init+0x2a>
}
 8006fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006fa6:	f7fa b935 	b.w	8001214 <Error_Handler>
 8006faa:	bf00      	nop
 8006fac:	2000014c 	.word	0x2000014c
 8006fb0:	20001cf8 	.word	0x20001cf8
 8006fb4:	200000a8 	.word	0x200000a8
 8006fb8:	200000e4 	.word	0x200000e4

08006fbc <CUSTOM_HID_Init_FS>:
 */
static int8_t CUSTOM_HID_Init_FS(void) {
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
	/* USER CODE END 4 */
}
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	4770      	bx	lr

08006fc0 <CUSTOM_HID_OutEvent_FS>:
 */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state) {
	/* USER CODE BEGIN 6 */
	return (USBD_OK);
	/* USER CODE END 6 */
}
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	4770      	bx	lr

08006fc4 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void) {
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	4770      	bx	lr

08006fc8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fc8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006fca:	4801      	ldr	r0, [pc, #4]	@ (8006fd0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fcc:	800b      	strh	r3, [r1, #0]
}
 8006fce:	4770      	bx	lr
 8006fd0:	20000138 	.word	0x20000138

08006fd4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fd4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006fd6:	4801      	ldr	r0, [pc, #4]	@ (8006fdc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006fd8:	800b      	strh	r3, [r1, #0]
}
 8006fda:	4770      	bx	lr
 8006fdc:	20000134 	.word	0x20000134

08006fe0 <USBD_FS_SerialStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fe0:	231a      	movs	r3, #26
  Get_SerialNum();
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
}
 8006fe2:	4801      	ldr	r0, [pc, #4]	@ (8006fe8 <USBD_FS_SerialStrDescriptor+0x8>)
  *length = USB_SIZ_STRING_SERIAL;
 8006fe4:	800b      	strh	r3, [r1, #0]
}
 8006fe6:	4770      	bx	lr
 8006fe8:	20000118 	.word	0x20000118

08006fec <USBD_FS_ManufacturerStrDescriptor>:
{
 8006fec:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fee:	4c04      	ldr	r4, [pc, #16]	@ (8007000 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006ff0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff2:	4804      	ldr	r0, [pc, #16]	@ (8007004 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	f7fe ff8d 	bl	8005f14 <USBD_GetString>
}
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	bf00      	nop
 8007000:	20001fbc 	.word	0x20001fbc
 8007004:	08008444 	.word	0x08008444

08007008 <USBD_FS_ProductStrDescriptor>:
{
 8007008:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700a:	4c04      	ldr	r4, [pc, #16]	@ (800701c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800700c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700e:	4804      	ldr	r0, [pc, #16]	@ (8007020 <USBD_FS_ProductStrDescriptor+0x18>)
 8007010:	4621      	mov	r1, r4
 8007012:	f7fe ff7f 	bl	8005f14 <USBD_GetString>
}
 8007016:	4620      	mov	r0, r4
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	20001fbc 	.word	0x20001fbc
 8007020:	08008450 	.word	0x08008450

08007024 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007026:	4c04      	ldr	r4, [pc, #16]	@ (8007038 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8007028:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800702a:	4804      	ldr	r0, [pc, #16]	@ (800703c <USBD_FS_ConfigStrDescriptor+0x18>)
 800702c:	4621      	mov	r1, r4
 800702e:	f7fe ff71 	bl	8005f14 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007032:	4620      	mov	r0, r4
 8007034:	bd10      	pop	{r4, pc}
 8007036:	bf00      	nop
 8007038:	20001fbc 	.word	0x20001fbc
 800703c:	08008460 	.word	0x08008460

08007040 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007040:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007042:	4c04      	ldr	r4, [pc, #16]	@ (8007054 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8007044:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007046:	4804      	ldr	r0, [pc, #16]	@ (8007058 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007048:	4621      	mov	r1, r4
 800704a:	f7fe ff63 	bl	8005f14 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800704e:	4620      	mov	r0, r4
 8007050:	bd10      	pop	{r4, pc}
 8007052:	bf00      	nop
 8007054:	20001fbc 	.word	0x20001fbc
 8007058:	08008474 	.word	0x08008474

0800705c <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800705c:	4b0e      	ldr	r3, [pc, #56]	@ (8007098 <HAL_PCD_MspInit+0x3c>)
 800705e:	6802      	ldr	r2, [r0, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d000      	beq.n	8007066 <HAL_PCD_MspInit+0xa>
 8007064:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007066:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800706a:	69d9      	ldr	r1, [r3, #28]
{
 800706c:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800706e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8007072:	61d9      	str	r1, [r3, #28]
 8007074:	69db      	ldr	r3, [r3, #28]
{
 8007076:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8007078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800707c:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800707e:	2014      	movs	r0, #20
 8007080:	2200      	movs	r2, #0
 8007082:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 8007084:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8007086:	f7fa fe65 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800708a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800708c:	b003      	add	sp, #12
 800708e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007092:	f7fa be9b 	b.w	8001dcc <HAL_NVIC_EnableIRQ>
 8007096:	bf00      	nop
 8007098:	40005c00 	.word	0x40005c00

0800709c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800709c:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800709e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 80070a2:	f501 712c 	add.w	r1, r1, #688	@ 0x2b0
 80070a6:	f7fe bbc5 	b.w	8005834 <USBD_LL_SetupStage>
 80070aa:	bf00      	nop

080070ac <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070ac:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80070b0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80070b4:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 80070b8:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 80070bc:	f7fe bbea 	b.w	8005894 <USBD_LL_DataOutStage>

080070c0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070c0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80070c4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80070c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070ca:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 80070ce:	f7fe bc1b 	b.w	8005908 <USBD_LL_DataInStage>
 80070d2:	bf00      	nop

080070d4 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070d4:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 80070d8:	f7fe bcb6 	b.w	8005a48 <USBD_LL_SOF>

080070dc <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070dc:	6883      	ldr	r3, [r0, #8]
{
 80070de:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070e0:	2b02      	cmp	r3, #2
{
 80070e2:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070e4:	d001      	beq.n	80070ea <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80070e6:	f7fa f895 	bl	8001214 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070ea:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 80070ee:	2101      	movs	r1, #1
 80070f0:	f7fe fc92 	bl	8005a18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070f4:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
}
 80070f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070fc:	f7fe bc64 	b.w	80059c8 <USBD_LL_Reset>

08007100 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007100:	b510      	push	{r4, lr}
 8007102:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007104:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8007108:	f7fe fc8a 	bl	8005a20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800710c:	69a3      	ldr	r3, [r4, #24]
 800710e:	b123      	cbz	r3, 800711a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007110:	4a02      	ldr	r2, [pc, #8]	@ (800711c <HAL_PCD_SuspendCallback+0x1c>)
 8007112:	6913      	ldr	r3, [r2, #16]
 8007114:	f043 0306 	orr.w	r3, r3, #6
 8007118:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800711a:	bd10      	pop	{r4, pc}
 800711c:	e000ed00 	.word	0xe000ed00

08007120 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007120:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8007124:	f7fe bc86 	b.w	8005a34 <USBD_LL_Resume>

08007128 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007128:	2208      	movs	r2, #8
{
 800712a:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800712c:	2400      	movs	r4, #0
 800712e:	2500      	movs	r5, #0
  hpcd_USB_FS.pData = pdev;
 8007130:	4b19      	ldr	r3, [pc, #100]	@ (8007198 <USBD_LL_Init+0x70>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007132:	2102      	movs	r1, #2
 8007134:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007136:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007138:	e9c3 4506 	strd	r4, r5, [r3, #24]
{
 800713c:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800713e:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 8007140:	4a16      	ldr	r2, [pc, #88]	@ (800719c <USBD_LL_Init+0x74>)
  hpcd_USB_FS.pData = pdev;
 8007142:	f8c3 42ec 	str.w	r4, [r3, #748]	@ 0x2ec
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007146:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 8007148:	f8c4 32c0 	str.w	r3, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800714c:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Instance = USB;
 800714e:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007150:	f7fb f810 	bl	8002174 <HAL_PCD_Init>
 8007154:	b9e8      	cbnz	r0, 8007192 <USBD_LL_Init+0x6a>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007156:	2200      	movs	r2, #0
 8007158:	2318      	movs	r3, #24
 800715a:	4611      	mov	r1, r2
 800715c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8007160:	f7fb ff6a 	bl	8003038 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007164:	2358      	movs	r3, #88	@ 0x58
 8007166:	2200      	movs	r2, #0
 8007168:	2180      	movs	r1, #128	@ 0x80
 800716a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800716e:	f7fb ff63 	bl	8003038 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007172:	2398      	movs	r3, #152	@ 0x98
 8007174:	2200      	movs	r2, #0
 8007176:	2181      	movs	r1, #129	@ 0x81
 8007178:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800717c:	f7fb ff5c 	bl	8003038 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8007180:	23d8      	movs	r3, #216	@ 0xd8
 8007182:	2200      	movs	r2, #0
 8007184:	2101      	movs	r1, #1
 8007186:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800718a:	f7fb ff55 	bl	8003038 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
}
 800718e:	2000      	movs	r0, #0
 8007190:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8007192:	f7fa f83f 	bl	8001214 <Error_Handler>
 8007196:	e7de      	b.n	8007156 <USBD_LL_Init+0x2e>
 8007198:	20002218 	.word	0x20002218
 800719c:	40005c00 	.word	0x40005c00

080071a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80071a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80071a6:	f7fb f85d 	bl	8002264 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80071aa:	b118      	cbz	r0, 80071b4 <USBD_LL_Start+0x14>
 80071ac:	2802      	cmp	r0, #2
 80071ae:	bf0c      	ite	eq
 80071b0:	2001      	moveq	r0, #1
 80071b2:	2002      	movne	r0, #2
}
 80071b4:	bd08      	pop	{r3, pc}
 80071b6:	bf00      	nop

080071b8 <USBD_LL_OpenEP>:
{
 80071b8:	4694      	mov	ip, r2
 80071ba:	b508      	push	{r3, lr}
 80071bc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80071c2:	4663      	mov	r3, ip
 80071c4:	f7fb fe24 	bl	8002e10 <HAL_PCD_EP_Open>
  switch (hal_status)
 80071c8:	b118      	cbz	r0, 80071d2 <USBD_LL_OpenEP+0x1a>
 80071ca:	2802      	cmp	r0, #2
 80071cc:	bf0c      	ite	eq
 80071ce:	2001      	moveq	r0, #1
 80071d0:	2002      	movne	r0, #2
}
 80071d2:	bd08      	pop	{r3, pc}

080071d4 <USBD_LL_CloseEP>:
{
 80071d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80071da:	f7fb fe4d 	bl	8002e78 <HAL_PCD_EP_Close>
  switch (hal_status)
 80071de:	b118      	cbz	r0, 80071e8 <USBD_LL_CloseEP+0x14>
 80071e0:	2802      	cmp	r0, #2
 80071e2:	bf0c      	ite	eq
 80071e4:	2001      	moveq	r0, #1
 80071e6:	2002      	movne	r0, #2
}
 80071e8:	bd08      	pop	{r3, pc}
 80071ea:	bf00      	nop

080071ec <USBD_LL_StallEP>:
{
 80071ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80071f2:	f7fb feab 	bl	8002f4c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80071f6:	b118      	cbz	r0, 8007200 <USBD_LL_StallEP+0x14>
 80071f8:	2802      	cmp	r0, #2
 80071fa:	bf0c      	ite	eq
 80071fc:	2001      	moveq	r0, #1
 80071fe:	2002      	movne	r0, #2
}
 8007200:	bd08      	pop	{r3, pc}
 8007202:	bf00      	nop

08007204 <USBD_LL_ClearStallEP>:
{
 8007204:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007206:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800720a:	f7fb fedd 	bl	8002fc8 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800720e:	b118      	cbz	r0, 8007218 <USBD_LL_ClearStallEP+0x14>
 8007210:	2802      	cmp	r0, #2
 8007212:	bf0c      	ite	eq
 8007214:	2001      	moveq	r0, #1
 8007216:	2002      	movne	r0, #2
}
 8007218:	bd08      	pop	{r3, pc}
 800721a:	bf00      	nop

0800721c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800721c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800721e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8007222:	d406      	bmi.n	8007232 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007224:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007228:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800722c:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
}
 8007230:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007232:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8007236:	3101      	adds	r1, #1
 8007238:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800723c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007240:	7898      	ldrb	r0, [r3, #2]
 8007242:	4770      	bx	lr

08007244 <USBD_LL_SetUSBAddress>:
{
 8007244:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007246:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800724a:	f7fb fdcb 	bl	8002de4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800724e:	b118      	cbz	r0, 8007258 <USBD_LL_SetUSBAddress+0x14>
 8007250:	2802      	cmp	r0, #2
 8007252:	bf0c      	ite	eq
 8007254:	2001      	moveq	r0, #1
 8007256:	2002      	movne	r0, #2
}
 8007258:	bd08      	pop	{r3, pc}
 800725a:	bf00      	nop

0800725c <USBD_LL_Transmit>:
{
 800725c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800725e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007262:	f7fb fe4f 	bl	8002f04 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8007266:	b118      	cbz	r0, 8007270 <USBD_LL_Transmit+0x14>
 8007268:	2802      	cmp	r0, #2
 800726a:	bf0c      	ite	eq
 800726c:	2001      	moveq	r0, #1
 800726e:	2002      	movne	r0, #2
}
 8007270:	bd08      	pop	{r3, pc}
 8007272:	bf00      	nop

08007274 <USBD_LL_PrepareReceive>:
{
 8007274:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007276:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800727a:	f7fb fe2b 	bl	8002ed4 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800727e:	b118      	cbz	r0, 8007288 <USBD_LL_PrepareReceive+0x14>
 8007280:	2802      	cmp	r0, #2
 8007282:	bf0c      	ite	eq
 8007284:	2001      	moveq	r0, #1
 8007286:	2002      	movne	r0, #2
}
 8007288:	bd08      	pop	{r3, pc}
 800728a:	bf00      	nop

0800728c <USBD_static_malloc>:
}
 800728c:	4800      	ldr	r0, [pc, #0]	@ (8007290 <USBD_static_malloc+0x4>)
 800728e:	4770      	bx	lr
 8007290:	200021bc 	.word	0x200021bc

08007294 <USBD_static_free>:
}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <HAL_PCDEx_SetConnectionState>:
}
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop

0800729c <verify_CRC8_check_sum>:
  */

uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
    unsigned char ucExpected = 0;
    if ((pch_message == 0) || (dw_length <= 2))
 800729c:	b198      	cbz	r0, 80072c6 <verify_CRC8_check_sum+0x2a>
 800729e:	2902      	cmp	r1, #2
 80072a0:	d912      	bls.n	80072c8 <verify_CRC8_check_sum+0x2c>
    {
        return 0;
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 80072a2:	23ff      	movs	r3, #255	@ 0xff
{
 80072a4:	b410      	push	{r4}
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 80072a6:	3901      	subs	r1, #1
 80072a8:	4c08      	ldr	r4, [pc, #32]	@ (80072cc <verify_CRC8_check_sum+0x30>)
 80072aa:	1842      	adds	r2, r0, r1
        uc_index = ucCRC8^(*pch_message++);
 80072ac:	f810 1b01 	ldrb.w	r1, [r0], #1
        ucCRC8 = CRC8_table[uc_index];
 80072b0:	404b      	eors	r3, r1
    while (dw_length--)
 80072b2:	4290      	cmp	r0, r2
        ucCRC8 = CRC8_table[uc_index];
 80072b4:	5ce3      	ldrb	r3, [r4, r3]
    while (dw_length--)
 80072b6:	d1f9      	bne.n	80072ac <verify_CRC8_check_sum+0x10>
    return ( ucExpected == pch_message[dw_length - 1] );
 80072b8:	7800      	ldrb	r0, [r0, #0]
}
 80072ba:	bc10      	pop	{r4}
    return ( ucExpected == pch_message[dw_length - 1] );
 80072bc:	1ac0      	subs	r0, r0, r3
 80072be:	fab0 f080 	clz	r0, r0
 80072c2:	0940      	lsrs	r0, r0, #5
}
 80072c4:	4770      	bx	lr
 80072c6:	4770      	bx	lr
        return 0;
 80072c8:	2000      	movs	r0, #0
 80072ca:	4770      	bx	lr
 80072cc:	0800848c 	.word	0x0800848c

080072d0 <Update_Encoder>:
extern volatile int32_t set_speed;
extern volatile int32_t set_Pos;
extern volatile uint8_t start_PID;
void Update_Encoder(PID_typedef *pid)
{
    pid->curr_En = TIM2->CNT;
 80072d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80072d4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 80072d6:	b5d0      	push	{r4, r6, r7, lr}
    pid->curr_En = TIM2->CNT;
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8103      	strh	r3, [r0, #8]

    if(pid->curr_En == pid->prev_En)
 80072dc:	8902      	ldrh	r2, [r0, #8]
 80072de:	8943      	ldrh	r3, [r0, #10]
 80072e0:	b292      	uxth	r2, r2
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	429a      	cmp	r2, r3
{
 80072e6:	4604      	mov	r4, r0
    if(pid->curr_En == pid->prev_En)
 80072e8:	d03c      	beq.n	8007364 <Update_Encoder+0x94>
    {
        pid->delta_EnC = 0;
    }
    else if(pid->curr_En > pid->prev_En)
 80072ea:	8902      	ldrh	r2, [r0, #8]
 80072ec:	8943      	ldrh	r3, [r0, #10]
 80072ee:	b292      	uxth	r2, r2
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	429a      	cmp	r2, r3
    {
        if(TIM2->CR1 & TIM_CR1_DIR)/*__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)*/
 80072f4:	680b      	ldr	r3, [r1, #0]
    else if(pid->curr_En > pid->prev_En)
 80072f6:	d929      	bls.n	800734c <Update_Encoder+0x7c>
        if(TIM2->CR1 & TIM_CR1_DIR)/*__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)*/
 80072f8:	f013 0f10 	tst.w	r3, #16
        {
            pid->delta_EnC = -(int16_t)(pid->prev_En + (TIM2->ARR - pid->curr_En));
 80072fc:	8903      	ldrh	r3, [r0, #8]
        if(TIM2->CR1 & TIM_CR1_DIR)/*__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)*/
 80072fe:	d134      	bne.n	800736a <Update_Encoder+0x9a>
    }
    else
    {
        if(TIM2->CR1 & TIM_CR1_DIR)
        {
            pid->delta_EnC = (int16_t)(pid->curr_En - pid->prev_En);
 8007300:	8962      	ldrh	r2, [r4, #10]
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	b21b      	sxth	r3, r3
 8007306:	80e3      	strh	r3, [r4, #6]
        else
        {
            pid->delta_EnC = (int16_t)(pid->curr_En + (TIM2->ARR - pid->prev_En));
        }
    }
    pid->EnC_now += ((int32_t)(pid->delta_EnC));
 8007308:	88e3      	ldrh	r3, [r4, #6]
 800730a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800730c:	b21b      	sxth	r3, r3
 800730e:	4413      	add	r3, r2
 8007310:	63e3      	str	r3, [r4, #60]	@ 0x3c
    pid->Speed = ((float)pid->delta_EnC)/(pid->PPR * 4 * pid->Delta_T);
 8007312:	88e0      	ldrh	r0, [r4, #6]
 8007314:	b200      	sxth	r0, r0
 8007316:	f7f9 fd0f 	bl	8000d38 <__aeabi_i2f>
 800731a:	f7f9 f939 	bl	8000590 <__aeabi_f2d>
 800731e:	4606      	mov	r6, r0
 8007320:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
 8007324:	460f      	mov	r7, r1
 8007326:	0080      	lsls	r0, r0, #2
 8007328:	f7f9 f920 	bl	800056c <__aeabi_i2d>
 800732c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8007330:	f7f9 f986 	bl	8000640 <__aeabi_dmul>
 8007334:	460b      	mov	r3, r1
 8007336:	4602      	mov	r2, r0
 8007338:	4639      	mov	r1, r7
 800733a:	4630      	mov	r0, r6
 800733c:	f7f9 faaa 	bl	8000894 <__aeabi_ddiv>
 8007340:	e9c4 0106 	strd	r0, r1, [r4, #24]
    pid->prev_En = pid->curr_En;
 8007344:	8923      	ldrh	r3, [r4, #8]
 8007346:	b29b      	uxth	r3, r3
 8007348:	8163      	strh	r3, [r4, #10]
}
 800734a:	bdd0      	pop	{r4, r6, r7, pc}
        if(TIM2->CR1 & TIM_CR1_DIR)
 800734c:	f013 0f10 	tst.w	r3, #16
            pid->delta_EnC = (int16_t)(pid->curr_En - pid->prev_En);
 8007350:	8903      	ldrh	r3, [r0, #8]
        if(TIM2->CR1 & TIM_CR1_DIR)
 8007352:	d1d5      	bne.n	8007300 <Update_Encoder+0x30>
            pid->delta_EnC = (int16_t)(pid->curr_En + (TIM2->ARR - pid->prev_En));
 8007354:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8007356:	b29b      	uxth	r3, r3
 8007358:	8942      	ldrh	r2, [r0, #10]
 800735a:	440b      	add	r3, r1
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	b21b      	sxth	r3, r3
 8007360:	80c3      	strh	r3, [r0, #6]
 8007362:	e7d1      	b.n	8007308 <Update_Encoder+0x38>
        pid->delta_EnC = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	80c3      	strh	r3, [r0, #6]
 8007368:	e7ce      	b.n	8007308 <Update_Encoder+0x38>
            pid->delta_EnC = -(int16_t)(pid->prev_En + (TIM2->ARR - pid->curr_En));
 800736a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800736c:	b29b      	uxth	r3, r3
 800736e:	8942      	ldrh	r2, [r0, #10]
 8007370:	1a5b      	subs	r3, r3, r1
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	b21b      	sxth	r3, r3
 8007376:	80c3      	strh	r3, [r0, #6]
 8007378:	e7c6      	b.n	8007308 <Update_Encoder+0x38>
 800737a:	bf00      	nop

0800737c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if(htim->Instance == TIM4)
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800737e:	6802      	ldr	r2, [r0, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d000      	beq.n	8007386 <HAL_TIM_PeriodElapsedCallback+0xa>
    {
        //Update_Encoder(&PID);
         PID.enablePID = 1;
    }
}
 8007384:	4770      	bx	lr
         PID.enablePID = 1;
 8007386:	2201      	movs	r2, #1
 8007388:	4b02      	ldr	r3, [pc, #8]	@ (8007394 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800738a:	70da      	strb	r2, [r3, #3]
}
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40000800 	.word	0x40000800
 8007394:	200004b0 	.word	0x200004b0

08007398 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{

}
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop

0800739c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

}
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop

080073a0 <HAL_UART_RxCpltCallback>:
    PID.Dir = (PID.pid_rev.rxData[1] >> 7);
    set_speed = (int32_t)PID.pid_rev.rxData[2];
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b538      	push	{r3, r4, r5, lr}
    if(huart->Instance == USART1)
 80073a2:	6802      	ldr	r2, [r0, #0]
 80073a4:	4b15      	ldr	r3, [pc, #84]	@ (80073fc <HAL_UART_RxCpltCallback+0x5c>)
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d000      	beq.n	80073ac <HAL_UART_RxCpltCallback+0xc>
    {
        revData_process();
        HAL_UART_Receive_IT(huart,PID.pid_rev.rxData,len(PID.pid_rev.rxData));
    }
}
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
    if(PID.pid_rev.rxData[0] != 0xFE)
 80073ac:	4d14      	ldr	r5, [pc, #80]	@ (8007400 <HAL_UART_RxCpltCallback+0x60>)
 80073ae:	4604      	mov	r4, r0
 80073b0:	f895 30f8 	ldrb.w	r3, [r5, #248]	@ 0xf8
 80073b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80073b6:	d006      	beq.n	80073c6 <HAL_UART_RxCpltCallback+0x26>
        HAL_UART_Receive_IT(huart,PID.pid_rev.rxData,len(PID.pid_rev.rxData));
 80073b8:	4620      	mov	r0, r4
}
 80073ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_UART_Receive_IT(huart,PID.pid_rev.rxData,len(PID.pid_rev.rxData));
 80073be:	2204      	movs	r2, #4
 80073c0:	4910      	ldr	r1, [pc, #64]	@ (8007404 <HAL_UART_RxCpltCallback+0x64>)
 80073c2:	f7fd b88d 	b.w	80044e0 <HAL_UART_Receive_IT>
    if(verify_CRC8_check_sum(PID.pid_rev.rxData,len(PID.pid_rev.rxData)) == false)
 80073c6:	2104      	movs	r1, #4
 80073c8:	f105 00f8 	add.w	r0, r5, #248	@ 0xf8
 80073cc:	f7ff ff66 	bl	800729c <verify_CRC8_check_sum>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d0f1      	beq.n	80073b8 <HAL_UART_RxCpltCallback+0x18>
    PID.pid_rev.isCorrectData = ((PID.pid_rev.rxData[1] & 0x7f) == PID.ID) ? true : false;
 80073d4:	f895 30f9 	ldrb.w	r3, [r5, #249]	@ 0xf9
 80073d8:	786a      	ldrb	r2, [r5, #1]
 80073da:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 80073de:	4291      	cmp	r1, r2
 80073e0:	bf0c      	ite	eq
 80073e2:	2201      	moveq	r2, #1
 80073e4:	2200      	movne	r2, #0
 80073e6:	f885 20fc 	strb.w	r2, [r5, #252]	@ 0xfc
    if(PID.pid_rev.isCorrectData == false)
 80073ea:	d1e5      	bne.n	80073b8 <HAL_UART_RxCpltCallback+0x18>
    set_speed = (int32_t)PID.pid_rev.rxData[2];
 80073ec:	f895 10fa 	ldrb.w	r1, [r5, #250]	@ 0xfa
 80073f0:	4a05      	ldr	r2, [pc, #20]	@ (8007408 <HAL_UART_RxCpltCallback+0x68>)
    PID.Dir = (PID.pid_rev.rxData[1] >> 7);
 80073f2:	09db      	lsrs	r3, r3, #7
 80073f4:	70ab      	strb	r3, [r5, #2]
    set_speed = (int32_t)PID.pid_rev.rxData[2];
 80073f6:	6011      	str	r1, [r2, #0]
 80073f8:	e7de      	b.n	80073b8 <HAL_UART_RxCpltCallback+0x18>
 80073fa:	bf00      	nop
 80073fc:	40013800 	.word	0x40013800
 8007400:	200004b0 	.word	0x200004b0
 8007404:	200005a8 	.word	0x200005a8
 8007408:	200005e0 	.word	0x200005e0
 800740c:	00000000 	.word	0x00000000

08007410 <PID_param_init>:
extern TIM_HandleTypeDef htim4;
extern volatile int32_t set_speed;


static void PID_param_init(PID_typedef *pid, double Kp,double Ki, double Kd)
{
 8007410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	@ 0x30

    pid->enablePID = 0;
    
    pid->scalefactor = 1;
    /* POSITION : SPEED */
    pid->Delta_T = (pid->mode == PID_Position) ? 0.005f : 0.005f;
 8007418:	f20f 1934 	addw	r9, pc, #308	@ 0x134
 800741c:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8007420:	4682      	mov	sl, r0
 8007422:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
    pid->ID = 1;
 8007426:	2401      	movs	r4, #1
//    pid->Delta_T = 1;
    pid->Dir 	= 0;
    pid->V_set 	= 0;
    pid->V_now  = 0;
 8007428:	2500      	movs	r5, #0
    pid->enablePID = 0;
 800742a:	f04f 0c00 	mov.w	ip, #0
    pid->ID = 1;
 800742e:	f88a 4001 	strb.w	r4, [sl, #1]
    pid->scalefactor = 1;
 8007432:	f88a 4004 	strb.w	r4, [sl, #4]
    pid->V_now  = 0;
 8007436:	2400      	movs	r4, #0
    pid->enablePID = 0;
 8007438:	f88a c003 	strb.w	ip, [sl, #3]
    pid->V_now  = 0;
 800743c:	e9ca 4504 	strd	r4, r5, [sl, #16]
    pid->Speed = 0.0f;
 8007440:	e9ca 4506 	strd	r4, r5, [sl, #24]
    pid->delta_EnC = 0;

    pid->P_Pos = pid->P_Sped = 0.0f;
 8007444:	e9ca 4538 	strd	r4, r5, [sl, #224]	@ 0xe0
    pid->delta_EnC = 0;
 8007448:	f8aa c006 	strh.w	ip, [sl, #6]
    pid->P_Pos = pid->P_Sped = 0.0f;
 800744c:	e9ca 4532 	strd	r4, r5, [sl, #200]	@ 0xc8
    pid->E2_Pos = pid->E2_Sped = 0.0f;

    pid->Output_Pos     = pid->Output_Sped = 0.0f;
    pid->sumOutput_Pos = pid->lastOutput_Sped = 0.0f;

    pid->curr_En = 0;
 8007450:	f8aa c008 	strh.w	ip, [sl, #8]
    pid->I_Pos = pid->I_Sped = 0.0f;
 8007454:	e9ca 453a 	strd	r4, r5, [sl, #232]	@ 0xe8
 8007458:	e9ca 4534 	strd	r4, r5, [sl, #208]	@ 0xd0
    pid->D_Pos = pid->D_Sped = 0.0f;
 800745c:	e9ca 453c 	strd	r4, r5, [sl, #240]	@ 0xf0
 8007460:	e9ca 4536 	strd	r4, r5, [sl, #216]	@ 0xd8
    pid->prev_I_Pos = pid->prev_I_Sped = 0.0f;
 8007464:	e9ca 450c 	strd	r4, r5, [sl, #48]	@ 0x30
 8007468:	e9ca 450a 	strd	r4, r5, [sl, #40]	@ 0x28
    pid->E_Pos  = pid->E_Sped  = 0.0f;
 800746c:	e9ca 4516 	strd	r4, r5, [sl, #88]	@ 0x58
 8007470:	e9ca 4514 	strd	r4, r5, [sl, #80]	@ 0x50
    pid->E1_Pos = pid->E1_Sped = 0.0f;
 8007474:	e9ca 451a 	strd	r4, r5, [sl, #104]	@ 0x68
 8007478:	e9ca 4518 	strd	r4, r5, [sl, #96]	@ 0x60
    pid->E2_Pos = pid->E2_Sped = 0.0f;
 800747c:	e9ca 451e 	strd	r4, r5, [sl, #120]	@ 0x78
 8007480:	e9ca 451c 	strd	r4, r5, [sl, #112]	@ 0x70
    pid->Output_Pos     = pid->Output_Sped = 0.0f;
 8007484:	e9ca 4544 	strd	r4, r5, [sl, #272]	@ 0x110
 8007488:	e9ca 4540 	strd	r4, r5, [sl, #256]	@ 0x100
    pid->sumOutput_Pos = pid->lastOutput_Sped = 0.0f;
 800748c:	e9ca 4546 	strd	r4, r5, [sl, #280]	@ 0x118
 8007490:	e9ca 4542 	strd	r4, r5, [sl, #264]	@ 0x108
    pid->Dir 	= 0;
 8007494:	f88a c002 	strb.w	ip, [sl, #2]
    pid->V_set 	= 0;
 8007498:	f8ca c00c 	str.w	ip, [sl, #12]
    pid->prev_En = 0;

    pid->EnC_set = 0;
 800749c:	f8ca c038 	str.w	ip, [sl, #56]	@ 0x38
    pid->prev_En = 0;
 80074a0:	f8aa c00a 	strh.w	ip, [sl, #10]
    pid->Delta_T = (pid->mode == PID_Position) ? 0.005f : 0.005f;
 80074a4:	e9ca 8908 	strd	r8, r9, [sl, #32]

    pid->Kp_Pos = pid->Kp_Sped = pid->Kp_def;
    pid->Ki_Pos = pid->Ki_Sped = pid->Ki_def;
    pid->Kd_Pos = pid->Kd_Sped = pid->Kd_def;

    if(pid->mode == PID_Position)
 80074a8:	f89a b000 	ldrb.w	fp, [sl]
    pid->EnC_now = 0;
 80074ac:	f8ca c03c 	str.w	ip, [sl, #60]	@ 0x3c
    if(pid->mode == PID_Position)
 80074b0:	f1bb 0f01 	cmp.w	fp, #1
    pid->Kp_def = Kp;
 80074b4:	e9ca 2320 	strd	r2, r3, [sl, #128]	@ 0x80
    pid->Ki_def = Ki;
 80074b8:	e9ca 0122 	strd	r0, r1, [sl, #136]	@ 0x88
    pid->Kd_def = Kd;
 80074bc:	e9ca 6724 	strd	r6, r7, [sl, #144]	@ 0x90
    pid->Kp_Pos = pid->Kp_Sped = pid->Kp_def;
 80074c0:	e9ca 232c 	strd	r2, r3, [sl, #176]	@ 0xb0
 80074c4:	e9ca 2326 	strd	r2, r3, [sl, #152]	@ 0x98
    pid->Ki_Pos = pid->Ki_Sped = pid->Ki_def;
 80074c8:	e9ca 012e 	strd	r0, r1, [sl, #184]	@ 0xb8
 80074cc:	e9ca 0128 	strd	r0, r1, [sl, #160]	@ 0xa0
    pid->Kd_Pos = pid->Kd_Sped = pid->Kd_def;
 80074d0:	e9ca 6730 	strd	r6, r7, [sl, #192]	@ 0xc0
 80074d4:	e9ca 672a 	strd	r6, r7, [sl, #168]	@ 0xa8
    pid->lastEnC = 0;
 80074d8:	f8ca c040 	str.w	ip, [sl, #64]	@ 0x40
    if(pid->mode == PID_Position)
 80074dc:	d01d      	beq.n	800751a <PID_param_init+0x10a>
//        set_speed = 10;
        pid->Kp_Sped = 0.01f;
        pid->Ki_Sped = 0.005f;
        pid->Kd_Sped = 0.0f;//0.0001f;
    }
    else if(pid->mode == PID_Speed)
 80074de:	f1bb 0f00 	cmp.w	fp, #0
 80074e2:	d00f      	beq.n	8007504 <PID_param_init+0xf4>
        pid->Ki_Sped = pid->Ki_def;
        pid->Kd_Sped = pid->Kd_def;
    }

    pid->RPM = 17500;
    pid->PPR 	 = (pid->mode == PID_Position) ? 1 : 500;
 80074e4:	f44f 7bfa 	mov.w	fp, #500	@ 0x1f4

    pid->Motor_Duty = 0;
 80074e8:	2300      	movs	r3, #0

    pid->Sped_Pos = 999;
 80074ea:	4a21      	ldr	r2, [pc, #132]	@ (8007570 <PID_param_init+0x160>)

    pid->pid_rev.isCorrectData = 0;
 80074ec:	f88a 30fc 	strb.w	r3, [sl, #252]	@ 0xfc
    pid->pid_rev.rxData[0] = 0;
 80074f0:	f8ca 30f8 	str.w	r3, [sl, #248]	@ 0xf8
    pid->PPR 	 = (pid->mode == PID_Position) ? 1 : 500;
 80074f4:	f8aa b048 	strh.w	fp, [sl, #72]	@ 0x48
    pid->Sped_Pos = 999;
 80074f8:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
    pid->Motor_Duty = 0;
 80074fc:	f8aa 304a 	strh.w	r3, [sl, #74]	@ 0x4a
    pid->pid_rev.rxData[1] = 0;
    pid->pid_rev.rxData[2] = 0;
    pid->pid_rev.rxData[3] = 0;
}
 8007500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pid->Ki_Pos = 0.00001f ;
 8007504:	a114      	add	r1, pc, #80	@ (adr r1, 8007558 <PID_param_init+0x148>)
 8007506:	e9d1 0100 	ldrd	r0, r1, [r1]
        pid->Kd_Pos = 0.00003f;
 800750a:	a315      	add	r3, pc, #84	@ (adr r3, 8007560 <PID_param_init+0x150>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
        pid->Ki_Pos = 0.00001f ;
 8007510:	e9ca 0128 	strd	r0, r1, [sl, #160]	@ 0xa0
        pid->Kd_Pos = 0.00003f;
 8007514:	e9ca 232a 	strd	r2, r3, [sl, #168]	@ 0xa8
    pid->PPR 	 = (pid->mode == PID_Position) ? 1 : 500;
 8007518:	e7e4      	b.n	80074e4 <PID_param_init+0xd4>
        pid->Ki_Pos = pid->Ki_def * pid->Delta_T;
 800751a:	4642      	mov	r2, r8
 800751c:	464b      	mov	r3, r9
 800751e:	f7f9 f88f 	bl	8000640 <__aeabi_dmul>
        pid->Kd_Pos = pid->Kd_def / pid->Delta_T;
 8007522:	4642      	mov	r2, r8
        pid->Ki_Pos = pid->Ki_def * pid->Delta_T;
 8007524:	e9ca 0128 	strd	r0, r1, [sl, #160]	@ 0xa0
        pid->Kd_Pos = pid->Kd_def / pid->Delta_T;
 8007528:	464b      	mov	r3, r9
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f9 f9b1 	bl	8000894 <__aeabi_ddiv>
        pid->Kp_Sped = 0.01f;
 8007532:	a30d      	add	r3, pc, #52	@ (adr r3, 8007568 <PID_param_init+0x158>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
        pid->Ki_Sped = 0.005f;
 8007538:	e9ca 892e 	strd	r8, r9, [sl, #184]	@ 0xb8
        pid->Kd_Sped = 0.0f;//0.0001f;
 800753c:	e9ca 4530 	strd	r4, r5, [sl, #192]	@ 0xc0
        pid->Kd_Pos = pid->Kd_def / pid->Delta_T;
 8007540:	e9ca 012a 	strd	r0, r1, [sl, #168]	@ 0xa8
        pid->Kp_Sped = 0.01f;
 8007544:	e9ca 232c 	strd	r2, r3, [sl, #176]	@ 0xb0
    pid->PPR 	 = (pid->mode == PID_Position) ? 1 : 500;
 8007548:	e7ce      	b.n	80074e8 <PID_param_init+0xd8>
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w
 8007550:	40000000 	.word	0x40000000
 8007554:	3f747ae1 	.word	0x3f747ae1
 8007558:	80000000 	.word	0x80000000
 800755c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007560:	40000000 	.word	0x40000000
 8007564:	3eff7510 	.word	0x3eff7510
 8007568:	40000000 	.word	0x40000000
 800756c:	3f847ae1 	.word	0x3f847ae1
 8007570:	445c03e7 	.word	0x445c03e7

08007574 <PID_set>:
    }
}


static void PID_set(PID_typedef *pid, double Kp, double Ki, double Kd)
{
 8007574:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
    if(pid->mode == PID_Position)
    {
        pid->Kp_Pos = Kp;
        pid->Ki_Pos = Ki*pid->Delta_T;
 8007578:	e9d0 ab08 	ldrd	sl, fp, [r0, #32]
{
 800757c:	4604      	mov	r4, r0
        pid->Ki_Pos = Ki*pid->Delta_T;
 800757e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
{
 8007582:	4690      	mov	r8, r2
 8007584:	4699      	mov	r9, r3
        pid->Ki_Pos = Ki*pid->Delta_T;
 8007586:	4652      	mov	r2, sl
 8007588:	465b      	mov	r3, fp
 800758a:	f7f9 f859 	bl	8000640 <__aeabi_dmul>
        pid->Kd_Pos = Kd/pid->Delta_T;
 800758e:	465b      	mov	r3, fp
 8007590:	4652      	mov	r2, sl
        pid->Ki_Pos = Ki*pid->Delta_T;
 8007592:	4606      	mov	r6, r0
 8007594:	460f      	mov	r7, r1
        pid->Kd_Pos = Kd/pid->Delta_T;
 8007596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800759a:	f7f9 f97b 	bl	8000894 <__aeabi_ddiv>
    if(pid->mode == PID_Position)
 800759e:	7823      	ldrb	r3, [r4, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d007      	beq.n	80075b4 <PID_set+0x40>
    }
    else
    {
        pid->Kp_Sped = Kp;
 80075a4:	e9c4 892c 	strd	r8, r9, [r4, #176]	@ 0xb0
        pid->Ki_Sped = Ki*pid->Delta_T;
 80075a8:	e9c4 672e 	strd	r6, r7, [r4, #184]	@ 0xb8
        pid->Kd_Sped = Kd/pid->Delta_T;
 80075ac:	e9c4 0130 	strd	r0, r1, [r4, #192]	@ 0xc0
    }
}
 80075b0:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
        pid->Kp_Pos = Kp;
 80075b4:	e9c4 8926 	strd	r8, r9, [r4, #152]	@ 0x98
        pid->Ki_Pos = Ki*pid->Delta_T;
 80075b8:	e9c4 6728 	strd	r6, r7, [r4, #160]	@ 0xa0
        pid->Kd_Pos = Kd/pid->Delta_T;
 80075bc:	e9c4 012a 	strd	r0, r1, [r4, #168]	@ 0xa8
}
 80075c0:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 80075c4:	0000      	movs	r0, r0
	...

080075c8 <PID_Calulate>:

static void PID_Calulate(PID_typedef *pid, volatile int32_t* Value_Set)
{
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if(pid->mode == PID_Speed)
 80075cc:	7807      	ldrb	r7, [r0, #0]
{
 80075ce:	4604      	mov	r4, r0
 80075d0:	460e      	mov	r6, r1
 80075d2:	b087      	sub	sp, #28
    if(pid->mode == PID_Speed)
 80075d4:	2f00      	cmp	r7, #0
 80075d6:	f040 80fb 	bne.w	80077d0 <PID_Calulate+0x208>
    {
        static uint8_t first_Lock = 0;
        
        if(*Value_Set != 0U)
 80075da:	6809      	ldr	r1, [r1, #0]
 80075dc:	b9c9      	cbnz	r1, 8007612 <PID_Calulate+0x4a>
            }
        }
        else
        {
            //Reset Data
            pid->E_Pos = 0;
 80075de:	2200      	movs	r2, #0
 80075e0:	2300      	movs	r3, #0
            pid->P_Sped = pid->I_Sped = pid->D_Sped = 0.0f;
            pid->Output_Sped = 0.0f;
            pid->lastOutput_Sped = pid->Output_Sped;
            // None Lock
            pid->Motor_Duty = (int16_t)pid->Output_Sped;
            PID_Motor_Ctrl(pid->Motor_Duty);
 80075e2:	4893      	ldr	r0, [pc, #588]	@ (8007830 <PID_Calulate+0x268>)
            pid->E_Pos = 0;
 80075e4:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
            pid->E1_Pos = pid->E2_Pos = pid->E_Pos;
 80075e8:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
 80075ec:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
            pid->P_Sped = pid->I_Sped = pid->D_Sped = 0.0f;
 80075f0:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 80075f4:	e9c4 233a 	strd	r2, r3, [r4, #232]	@ 0xe8
 80075f8:	e9c4 2338 	strd	r2, r3, [r4, #224]	@ 0xe0
            pid->Output_Sped = 0.0f;
 80075fc:	e9c4 2344 	strd	r2, r3, [r4, #272]	@ 0x110
            pid->lastOutput_Sped = pid->Output_Sped;
 8007600:	e9c4 2346 	strd	r2, r3, [r4, #280]	@ 0x118
            pid->Motor_Duty = (int16_t)pid->Output_Sped;
 8007604:	f8a4 104a 	strh.w	r1, [r4, #74]	@ 0x4a
            PID_Motor_Ctrl(pid->Motor_Duty);
 8007608:	6341      	str	r1, [r0, #52]	@ 0x34
 800760a:	6381      	str	r1, [r0, #56]	@ 0x38
    {
        pid->Motor_Duty = (pid->Dir == 0) ? ((int16_t)*Value_Set * Duty_scale) : -((int16_t)*Value_Set * Duty_scale);
        LimitMax(pid->Motor_Duty, maxOuput);
        PID_Motor_Ctrl(pid->Motor_Duty);
    }
}
 800760c:	b007      	add	sp, #28
 800760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            pid->V_now = (pid->Speed * Speed_scale) / pid->RPM;
 8007612:	a383      	add	r3, pc, #524	@ (adr r3, 8007820 <PID_Calulate+0x258>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f8b0 b046 	ldrh.w	fp, [r0, #70]	@ 0x46
 800761c:	f100 0118 	add.w	r1, r0, #24
 8007620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007624:	f7f9 f80c 	bl	8000640 <__aeabi_dmul>
 8007628:	4680      	mov	r8, r0
 800762a:	4658      	mov	r0, fp
 800762c:	4689      	mov	r9, r1
 800762e:	f7f8 ff9d 	bl	800056c <__aeabi_i2d>
 8007632:	460b      	mov	r3, r1
 8007634:	4602      	mov	r2, r0
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	f7f9 f92b 	bl	8000894 <__aeabi_ddiv>
            if(*Value_Set < 4U)
 800763e:	6833      	ldr	r3, [r6, #0]
                if(first_Lock == 0 && fabs(pid->Speed) == 0)
 8007640:	4d7c      	ldr	r5, [pc, #496]	@ (8007834 <PID_Calulate+0x26c>)
            if(*Value_Set < 4U)
 8007642:	2b03      	cmp	r3, #3
            pid->V_now = (pid->Speed * Speed_scale) / pid->RPM;
 8007644:	e9c4 0104 	strd	r0, r1, [r4, #16]
                if(first_Lock == 0 && fabs(pid->Speed) == 0)
 8007648:	f895 a000 	ldrb.w	sl, [r5]
            if(*Value_Set < 4U)
 800764c:	f240 80f8 	bls.w	8007840 <PID_Calulate+0x278>
                if(first_Lock == 1)
 8007650:	f1ba 0f01 	cmp.w	sl, #1
 8007654:	f000 837b 	beq.w	8007d4e <PID_Calulate+0x786>
                if(*Value_Set > 250) *Value_Set = 250;
 8007658:	6833      	ldr	r3, [r6, #0]
                pid->V_set = (*Value_Set * pid->RPM)/Speed_scale;
 800765a:	4a77      	ldr	r2, [pc, #476]	@ (8007838 <PID_Calulate+0x270>)
                if(*Value_Set > 250) *Value_Set = 250;
 800765c:	2bfa      	cmp	r3, #250	@ 0xfa
 800765e:	bfc4      	itt	gt
 8007660:	23fa      	movgt	r3, #250	@ 0xfa
 8007662:	6033      	strgt	r3, [r6, #0]
                pid->V_set = (*Value_Set * pid->RPM)/Speed_scale;
 8007664:	6833      	ldr	r3, [r6, #0]
 8007666:	fb0b fa03 	mul.w	sl, fp, r3
 800766a:	fb82 230a 	smull	r2, r3, r2, sl
 800766e:	ea4f 7aea 	mov.w	sl, sl, asr #31
 8007672:	ebca 3a23 	rsb	sl, sl, r3, asr #12
                pid->V_set = (pid->Dir == 0U)  ? pid->V_set : -pid->V_set;
 8007676:	78a3      	ldrb	r3, [r4, #2]
 8007678:	b10b      	cbz	r3, 800767e <PID_Calulate+0xb6>
 800767a:	f1ca 0a00 	rsb	sl, sl, #0
                if(fabs(pid->E_Sped) < 2)
 800767e:	e9d4 6316 	ldrd	r6, r3, [r4, #88]	@ 0x58
 8007682:	f023 4700 	bic.w	r7, r3, #2147483648	@ 0x80000000
 8007686:	2200      	movs	r2, #0
 8007688:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800768c:	4630      	mov	r0, r6
 800768e:	4639      	mov	r1, r7
                pid->V_set = (pid->Dir == 0U)  ? pid->V_set : -pid->V_set;
 8007690:	f8c4 a00c 	str.w	sl, [r4, #12]
                if(fabs(pid->E_Sped) < 2)
 8007694:	f7f9 fa46 	bl	8000b24 <__aeabi_dcmplt>
                        pid->Ki_Sped = pid->Ki_def;
 8007698:	e9d4 8922 	ldrd	r8, r9, [r4, #136]	@ 0x88
                if(fabs(pid->E_Sped) < 2)
 800769c:	2800      	cmp	r0, #0
 800769e:	f000 8267 	beq.w	8007b70 <PID_Calulate+0x5a8>
                    if(pid->V_set >=5 && pid->V_set < 10)
 80076a2:	f1aa 0305 	sub.w	r3, sl, #5
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	f200 82e7 	bhi.w	8007c7a <PID_Calulate+0x6b2>
                    pid->Ki_Sped = pid->Ki_def;
 80076ac:	e9c4 892e 	strd	r8, r9, [r4, #184]	@ 0xb8
            if(first_Lock == 0)
 80076b0:	f895 a000 	ldrb.w	sl, [r5]
 80076b4:	f1ba 0f00 	cmp.w	sl, #0
 80076b8:	f040 819d 	bne.w	80079f6 <PID_Calulate+0x42e>
                pid->E_Sped = pid->V_set - pid->Speed;
 80076bc:	68e0      	ldr	r0, [r4, #12]
 80076be:	f7f8 ff55 	bl	800056c <__aeabi_i2d>
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 80076c2:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	@ 0xb0
                pid->I_Sped = pid->Ki_Sped * pid->E_Sped * pid->Delta_T;
 80076c6:	e9d4 672e 	ldrd	r6, r7, [r4, #184]	@ 0xb8
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 80076ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
                pid->E_Sped = pid->V_set - pid->Speed;
 80076ce:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80076d2:	f7f8 fdfd 	bl	80002d0 <__aeabi_dsub>
                pid->P_Sped = pid->E_Sped - pid->E1_Sped;
 80076d6:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
                pid->E_Sped = pid->V_set - pid->Speed;
 80076da:	4682      	mov	sl, r0
 80076dc:	468b      	mov	fp, r1
 80076de:	e9c4 ab16 	strd	sl, fp, [r4, #88]	@ 0x58
                pid->P_Sped = pid->E_Sped - pid->E1_Sped;
 80076e2:	e9cd 2300 	strd	r2, r3, [sp]
 80076e6:	f7f8 fdf3 	bl	80002d0 <__aeabi_dsub>
                pid->I_Sped = pid->Ki_Sped * pid->E_Sped * pid->Delta_T;
 80076ea:	4632      	mov	r2, r6
                pid->P_Sped = pid->E_Sped - pid->E1_Sped;
 80076ec:	4605      	mov	r5, r0
 80076ee:	460e      	mov	r6, r1
                pid->I_Sped = pid->Ki_Sped * pid->E_Sped * pid->Delta_T;
 80076f0:	463b      	mov	r3, r7
                pid->P_Sped = pid->E_Sped - pid->E1_Sped;
 80076f2:	e9c4 5638 	strd	r5, r6, [r4, #224]	@ 0xe0
                pid->I_Sped = pid->Ki_Sped * pid->E_Sped * pid->Delta_T;
 80076f6:	4650      	mov	r0, sl
 80076f8:	4659      	mov	r1, fp
                pid->P_Sped = pid->E_Sped - pid->E1_Sped;
 80076fa:	e9cd 5604 	strd	r5, r6, [sp, #16]
                pid->I_Sped = pid->Ki_Sped * pid->E_Sped * pid->Delta_T;
 80076fe:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
 8007702:	f7f8 ff9d 	bl	8000640 <__aeabi_dmul>
 8007706:	4632      	mov	r2, r6
 8007708:	463b      	mov	r3, r7
 800770a:	f7f8 ff99 	bl	8000640 <__aeabi_dmul>
 800770e:	4680      	mov	r8, r0
 8007710:	4689      	mov	r9, r1
                pid->D_Sped = (pid->E_Sped - 2.0f*pid->E1_Sped + pid->E2_Sped)/pid->Delta_T;
 8007712:	e9dd 0100 	ldrd	r0, r1, [sp]
                pid->I_Sped = pid->Ki_Sped * pid->E_Sped * pid->Delta_T;
 8007716:	e9c4 893a 	strd	r8, r9, [r4, #232]	@ 0xe8
                pid->D_Sped = (pid->E_Sped - 2.0f*pid->E1_Sped + pid->E2_Sped)/pid->Delta_T;
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	f7f8 fdd9 	bl	80002d4 <__adddf3>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4650      	mov	r0, sl
 8007728:	4659      	mov	r1, fp
 800772a:	f7f8 fdd1 	bl	80002d0 <__aeabi_dsub>
 800772e:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	@ 0x78
 8007732:	f7f8 fdcf 	bl	80002d4 <__adddf3>
 8007736:	4632      	mov	r2, r6
 8007738:	463b      	mov	r3, r7
 800773a:	f7f9 f8ab 	bl	8000894 <__aeabi_ddiv>
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 800773e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                pid->D_Sped = (pid->E_Sped - 2.0f*pid->E1_Sped + pid->E2_Sped)/pid->Delta_T;
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 8007746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
                pid->D_Sped = (pid->E_Sped - 2.0f*pid->E1_Sped + pid->E2_Sped)/pid->Delta_T;
 800774a:	e9c4 673c 	strd	r6, r7, [r4, #240]	@ 0xf0
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 800774e:	f7f8 ff77 	bl	8000640 <__aeabi_dmul>
                pid->Output_Sped = pid->lastOutput_Sped +
 8007752:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	@ 0x118
 8007756:	f7f8 fdbd 	bl	80002d4 <__adddf3>
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 800775a:	4642      	mov	r2, r8
 800775c:	464b      	mov	r3, r9
                LimitMax(pid->Output_Sped,maxOuput);
 800775e:	f20f 09c8 	addw	r9, pc, #200	@ 0xc8
 8007762:	e9d9 8900 	ldrd	r8, r9, [r9]
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 8007766:	f7f8 fdb5 	bl	80002d4 <__adddf3>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
                                   (pid->Kd_Sped * pid->D_Sped);
 800776e:	4630      	mov	r0, r6
 8007770:	4639      	mov	r1, r7
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 8007772:	4616      	mov	r6, r2
 8007774:	461f      	mov	r7, r3
                                   (pid->Kd_Sped * pid->D_Sped);
 8007776:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	@ 0xc0
 800777a:	f7f8 ff61 	bl	8000640 <__aeabi_dmul>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
                                   (pid->Kp_Sped * pid->P_Sped) + pid->I_Sped +
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	f7f8 fda5 	bl	80002d4 <__adddf3>
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
                LimitMax(pid->Output_Sped,maxOuput);
 800778e:	4642      	mov	r2, r8
 8007790:	464b      	mov	r3, r9
                pid->Output_Sped = pid->lastOutput_Sped +
 8007792:	e9c4 6744 	strd	r6, r7, [r4, #272]	@ 0x110
                LimitMax(pid->Output_Sped,maxOuput);
 8007796:	f7f9 f9e3 	bl	8000b60 <__aeabi_dcmpgt>
 800779a:	2800      	cmp	r0, #0
 800779c:	f000 822e 	beq.w	8007bfc <PID_Calulate+0x634>
                pid->E2_Sped = pid->E1_Sped;
 80077a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077a4:	e9c4 231e 	strd	r2, r3, [r4, #120]	@ 0x78
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 80077a8:	f240 33e3 	movw	r3, #995	@ 0x3e3
 80077ac:	4618      	mov	r0, r3
                LimitMax(pid->Output_Sped,maxOuput);
 80077ae:	e9c4 8944 	strd	r8, r9, [r4, #272]	@ 0x110
                pid->lastOutput_Sped = pid->Output_Sped;
 80077b2:	e9c4 8946 	strd	r8, r9, [r4, #280]	@ 0x118
                pid->E1_Sped = pid->E_Sped;
 80077b6:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	@ 0x68
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 80077ba:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
                PID_Motor_Ctrl(pid->Motor_Duty);
 80077be:	2200      	movs	r2, #0
 80077c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007830 <PID_Calulate+0x268>)
 80077c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80077c4:	6398      	str	r0, [r3, #56]	@ 0x38
                pid->EnC_now = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 80077ca:	b007      	add	sp, #28
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(pid->mode == PID_Position)
 80077d0:	2f01      	cmp	r7, #1
 80077d2:	f000 8089 	beq.w	80078e8 <PID_Calulate+0x320>
    else if(pid->mode == None_PID)
 80077d6:	2f02      	cmp	r7, #2
 80077d8:	f47f af18 	bne.w	800760c <PID_Calulate+0x44>
        pid->Motor_Duty = (pid->Dir == 0) ? ((int16_t)*Value_Set * Duty_scale) : -((int16_t)*Value_Set * Duty_scale);
 80077dc:	7883      	ldrb	r3, [r0, #2]
 80077de:	6808      	ldr	r0, [r1, #0]
 80077e0:	b200      	sxth	r0, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 823e 	bne.w	8007c64 <PID_Calulate+0x69c>
 80077e8:	f7f9 faa6 	bl	8000d38 <__aeabi_i2f>
 80077ec:	4913      	ldr	r1, [pc, #76]	@ (800783c <PID_Calulate+0x274>)
 80077ee:	f7f8 fcb7 	bl	8000160 <__aeabi_fmul>
 80077f2:	f7f9 faf5 	bl	8000de0 <__aeabi_f2iz>
 80077f6:	b200      	sxth	r0, r0
        LimitMax(pid->Motor_Duty, maxOuput);
 80077f8:	f5b0 7f79 	cmp.w	r0, #996	@ 0x3e4
        pid->Motor_Duty = (pid->Dir == 0) ? ((int16_t)*Value_Set * Duty_scale) : -((int16_t)*Value_Set * Duty_scale);
 80077fc:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
        LimitMax(pid->Motor_Duty, maxOuput);
 8007800:	f2c0 8222 	blt.w	8007c48 <PID_Calulate+0x680>
 8007804:	f240 33e3 	movw	r3, #995	@ 0x3e3
 8007808:	4618      	mov	r0, r3
 800780a:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
        PID_Motor_Ctrl(pid->Motor_Duty);
 800780e:	2200      	movs	r2, #0
 8007810:	4b07      	ldr	r3, [pc, #28]	@ (8007830 <PID_Calulate+0x268>)
 8007812:	635a      	str	r2, [r3, #52]	@ 0x34
 8007814:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8007816:	b007      	add	sp, #28
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	f3af 8000 	nop.w
 8007820:	00000000 	.word	0x00000000
 8007824:	40cd4c00 	.word	0x40cd4c00
 8007828:	00000000 	.word	0x00000000
 800782c:	408f1800 	.word	0x408f1800
 8007830:	40012c00 	.word	0x40012c00
 8007834:	20002508 	.word	0x20002508
 8007838:	45e7b273 	.word	0x45e7b273
 800783c:	407eb852 	.word	0x407eb852
                pid->V_set = 0U;
 8007840:	60e7      	str	r7, [r4, #12]
    if(fabs(pid->V_now) >= 200)
 8007842:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 8007846:	2200      	movs	r2, #0
 8007848:	4639      	mov	r1, r7
 800784a:	4bb9      	ldr	r3, [pc, #740]	@ (8007b30 <PID_Calulate+0x568>)
                LocK_process(pid,*Value_Set);
 800784c:	f8d6 9000 	ldr.w	r9, [r6]
    if(fabs(pid->V_now) >= 200)
 8007850:	4606      	mov	r6, r0
 8007852:	f7f9 f97b 	bl	8000b4c <__aeabi_dcmpge>
        pid->Kp_Sped = pid->Kp_def + 7.0f, pid->Ki_Sped = pid->Ki_def + 3.0f;
 8007856:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	@ 0x88
 800785a:	e9cd 2300 	strd	r2, r3, [sp]
 800785e:	e9d4 1220 	ldrd	r1, r2, [r4, #128]	@ 0x80
 8007862:	e9cd 1202 	strd	r1, r2, [sp, #8]
    if(fabs(pid->V_now) >= 200)
 8007866:	2800      	cmp	r0, #0
 8007868:	f040 8215 	bne.w	8007c96 <PID_Calulate+0x6ce>
    else if(fabs(pid->V_now) < 200 && fabs(pid->V_now) >= 150)
 800786c:	2200      	movs	r2, #0
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	4baf      	ldr	r3, [pc, #700]	@ (8007b30 <PID_Calulate+0x568>)
 8007874:	f7f9 f956 	bl	8000b24 <__aeabi_dcmplt>
 8007878:	2800      	cmp	r0, #0
 800787a:	f000 828f 	beq.w	8007d9c <PID_Calulate+0x7d4>
 800787e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8007b18 <PID_Calulate+0x550>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f9 f960 	bl	8000b4c <__aeabi_dcmpge>
 800788c:	2800      	cmp	r0, #0
 800788e:	f000 8285 	beq.w	8007d9c <PID_Calulate+0x7d4>
        pid->Kp_Sped = pid->Kp_def + 6.0f, pid->Ki_Sped = pid->Ki_def + 2.0f;
 8007892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007896:	2200      	movs	r2, #0
 8007898:	4ba6      	ldr	r3, [pc, #664]	@ (8007b34 <PID_Calulate+0x56c>)
 800789a:	f7f8 fd1b 	bl	80002d4 <__adddf3>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078aa:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
 80078ae:	2200      	movs	r2, #0
 80078b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80078b4:	f7f8 fd0e 	bl	80002d4 <__adddf3>
 80078b8:	4606      	mov	r6, r0
 80078ba:	460f      	mov	r7, r1
 80078bc:	e9c4 672e 	strd	r6, r7, [r4, #184]	@ 0xb8
                if(first_Lock == 0 && fabs(pid->Speed) == 0)
 80078c0:	f1ba 0f00 	cmp.w	sl, #0
 80078c4:	f040 8097 	bne.w	80079f6 <PID_Calulate+0x42e>
 80078c8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80078cc:	f04f 0800 	mov.w	r8, #0
 80078d0:	f04f 0900 	mov.w	r9, #0
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	f7f9 f91a 	bl	8000b10 <__aeabi_dcmpeq>
 80078dc:	2800      	cmp	r0, #0
 80078de:	f040 836b 	bne.w	8007fb8 <PID_Calulate+0x9f0>
 80078e2:	4640      	mov	r0, r8
 80078e4:	4649      	mov	r1, r9
 80078e6:	e6f2      	b.n	80076ce <PID_Calulate+0x106>
        pid->EnC_set = (pid->Dir == 1)  ? (*Value_Set * 4) : -(*Value_Set * 4);
 80078e8:	7883      	ldrb	r3, [r0, #2]
        LimitMax(pid->sumOutput_Pos,set_speed);
 80078ea:	4d93      	ldr	r5, [pc, #588]	@ (8007b38 <PID_Calulate+0x570>)
        pid->EnC_set = (pid->Dir == 1)  ? (*Value_Set * 4) : -(*Value_Set * 4);
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	680b      	ldr	r3, [r1, #0]
        pid->E_Pos = (pid->EnC_set - pid->EnC_now);
 80078f0:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
        pid->EnC_set = (pid->Dir == 1)  ? (*Value_Set * 4) : -(*Value_Set * 4);
 80078f2:	bf18      	it	ne
 80078f4:	ebc3 7383 	rsbne	r3, r3, r3, lsl #30
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	63a3      	str	r3, [r4, #56]	@ 0x38
        pid->E_Pos = (pid->EnC_set - pid->EnC_now);
 80078fc:	1a18      	subs	r0, r3, r0
 80078fe:	f7f8 fe35 	bl	800056c <__aeabi_i2d>
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
        pid->D_Pos = pid->EnC_now - pid->lastEnC;
 8007906:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        pid->E_Pos = (pid->EnC_set - pid->EnC_now);
 800790a:	e9c4 6714 	strd	r6, r7, [r4, #80]	@ 0x50
        pid->P_Pos = pid->E_Pos;
 800790e:	e9c4 6732 	strd	r6, r7, [r4, #200]	@ 0xc8
        pid->D_Pos = pid->EnC_now - pid->lastEnC;
 8007912:	1ac0      	subs	r0, r0, r3
 8007914:	f7f8 fe2a 	bl	800056c <__aeabi_i2d>
        pid->sumOutput_Pos += pid->Ki_Pos * pid->E_Pos;
 8007918:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	@ 0xa0
        pid->D_Pos = pid->EnC_now - pid->lastEnC;
 800791c:	4680      	mov	r8, r0
 800791e:	4689      	mov	r9, r1
        pid->sumOutput_Pos += pid->Ki_Pos * pid->E_Pos;
 8007920:	4630      	mov	r0, r6
 8007922:	4639      	mov	r1, r7
        pid->D_Pos = pid->EnC_now - pid->lastEnC;
 8007924:	e9c4 8936 	strd	r8, r9, [r4, #216]	@ 0xd8
        pid->sumOutput_Pos += pid->Ki_Pos * pid->E_Pos;
 8007928:	f7f8 fe8a 	bl	8000640 <__aeabi_dmul>
 800792c:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	@ 0x108
 8007930:	f7f8 fcd0 	bl	80002d4 <__adddf3>
        pid->sumOutput_Pos -= pid->Kp_Pos *pid->D_Pos;
 8007934:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	@ 0x98
        pid->sumOutput_Pos += pid->Ki_Pos * pid->E_Pos;
 8007938:	4606      	mov	r6, r0
 800793a:	460f      	mov	r7, r1
        pid->sumOutput_Pos -= pid->Kp_Pos *pid->D_Pos;
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f8 fe7e 	bl	8000640 <__aeabi_dmul>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f7f8 fcc0 	bl	80002d0 <__aeabi_dsub>
 8007950:	4606      	mov	r6, r0
 8007952:	460f      	mov	r7, r1
        LimitMax(pid->sumOutput_Pos,set_speed);
 8007954:	6828      	ldr	r0, [r5, #0]
        pid->sumOutput_Pos -= pid->Kp_Pos *pid->D_Pos;
 8007956:	e9c4 6742 	strd	r6, r7, [r4, #264]	@ 0x108
        LimitMax(pid->sumOutput_Pos,set_speed);
 800795a:	f7f8 fe07 	bl	800056c <__aeabi_i2d>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7f9 f8fb 	bl	8000b60 <__aeabi_dcmpgt>
 800796a:	2800      	cmp	r0, #0
 800796c:	f000 80ea 	beq.w	8007b44 <PID_Calulate+0x57c>
 8007970:	6828      	ldr	r0, [r5, #0]
 8007972:	f7f8 fdfb 	bl	800056c <__aeabi_i2d>
 8007976:	4606      	mov	r6, r0
 8007978:	460f      	mov	r7, r1
 800797a:	e9c4 6742 	strd	r6, r7, [r4, #264]	@ 0x108
        pid->Output_Pos += pid->sumOutput_Pos - pid->Kd_Pos * pid->D_Pos;
 800797e:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	@ 0xa8
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fe5b 	bl	8000640 <__aeabi_dmul>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fc9d 	bl	80002d0 <__aeabi_dsub>
 8007996:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	@ 0x100
 800799a:	f7f8 fc9b 	bl	80002d4 <__adddf3>
 800799e:	4606      	mov	r6, r0
 80079a0:	460f      	mov	r7, r1
        LimitMax(pid->Output_Pos,set_speed);
 80079a2:	6828      	ldr	r0, [r5, #0]
        pid->Output_Pos += pid->sumOutput_Pos - pid->Kd_Pos * pid->D_Pos;
 80079a4:	e9c4 6740 	strd	r6, r7, [r4, #256]	@ 0x100
        LimitMax(pid->Output_Pos,set_speed);
 80079a8:	f7f8 fde0 	bl	800056c <__aeabi_i2d>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4630      	mov	r0, r6
 80079b2:	4639      	mov	r1, r7
 80079b4:	f7f9 f8d4 	bl	8000b60 <__aeabi_dcmpgt>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f000 8097 	beq.w	8007aec <PID_Calulate+0x524>
 80079be:	6828      	ldr	r0, [r5, #0]
 80079c0:	f7f8 fdd4 	bl	800056c <__aeabi_i2d>
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	e9c4 6740 	strd	r6, r7, [r4, #256]	@ 0x100
        pid->lastEnC = pid->EnC_now;
 80079cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
        pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 80079ce:	4630      	mov	r0, r6
        pid->lastEnC = pid->EnC_now;
 80079d0:	6423      	str	r3, [r4, #64]	@ 0x40
        pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 80079d2:	4639      	mov	r1, r7
 80079d4:	f000 fcaa 	bl	800832c <round>
 80079d8:	f7f9 f8cc 	bl	8000b74 <__aeabi_d2iz>
 80079dc:	b200      	sxth	r0, r0
        PID_Motor_Ctrl(pid->Motor_Duty);
 80079de:	2800      	cmp	r0, #0
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	4b55      	ldr	r3, [pc, #340]	@ (8007b3c <PID_Calulate+0x574>)
        pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 80079e6:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
        PID_Motor_Ctrl(pid->Motor_Duty);
 80079ea:	f6bf af12 	bge.w	8007812 <PID_Calulate+0x24a>
 80079ee:	4240      	negs	r0, r0
 80079f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80079f2:	6358      	str	r0, [r3, #52]	@ 0x34
 80079f4:	e60a      	b.n	800760c <PID_Calulate+0x44>
            else if(first_Lock == 1)
 80079f6:	f1ba 0f01 	cmp.w	sl, #1
 80079fa:	f47f ae07 	bne.w	800760c <PID_Calulate+0x44>
                pid->E_Pos = (pid->EnC_set - pid->EnC_now);
 80079fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a00:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007a02:	1ac0      	subs	r0, r0, r3
 8007a04:	f7f8 fdb2 	bl	800056c <__aeabi_i2d>
                pid->I_Pos += (pid->Ki_Pos * pid->E_Pos) * pid->Delta_T;
 8007a08:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	@ 0xa0
 8007a0c:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
                pid->E_Pos = (pid->EnC_set - pid->EnC_now);
 8007a10:	4682      	mov	sl, r0
 8007a12:	468b      	mov	fp, r1
 8007a14:	e9c4 ab14 	strd	sl, fp, [r4, #80]	@ 0x50
                pid->P_Pos = pid->E_Pos;
 8007a18:	e9c4 ab32 	strd	sl, fp, [r4, #200]	@ 0xc8
                pid->I_Pos += (pid->Ki_Pos * pid->E_Pos) * pid->Delta_T;
 8007a1c:	f7f8 fe10 	bl	8000640 <__aeabi_dmul>
 8007a20:	4632      	mov	r2, r6
 8007a22:	463b      	mov	r3, r7
 8007a24:	f7f8 fe0c 	bl	8000640 <__aeabi_dmul>
 8007a28:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	@ 0xd0
 8007a2c:	f7f8 fc52 	bl	80002d4 <__adddf3>
                pid->D_Pos = (pid->E_Pos - pid->E1_Pos) / pid->Delta_T;
 8007a30:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	@ 0x60
                pid->I_Pos += (pid->Ki_Pos * pid->E_Pos) * pid->Delta_T;
 8007a34:	4680      	mov	r8, r0
 8007a36:	4689      	mov	r9, r1
                pid->D_Pos = (pid->E_Pos - pid->E1_Pos) / pid->Delta_T;
 8007a38:	4650      	mov	r0, sl
 8007a3a:	4659      	mov	r1, fp
                pid->I_Pos += (pid->Ki_Pos * pid->E_Pos) * pid->Delta_T;
 8007a3c:	e9c4 8934 	strd	r8, r9, [r4, #208]	@ 0xd0
                pid->D_Pos = (pid->E_Pos - pid->E1_Pos) / pid->Delta_T;
 8007a40:	f7f8 fc46 	bl	80002d0 <__aeabi_dsub>
 8007a44:	4632      	mov	r2, r6
 8007a46:	463b      	mov	r3, r7
 8007a48:	f7f8 ff24 	bl	8000894 <__aeabi_ddiv>
                LimitMax(pid->I_Pos,maxI_pos);
 8007a4c:	2600      	movs	r6, #0
                pid->D_Pos = (pid->E_Pos - pid->E1_Pos) / pid->Delta_T;
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
                LimitMax(pid->I_Pos,maxI_pos);
 8007a52:	4f3b      	ldr	r7, [pc, #236]	@ (8007b40 <PID_Calulate+0x578>)
                pid->D_Pos = (pid->E_Pos - pid->E1_Pos) / pid->Delta_T;
 8007a54:	e9cd 2300 	strd	r2, r3, [sp]
 8007a58:	e9c4 2336 	strd	r2, r3, [r4, #216]	@ 0xd8
                LimitMax(pid->I_Pos,maxI_pos);
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4632      	mov	r2, r6
 8007a62:	463b      	mov	r3, r7
 8007a64:	f7f9 f87c 	bl	8000b60 <__aeabi_dcmpgt>
 8007a68:	b948      	cbnz	r0, 8007a7e <PID_Calulate+0x4b6>
 8007a6a:	a72d      	add	r7, pc, #180	@ (adr r7, 8007b20 <PID_Calulate+0x558>)
 8007a6c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007a70:	4640      	mov	r0, r8
 8007a72:	4649      	mov	r1, r9
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	f7f9 f854 	bl	8000b24 <__aeabi_dcmplt>
 8007a7c:	b118      	cbz	r0, 8007a86 <PID_Calulate+0x4be>
 8007a7e:	46b0      	mov	r8, r6
 8007a80:	46b9      	mov	r9, r7
 8007a82:	e9c4 6734 	strd	r6, r7, [r4, #208]	@ 0xd0
                pid->Output_Pos = (pid->Kp_Pos * pid->P_Pos) +
 8007a86:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	@ 0x98
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	f7f8 fdd7 	bl	8000640 <__aeabi_dmul>
 8007a92:	4642      	mov	r2, r8
 8007a94:	464b      	mov	r3, r9
                LimitMax(pid->Output_Pos,(maxOuput+1)/2);
 8007a96:	f20f 0990 	addw	r9, pc, #144	@ 0x90
 8007a9a:	e9d9 8900 	ldrd	r8, r9, [r9]
                pid->Output_Pos = (pid->Kp_Pos * pid->P_Pos) +
 8007a9e:	f7f8 fc19 	bl	80002d4 <__adddf3>
                                  (pid->Kd_Pos * pid->D_Pos);
 8007aa2:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	@ 0xa8
                pid->Output_Pos = (pid->Kp_Pos * pid->P_Pos) +
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460f      	mov	r7, r1
                                  (pid->Kd_Pos * pid->D_Pos);
 8007aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aae:	f7f8 fdc7 	bl	8000640 <__aeabi_dmul>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
                                  pid->I_Pos +
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	f7f8 fc0b 	bl	80002d4 <__adddf3>
                LimitMax(pid->Output_Pos,(maxOuput+1)/2);
 8007abe:	4642      	mov	r2, r8
 8007ac0:	464b      	mov	r3, r9
                                  pid->I_Pos +
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
                LimitMax(pid->Output_Pos,(maxOuput+1)/2);
 8007ac6:	f7f9 f84b 	bl	8000b60 <__aeabi_dcmpgt>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f000 8211 	beq.w	8007ef2 <PID_Calulate+0x92a>
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 8007ad0:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 8007ad4:	4613      	mov	r3, r2
                LimitMax(pid->Output_Pos,(maxOuput+1)/2);
 8007ad6:	e9c4 8940 	strd	r8, r9, [r4, #256]	@ 0x100
                pid->E1_Pos = pid->E_Pos;
 8007ada:	e9c4 ab18 	strd	sl, fp, [r4, #96]	@ 0x60
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 8007ade:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
                PID_Motor_Ctrl(pid->Motor_Duty);
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4a15      	ldr	r2, [pc, #84]	@ (8007b3c <PID_Calulate+0x574>)
 8007ae6:	6351      	str	r1, [r2, #52]	@ 0x34
 8007ae8:	6393      	str	r3, [r2, #56]	@ 0x38
 8007aea:	e58f      	b.n	800760c <PID_Calulate+0x44>
        LimitMax(pid->Output_Pos,set_speed);
 8007aec:	6828      	ldr	r0, [r5, #0]
 8007aee:	4240      	negs	r0, r0
 8007af0:	f7f8 fd3c 	bl	800056c <__aeabi_i2d>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4630      	mov	r0, r6
 8007afa:	4639      	mov	r1, r7
 8007afc:	f7f9 f812 	bl	8000b24 <__aeabi_dcmplt>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f43f af63 	beq.w	80079cc <PID_Calulate+0x404>
 8007b06:	6828      	ldr	r0, [r5, #0]
 8007b08:	4240      	negs	r0, r0
 8007b0a:	f7f8 fd2f 	bl	800056c <__aeabi_i2d>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460f      	mov	r7, r1
 8007b12:	e9c4 6740 	strd	r6, r7, [r4, #256]	@ 0x100
 8007b16:	e759      	b.n	80079cc <PID_Calulate+0x404>
 8007b18:	00000000 	.word	0x00000000
 8007b1c:	4062c000 	.word	0x4062c000
 8007b20:	00000000 	.word	0x00000000
 8007b24:	c08f4000 	.word	0xc08f4000
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	407f2000 	.word	0x407f2000
 8007b30:	40690000 	.word	0x40690000
 8007b34:	40180000 	.word	0x40180000
 8007b38:	200005e0 	.word	0x200005e0
 8007b3c:	40012c00 	.word	0x40012c00
 8007b40:	408f4000 	.word	0x408f4000
        LimitMax(pid->sumOutput_Pos,set_speed);
 8007b44:	6828      	ldr	r0, [r5, #0]
 8007b46:	4240      	negs	r0, r0
 8007b48:	f7f8 fd10 	bl	800056c <__aeabi_i2d>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 ffe6 	bl	8000b24 <__aeabi_dcmplt>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f43f af10 	beq.w	800797e <PID_Calulate+0x3b6>
 8007b5e:	6828      	ldr	r0, [r5, #0]
 8007b60:	4240      	negs	r0, r0
 8007b62:	f7f8 fd03 	bl	800056c <__aeabi_i2d>
 8007b66:	4606      	mov	r6, r0
 8007b68:	460f      	mov	r7, r1
 8007b6a:	e9c4 6742 	strd	r6, r7, [r4, #264]	@ 0x108
 8007b6e:	e706      	b.n	800797e <PID_Calulate+0x3b6>
                else if(fabs(pid->E_Sped) >= 2 && fabs(pid->E_Sped) < 10)
 8007b70:	2200      	movs	r2, #0
 8007b72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	f7f8 ffe7 	bl	8000b4c <__aeabi_dcmpge>
 8007b7e:	b1a8      	cbz	r0, 8007bac <PID_Calulate+0x5e4>
 8007b80:	2200      	movs	r2, #0
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	4bb0      	ldr	r3, [pc, #704]	@ (8007e48 <PID_Calulate+0x880>)
 8007b88:	f7f8 ffcc 	bl	8000b24 <__aeabi_dcmplt>
 8007b8c:	b170      	cbz	r0, 8007bac <PID_Calulate+0x5e4>
                    pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def-11 : pid->Ki_def-4;
 8007b8e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8007b92:	4640      	mov	r0, r8
 8007b94:	2b63      	cmp	r3, #99	@ 0x63
 8007b96:	4649      	mov	r1, r9
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	bf8c      	ite	hi
 8007b9e:	4bab      	ldrhi	r3, [pc, #684]	@ (8007e4c <PID_Calulate+0x884>)
 8007ba0:	4bab      	ldrls	r3, [pc, #684]	@ (8007e50 <PID_Calulate+0x888>)
 8007ba2:	f7f8 fb95 	bl	80002d0 <__aeabi_dsub>
                    pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def-7 : pid->Ki_def-2.0;
 8007ba6:	e9c4 012e 	strd	r0, r1, [r4, #184]	@ 0xb8
 8007baa:	e581      	b.n	80076b0 <PID_Calulate+0xe8>
                else if(fabs(pid->E_Sped) >= 10 && fabs(pid->E_Sped) < 30)
 8007bac:	2200      	movs	r2, #0
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	4ba5      	ldr	r3, [pc, #660]	@ (8007e48 <PID_Calulate+0x880>)
 8007bb4:	f7f8 ffca 	bl	8000b4c <__aeabi_dcmpge>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f040 8083 	bne.w	8007cc4 <PID_Calulate+0x6fc>
                else if(fabs(pid->E_Sped) >= 30 && fabs(pid->E_Sped) < 50)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4ba3      	ldr	r3, [pc, #652]	@ (8007e54 <PID_Calulate+0x88c>)
 8007bc6:	f7f8 ffc1 	bl	8000b4c <__aeabi_dcmpge>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f000 80a2 	beq.w	8007d14 <PID_Calulate+0x74c>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8007e58 <PID_Calulate+0x890>)
 8007bd8:	f7f8 ffa4 	bl	8000b24 <__aeabi_dcmplt>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f000 8099 	beq.w	8007d14 <PID_Calulate+0x74c>
                    pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def-9 : pid->Ki_def-3;
 8007be2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8007be6:	4640      	mov	r0, r8
 8007be8:	2b63      	cmp	r3, #99	@ 0x63
 8007bea:	4649      	mov	r1, r9
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	bf8c      	ite	hi
 8007bf2:	4b9a      	ldrhi	r3, [pc, #616]	@ (8007e5c <PID_Calulate+0x894>)
 8007bf4:	4b9a      	ldrls	r3, [pc, #616]	@ (8007e60 <PID_Calulate+0x898>)
 8007bf6:	f7f8 fb6b 	bl	80002d0 <__aeabi_dsub>
 8007bfa:	e7d4      	b.n	8007ba6 <PID_Calulate+0x5de>
                LimitMax(pid->Output_Sped,maxOuput);
 8007bfc:	f20f 2930 	addw	r9, pc, #560	@ 0x230
 8007c00:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007c04:	4630      	mov	r0, r6
 8007c06:	4642      	mov	r2, r8
 8007c08:	464b      	mov	r3, r9
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f8 ff8a 	bl	8000b24 <__aeabi_dcmplt>
                pid->E2_Sped = pid->E1_Sped;
 8007c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c14:	e9c4 231e 	strd	r2, r3, [r4, #120]	@ 0x78
                LimitMax(pid->Output_Sped,maxOuput);
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d169      	bne.n	8007cf0 <PID_Calulate+0x728>
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
                pid->lastOutput_Sped = pid->Output_Sped;
 8007c20:	e9c4 6746 	strd	r6, r7, [r4, #280]	@ 0x118
                pid->E1_Sped = pid->E_Sped;
 8007c24:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	@ 0x68
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 8007c28:	f000 fb80 	bl	800832c <round>
 8007c2c:	f7f8 ffa2 	bl	8000b74 <__aeabi_d2iz>
 8007c30:	b200      	sxth	r0, r0
                PID_Motor_Ctrl(pid->Motor_Duty);
 8007c32:	2800      	cmp	r0, #0
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 8007c34:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
                PID_Motor_Ctrl(pid->Motor_Duty);
 8007c38:	f6bf adc1 	bge.w	80077be <PID_Calulate+0x1f6>
 8007c3c:	4240      	negs	r0, r0
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4b88      	ldr	r3, [pc, #544]	@ (8007e64 <PID_Calulate+0x89c>)
 8007c42:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c44:	6358      	str	r0, [r3, #52]	@ 0x34
 8007c46:	e5be      	b.n	80077c6 <PID_Calulate+0x1fe>
        LimitMax(pid->Motor_Duty, maxOuput);
 8007c48:	f510 7f79 	cmn.w	r0, #996	@ 0x3e4
 8007c4c:	f64f 431d 	movw	r3, #64541	@ 0xfc1d
 8007c50:	dc5b      	bgt.n	8007d0a <PID_Calulate+0x742>
 8007c52:	f240 30e3 	movw	r0, #995	@ 0x3e3
 8007c56:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
        PID_Motor_Ctrl(pid->Motor_Duty);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4b81      	ldr	r3, [pc, #516]	@ (8007e64 <PID_Calulate+0x89c>)
 8007c5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c60:	6358      	str	r0, [r3, #52]	@ 0x34
}
 8007c62:	e4d3      	b.n	800760c <PID_Calulate+0x44>
        pid->Motor_Duty = (pid->Dir == 0) ? ((int16_t)*Value_Set * Duty_scale) : -((int16_t)*Value_Set * Duty_scale);
 8007c64:	f7f9 f868 	bl	8000d38 <__aeabi_i2f>
 8007c68:	497f      	ldr	r1, [pc, #508]	@ (8007e68 <PID_Calulate+0x8a0>)
 8007c6a:	f7f8 fa79 	bl	8000160 <__aeabi_fmul>
 8007c6e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007c72:	f7f9 f8b5 	bl	8000de0 <__aeabi_f2iz>
 8007c76:	b200      	sxth	r0, r0
 8007c78:	e5be      	b.n	80077f8 <PID_Calulate+0x230>
                    else if(pid->V_set >= 10 && pid->V_set < 50)
 8007c7a:	f1aa 030a 	sub.w	r3, sl, #10
 8007c7e:	2b27      	cmp	r3, #39	@ 0x27
 8007c80:	f200 815b 	bhi.w	8007f3a <PID_Calulate+0x972>
                        pid->Ki_Sped = pid->Ki_def-0.5;
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4b78      	ldr	r3, [pc, #480]	@ (8007e6c <PID_Calulate+0x8a4>)
 8007c8c:	f7f8 fb20 	bl	80002d0 <__aeabi_dsub>
 8007c90:	e9c4 012e 	strd	r0, r1, [r4, #184]	@ 0xb8
 8007c94:	e50c      	b.n	80076b0 <PID_Calulate+0xe8>
        pid->Kp_Sped = pid->Kp_def + 7.0f, pid->Ki_Sped = pid->Ki_def + 3.0f;
 8007c96:	4608      	mov	r0, r1
 8007c98:	4b75      	ldr	r3, [pc, #468]	@ (8007e70 <PID_Calulate+0x8a8>)
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f7f8 fb19 	bl	80002d4 <__adddf3>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007caa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cae:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8007e60 <PID_Calulate+0x898>)
 8007cb6:	f7f8 fb0d 	bl	80002d4 <__adddf3>
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	e9c4 672e 	strd	r6, r7, [r4, #184]	@ 0xb8
 8007cc2:	e5fd      	b.n	80078c0 <PID_Calulate+0x2f8>
                else if(fabs(pid->E_Sped) >= 10 && fabs(pid->E_Sped) < 30)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4639      	mov	r1, r7
 8007cca:	4b62      	ldr	r3, [pc, #392]	@ (8007e54 <PID_Calulate+0x88c>)
 8007ccc:	f7f8 ff2a 	bl	8000b24 <__aeabi_dcmplt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	f43f af74 	beq.w	8007bbe <PID_Calulate+0x5f6>
                    pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def-10 : pid->Ki_def-3.5;
 8007cd6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8007cda:	4640      	mov	r0, r8
 8007cdc:	2b63      	cmp	r3, #99	@ 0x63
 8007cde:	4649      	mov	r1, r9
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	bf8c      	ite	hi
 8007ce6:	4b58      	ldrhi	r3, [pc, #352]	@ (8007e48 <PID_Calulate+0x880>)
 8007ce8:	4b62      	ldrls	r3, [pc, #392]	@ (8007e74 <PID_Calulate+0x8ac>)
 8007cea:	f7f8 faf1 	bl	80002d0 <__aeabi_dsub>
 8007cee:	e75a      	b.n	8007ba6 <PID_Calulate+0x5de>
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 8007cf0:	f64f 431d 	movw	r3, #64541	@ 0xfc1d
 8007cf4:	f240 30e3 	movw	r0, #995	@ 0x3e3
                LimitMax(pid->Output_Sped,maxOuput);
 8007cf8:	e9c4 8944 	strd	r8, r9, [r4, #272]	@ 0x110
                pid->lastOutput_Sped = pid->Output_Sped;
 8007cfc:	e9c4 8946 	strd	r8, r9, [r4, #280]	@ 0x118
                pid->E1_Sped = pid->E_Sped;
 8007d00:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	@ 0x68
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 8007d04:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
                PID_Motor_Ctrl(pid->Motor_Duty);
 8007d08:	e799      	b.n	8007c3e <PID_Calulate+0x676>
        PID_Motor_Ctrl(pid->Motor_Duty);
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f6bf ad7f 	bge.w	800780e <PID_Calulate+0x246>
 8007d10:	4240      	negs	r0, r0
 8007d12:	e7a2      	b.n	8007c5a <PID_Calulate+0x692>
                else if(fabs(pid->E_Sped) >= 50 && fabs(pid->E_Sped) < 100)
 8007d14:	2200      	movs	r2, #0
 8007d16:	4630      	mov	r0, r6
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e58 <PID_Calulate+0x890>)
 8007d1c:	f7f8 ff16 	bl	8000b4c <__aeabi_dcmpge>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d063      	beq.n	8007dec <PID_Calulate+0x824>
 8007d24:	2200      	movs	r2, #0
 8007d26:	4630      	mov	r0, r6
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4b53      	ldr	r3, [pc, #332]	@ (8007e78 <PID_Calulate+0x8b0>)
 8007d2c:	f7f8 fefa 	bl	8000b24 <__aeabi_dcmplt>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d05b      	beq.n	8007dec <PID_Calulate+0x824>
                    pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def-8 : pid->Ki_def-2.5;
 8007d34:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8007d38:	4640      	mov	r0, r8
 8007d3a:	2b63      	cmp	r3, #99	@ 0x63
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	bf8c      	ite	hi
 8007d44:	4b4d      	ldrhi	r3, [pc, #308]	@ (8007e7c <PID_Calulate+0x8b4>)
 8007d46:	4b4e      	ldrls	r3, [pc, #312]	@ (8007e80 <PID_Calulate+0x8b8>)
 8007d48:	f7f8 fac2 	bl	80002d0 <__aeabi_dsub>
 8007d4c:	e72b      	b.n	8007ba6 <PID_Calulate+0x5de>
                    htim4.Init.Period = 10000-1;
 8007d4e:	f242 710f 	movw	r1, #9999	@ 0x270f
                    pid->Delta_T = 0.005;
 8007d52:	a339      	add	r3, pc, #228	@ (adr r3, 8007e38 <PID_Calulate+0x870>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
                    htim4.Init.Period = 10000-1;
 8007d58:	484a      	ldr	r0, [pc, #296]	@ (8007e84 <PID_Calulate+0x8bc>)
                    pid->Delta_T = 0.005;
 8007d5a:	e9c4 2308 	strd	r2, r3, [r4, #32]
                    htim4.Init.Period = 10000-1;
 8007d5e:	60c1      	str	r1, [r0, #12]
                    HAL_TIM_Base_Init(&htim4);
 8007d60:	f7fb fd36 	bl	80037d0 <HAL_TIM_Base_Init>
                    pid->Motor_Duty = (int16_t)pid->Output_Sped;
 8007d64:	e9d4 0144 	ldrd	r0, r1, [r4, #272]	@ 0x110
                    pid->P_Pos = pid->I_Pos = pid->D_Pos = 0.0f;
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e9c4 2336 	strd	r2, r3, [r4, #216]	@ 0xd8
 8007d70:	e9c4 2334 	strd	r2, r3, [r4, #208]	@ 0xd0
 8007d74:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
                    pid->Output_Pos = 0.0f;
 8007d78:	e9c4 2340 	strd	r2, r3, [r4, #256]	@ 0x100
                    pid->Motor_Duty = (int16_t)pid->Output_Sped;
 8007d7c:	f7f8 fefa 	bl	8000b74 <__aeabi_d2iz>
 8007d80:	b200      	sxth	r0, r0
                    PID_Motor_Ctrl(pid->Motor_Duty);
 8007d82:	2800      	cmp	r0, #0
                    pid->Motor_Duty = (int16_t)pid->Output_Sped;
 8007d84:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
                    PID_Motor_Ctrl(pid->Motor_Duty);
 8007d88:	f2c0 8111 	blt.w	8007fae <PID_Calulate+0x9e6>
 8007d8c:	4b35      	ldr	r3, [pc, #212]	@ (8007e64 <PID_Calulate+0x89c>)
 8007d8e:	635f      	str	r7, [r3, #52]	@ 0x34
 8007d90:	6398      	str	r0, [r3, #56]	@ 0x38
                    first_Lock = 0;
 8007d92:	2300      	movs	r3, #0
                pid->V_set = (*Value_Set * pid->RPM)/Speed_scale;
 8007d94:	f8b4 b046 	ldrh.w	fp, [r4, #70]	@ 0x46
                    first_Lock = 0;
 8007d98:	702b      	strb	r3, [r5, #0]
 8007d9a:	e45d      	b.n	8007658 <PID_Calulate+0x90>
    else if(fabs(pid->V_now) < 150 && fabs(pid->V_now) >= 100)
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	a328      	add	r3, pc, #160	@ (adr r3, 8007e40 <PID_Calulate+0x878>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 febd 	bl	8000b24 <__aeabi_dcmplt>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d072      	beq.n	8007e94 <PID_Calulate+0x8cc>
 8007dae:	2200      	movs	r2, #0
 8007db0:	4630      	mov	r0, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	4b30      	ldr	r3, [pc, #192]	@ (8007e78 <PID_Calulate+0x8b0>)
 8007db6:	f7f8 fec9 	bl	8000b4c <__aeabi_dcmpge>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d06a      	beq.n	8007e94 <PID_Calulate+0x8cc>
        pid->Kp_Sped = pid->Kp_def + 5.0f, pid->Ki_Sped = pid->Ki_def + 1.5f;
 8007dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4b30      	ldr	r3, [pc, #192]	@ (8007e88 <PID_Calulate+0x8c0>)
 8007dc6:	f7f8 fa85 	bl	80002d4 <__adddf3>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dd6:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8007e8c <PID_Calulate+0x8c4>)
 8007dde:	f7f8 fa79 	bl	80002d4 <__adddf3>
 8007de2:	4606      	mov	r6, r0
 8007de4:	460f      	mov	r7, r1
 8007de6:	e9c4 672e 	strd	r6, r7, [r4, #184]	@ 0xb8
 8007dea:	e569      	b.n	80078c0 <PID_Calulate+0x2f8>
                else if(fabs(pid->E_Sped) >= 100 && fabs(pid->E_Sped) < 200)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	4b21      	ldr	r3, [pc, #132]	@ (8007e78 <PID_Calulate+0x8b0>)
 8007df4:	f7f8 feaa 	bl	8000b4c <__aeabi_dcmpge>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f43f ac57 	beq.w	80076ac <PID_Calulate+0xe4>
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	2200      	movs	r2, #0
 8007e04:	4b22      	ldr	r3, [pc, #136]	@ (8007e90 <PID_Calulate+0x8c8>)
 8007e06:	f7f8 fe8d 	bl	8000b24 <__aeabi_dcmplt>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	f43f ac4e 	beq.w	80076ac <PID_Calulate+0xe4>
                    pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def-7 : pid->Ki_def-2.0;
 8007e10:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8007e14:	4640      	mov	r0, r8
 8007e16:	2b63      	cmp	r3, #99	@ 0x63
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	bf94      	ite	ls
 8007e20:	f04f 4380 	movls.w	r3, #1073741824	@ 0x40000000
 8007e24:	4b12      	ldrhi	r3, [pc, #72]	@ (8007e70 <PID_Calulate+0x8a8>)
 8007e26:	f7f8 fa53 	bl	80002d0 <__aeabi_dsub>
 8007e2a:	e6bc      	b.n	8007ba6 <PID_Calulate+0x5de>
 8007e2c:	f3af 8000 	nop.w
 8007e30:	00000000 	.word	0x00000000
 8007e34:	c08f1800 	.word	0xc08f1800
 8007e38:	47ae147b 	.word	0x47ae147b
 8007e3c:	3f747ae1 	.word	0x3f747ae1
 8007e40:	00000000 	.word	0x00000000
 8007e44:	4062c000 	.word	0x4062c000
 8007e48:	40240000 	.word	0x40240000
 8007e4c:	40260000 	.word	0x40260000
 8007e50:	40100000 	.word	0x40100000
 8007e54:	403e0000 	.word	0x403e0000
 8007e58:	40490000 	.word	0x40490000
 8007e5c:	40220000 	.word	0x40220000
 8007e60:	40080000 	.word	0x40080000
 8007e64:	40012c00 	.word	0x40012c00
 8007e68:	407eb852 	.word	0x407eb852
 8007e6c:	3fe00000 	.word	0x3fe00000
 8007e70:	401c0000 	.word	0x401c0000
 8007e74:	400c0000 	.word	0x400c0000
 8007e78:	40590000 	.word	0x40590000
 8007e7c:	40200000 	.word	0x40200000
 8007e80:	40040000 	.word	0x40040000
 8007e84:	20000640 	.word	0x20000640
 8007e88:	40140000 	.word	0x40140000
 8007e8c:	3ff80000 	.word	0x3ff80000
 8007e90:	40690000 	.word	0x40690000
    else if(fabs(pid->V_now) < 100 && fabs(pid->V_now) >= 30)
 8007e94:	2200      	movs	r2, #0
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	4ba5      	ldr	r3, [pc, #660]	@ (8008130 <PID_Calulate+0xb68>)
        pid->Kp_Sped = pid->Kp_def - 4.0f, pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def - 2.0f : pid->Ki_def - 3.0f;
 8007e9c:	f8b4 8048 	ldrh.w	r8, [r4, #72]	@ 0x48
    else if(fabs(pid->V_now) < 100 && fabs(pid->V_now) >= 30)
 8007ea0:	f7f8 fe40 	bl	8000b24 <__aeabi_dcmplt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d058      	beq.n	8007f5a <PID_Calulate+0x992>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	4ba1      	ldr	r3, [pc, #644]	@ (8008134 <PID_Calulate+0xb6c>)
 8007eb0:	f7f8 fe4c 	bl	8000b4c <__aeabi_dcmpge>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d050      	beq.n	8007f5a <PID_Calulate+0x992>
        pid->Kp_Sped = pid->Kp_def - 4.0f, pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def - 2.0f : pid->Ki_def - 3.0f;
 8007eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4b9e      	ldr	r3, [pc, #632]	@ (8008138 <PID_Calulate+0xb70>)
 8007ec0:	f7f8 fa06 	bl	80002d0 <__aeabi_dsub>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ecc:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8007ed0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ed4:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f240 80fa 	bls.w	80080d4 <PID_Calulate+0xb0c>
 8007ee0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ee4:	f7f8 f9f4 	bl	80002d0 <__aeabi_dsub>
 8007ee8:	4606      	mov	r6, r0
 8007eea:	460f      	mov	r7, r1
        pid->Kp_Sped = pid->Kp_def - 3.0f, pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def - 3.0f : pid->Ki_def - 4.0f;
 8007eec:	e9c4 672e 	strd	r6, r7, [r4, #184]	@ 0xb8
 8007ef0:	e4e6      	b.n	80078c0 <PID_Calulate+0x2f8>
                LimitMax(pid->Output_Pos,(maxOuput+1)/2);
 8007ef2:	f20f 2904 	addw	r9, pc, #516	@ 0x204
 8007ef6:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007efa:	4630      	mov	r0, r6
 8007efc:	4639      	mov	r1, r7
 8007efe:	4642      	mov	r2, r8
 8007f00:	464b      	mov	r3, r9
 8007f02:	f7f8 fe0f 	bl	8000b24 <__aeabi_dcmplt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f040 80ae 	bne.w	8008068 <PID_Calulate+0xaa0>
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
                pid->Output_Pos = (pid->Kp_Pos * pid->P_Pos) +
 8007f10:	e9c4 6740 	strd	r6, r7, [r4, #256]	@ 0x100
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 8007f14:	f000 fa0a 	bl	800832c <round>
 8007f18:	f7f8 fe2c 	bl	8000b74 <__aeabi_d2iz>
 8007f1c:	b203      	sxth	r3, r0
                PID_Motor_Ctrl(pid->Motor_Duty);
 8007f1e:	2b00      	cmp	r3, #0
                pid->E1_Pos = pid->E_Pos;
 8007f20:	e9c4 ab18 	strd	sl, fp, [r4, #96]	@ 0x60
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 8007f24:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
                PID_Motor_Ctrl(pid->Motor_Duty);
 8007f28:	f6bf addb 	bge.w	8007ae2 <PID_Calulate+0x51a>
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4a83      	ldr	r2, [pc, #524]	@ (800813c <PID_Calulate+0xb74>)
 8007f30:	425b      	negs	r3, r3
 8007f32:	6391      	str	r1, [r2, #56]	@ 0x38
 8007f34:	6353      	str	r3, [r2, #52]	@ 0x34
 8007f36:	f7ff bb69 	b.w	800760c <PID_Calulate+0x44>
                    else if(pid->V_set >= 50 && pid->V_set < 100)
 8007f3a:	f1aa 0332 	sub.w	r3, sl, #50	@ 0x32
 8007f3e:	2b31      	cmp	r3, #49	@ 0x31
 8007f40:	f200 809c 	bhi.w	800807c <PID_Calulate+0xab4>
                        pid->Ki_Sped = pid->Ki_def-0.6;
 8007f44:	a36e      	add	r3, pc, #440	@ (adr r3, 8008100 <PID_Calulate+0xb38>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 f9bf 	bl	80002d0 <__aeabi_dsub>
 8007f52:	e9c4 012e 	strd	r0, r1, [r4, #184]	@ 0xb8
 8007f56:	f7ff bbab 	b.w	80076b0 <PID_Calulate+0xe8>
    else if(fabs(pid->V_now) < 30 && fabs(pid->V_now) >= 15)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4b74      	ldr	r3, [pc, #464]	@ (8008134 <PID_Calulate+0xb6c>)
 8007f62:	f7f8 fddf 	bl	8000b24 <__aeabi_dcmplt>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d04d      	beq.n	8008006 <PID_Calulate+0xa3e>
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4b73      	ldr	r3, [pc, #460]	@ (8008140 <PID_Calulate+0xb78>)
 8007f72:	f7f8 fdeb 	bl	8000b4c <__aeabi_dcmpge>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d045      	beq.n	8008006 <PID_Calulate+0xa3e>
        pid->Kp_Sped = pid->Kp_def - 3.0f, pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def - 3.0f : pid->Ki_def - 4.0f;
 8007f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4b70      	ldr	r3, [pc, #448]	@ (8008144 <PID_Calulate+0xb7c>)
 8007f82:	f7f8 f9a5 	bl	80002d0 <__aeabi_dsub>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f8e:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8007f92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f96:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f200 8099 	bhi.w	80080d4 <PID_Calulate+0xb0c>
 8007fa2:	4b65      	ldr	r3, [pc, #404]	@ (8008138 <PID_Calulate+0xb70>)
 8007fa4:	f7f8 f994 	bl	80002d0 <__aeabi_dsub>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	460f      	mov	r7, r1
 8007fac:	e79e      	b.n	8007eec <PID_Calulate+0x924>
                    PID_Motor_Ctrl(pid->Motor_Duty);
 8007fae:	4b63      	ldr	r3, [pc, #396]	@ (800813c <PID_Calulate+0xb74>)
 8007fb0:	4240      	negs	r0, r0
 8007fb2:	639f      	str	r7, [r3, #56]	@ 0x38
 8007fb4:	6358      	str	r0, [r3, #52]	@ 0x34
 8007fb6:	e6ec      	b.n	8007d92 <PID_Calulate+0x7ca>
                    first_Lock = 1; 
 8007fb8:	2301      	movs	r3, #1
 8007fba:	702b      	strb	r3, [r5, #0]
                    htim4.Init.Period = 100-1;
 8007fbc:	2363      	movs	r3, #99	@ 0x63
 8007fbe:	4862      	ldr	r0, [pc, #392]	@ (8008148 <PID_Calulate+0xb80>)
 8007fc0:	60c3      	str	r3, [r0, #12]
                    pid->Delta_T = 0.00005;
 8007fc2:	a351      	add	r3, pc, #324	@ (adr r3, 8008108 <PID_Calulate+0xb40>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	e9c4 2308 	strd	r2, r3, [r4, #32]
                    HAL_TIM_Base_Init(&htim4);
 8007fcc:	f7fb fc00 	bl	80037d0 <HAL_TIM_Base_Init>
                    pid->Motor_Duty = (int16_t)pid->Output_Pos;
 8007fd0:	e9d4 0140 	ldrd	r0, r1, [r4, #256]	@ 0x100
                    pid->P_Sped = pid->I_Sped = pid->D_Sped = 0.0f;
 8007fd4:	e9c4 893c 	strd	r8, r9, [r4, #240]	@ 0xf0
 8007fd8:	e9c4 893a 	strd	r8, r9, [r4, #232]	@ 0xe8
 8007fdc:	e9c4 8938 	strd	r8, r9, [r4, #224]	@ 0xe0
                    pid->Output_Sped = 0.0f;
 8007fe0:	e9c4 8944 	strd	r8, r9, [r4, #272]	@ 0x110
                    pid->lastOutput_Sped = pid->Output_Sped;
 8007fe4:	e9c4 8946 	strd	r8, r9, [r4, #280]	@ 0x118
                    pid->EnC_set = 0;
 8007fe8:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
                    pid->Motor_Duty = (int16_t)pid->Output_Pos;
 8007fec:	f7f8 fdc2 	bl	8000b74 <__aeabi_d2iz>
 8007ff0:	b203      	sxth	r3, r0
                    PID_Motor_Ctrl(pid->Motor_Duty);
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	4a51      	ldr	r2, [pc, #324]	@ (800813c <PID_Calulate+0xb74>)
                    pid->Motor_Duty = (int16_t)pid->Output_Pos;
 8007ff6:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
                    PID_Motor_Ctrl(pid->Motor_Duty);
 8007ffa:	db55      	blt.n	80080a8 <PID_Calulate+0xae0>
 8007ffc:	f8c2 a034 	str.w	sl, [r2, #52]	@ 0x34
 8008000:	6393      	str	r3, [r2, #56]	@ 0x38
 8008002:	f7ff bb55 	b.w	80076b0 <PID_Calulate+0xe8>
        pid->Ki_Sped = pid->Ki_def - (double)lock_lv;
 8008006:	fa5f f089 	uxtb.w	r0, r9
 800800a:	f7f8 fa9f 	bl	800054c <__aeabi_ui2d>
            pid->Kp_Pos = (1.6f - (double)lock_lv/10);
 800800e:	2200      	movs	r2, #0
 8008010:	4b4e      	ldr	r3, [pc, #312]	@ (800814c <PID_Calulate+0xb84>)
        pid->Ki_Sped = pid->Ki_def - (double)lock_lv;
 8008012:	4606      	mov	r6, r0
 8008014:	460f      	mov	r7, r1
            pid->Kp_Pos = (1.6f - (double)lock_lv/10);
 8008016:	f7f8 fc3d 	bl	8000894 <__aeabi_ddiv>
        if(pid->PPR >= 100)
 800801a:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
            pid->Kp_Pos = (1.6f - (double)lock_lv/10);
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
        if(pid->PPR >= 100)
 8008022:	d93a      	bls.n	800809a <PID_Calulate+0xad2>
            pid->Kp_Pos = (1.6f - (double)lock_lv/10);
 8008024:	a13a      	add	r1, pc, #232	@ (adr r1, 8008110 <PID_Calulate+0xb48>)
 8008026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800802a:	f7f8 f951 	bl	80002d0 <__aeabi_dsub>
 800802e:	4680      	mov	r8, r0
 8008030:	4689      	mov	r9, r1
        pid->Ki_Sped = pid->Ki_def - (double)lock_lv;
 8008032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008036:	4632      	mov	r2, r6
 8008038:	463b      	mov	r3, r7
 800803a:	f7f8 f949 	bl	80002d0 <__aeabi_dsub>
 800803e:	468c      	mov	ip, r1
        pid->Kp_Sped = pid->Kp_def - (double)lock_lv;
 8008040:	4632      	mov	r2, r6
 8008042:	463b      	mov	r3, r7
        pid->Ki_Sped = pid->Ki_def - (double)lock_lv;
 8008044:	4683      	mov	fp, r0
        pid->Kp_Sped = pid->Kp_def - (double)lock_lv;
 8008046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        pid->Ki_Sped = pid->Ki_def - (double)lock_lv;
 800804a:	4667      	mov	r7, ip
        pid->Kp_Sped = pid->Kp_def - (double)lock_lv;
 800804c:	f7f8 f940 	bl	80002d0 <__aeabi_dsub>
        pid->Ki_Sped = pid->Ki_def - (double)lock_lv;
 8008050:	465e      	mov	r6, fp
        pid->Kp_Sped = pid->Kp_def - (double)lock_lv;
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
            pid->Kp_Pos = (1.6f - (double)lock_lv/10);
 8008056:	e9c4 8926 	strd	r8, r9, [r4, #152]	@ 0x98
        pid->Ki_Sped = pid->Ki_def - (double)lock_lv;
 800805a:	e9c4 672e 	strd	r6, r7, [r4, #184]	@ 0xb8
        pid->Kp_Sped = pid->Kp_def - (double)lock_lv;
 800805e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008062:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
 8008066:	e42b      	b.n	80078c0 <PID_Calulate+0x2f8>
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 8008068:	f64f 620e 	movw	r2, #65038	@ 0xfe0e
                LimitMax(pid->Output_Pos,(maxOuput+1)/2);
 800806c:	e9c4 8940 	strd	r8, r9, [r4, #256]	@ 0x100
                pid->E1_Pos = pid->E_Pos;
 8008070:	e9c4 ab18 	strd	sl, fp, [r4, #96]	@ 0x60
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 8008074:	4b36      	ldr	r3, [pc, #216]	@ (8008150 <PID_Calulate+0xb88>)
 8008076:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
                PID_Motor_Ctrl(pid->Motor_Duty);
 800807a:	e757      	b.n	8007f2c <PID_Calulate+0x964>
                    else if(pid->V_set >= 100 && pid->V_set < 150)
 800807c:	f1aa 0364 	sub.w	r3, sl, #100	@ 0x64
 8008080:	2b31      	cmp	r3, #49	@ 0x31
 8008082:	d817      	bhi.n	80080b4 <PID_Calulate+0xaec>
                        pid->Ki_Sped = pid->Ki_def-0.7;
 8008084:	a324      	add	r3, pc, #144	@ (adr r3, 8008118 <PID_Calulate+0xb50>)
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	4640      	mov	r0, r8
 800808c:	4649      	mov	r1, r9
 800808e:	f7f8 f91f 	bl	80002d0 <__aeabi_dsub>
 8008092:	e9c4 012e 	strd	r0, r1, [r4, #184]	@ 0xb8
 8008096:	f7ff bb0b 	b.w	80076b0 <PID_Calulate+0xe8>
            pid->Kp_Pos = (16.0f - (double)lock_lv/10);
 800809a:	2000      	movs	r0, #0
 800809c:	492d      	ldr	r1, [pc, #180]	@ (8008154 <PID_Calulate+0xb8c>)
 800809e:	f7f8 f917 	bl	80002d0 <__aeabi_dsub>
 80080a2:	4680      	mov	r8, r0
 80080a4:	4689      	mov	r9, r1
 80080a6:	e7c4      	b.n	8008032 <PID_Calulate+0xa6a>
                    PID_Motor_Ctrl(pid->Motor_Duty);
 80080a8:	425b      	negs	r3, r3
 80080aa:	f8c2 a038 	str.w	sl, [r2, #56]	@ 0x38
 80080ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80080b0:	f7ff bafe 	b.w	80076b0 <PID_Calulate+0xe8>
                    else if(pid->V_set >= 150 && pid->V_set < 200)
 80080b4:	f1aa 0a96 	sub.w	sl, sl, #150	@ 0x96
 80080b8:	f1ba 0f31 	cmp.w	sl, #49	@ 0x31
                        pid->Ki_Sped = pid->Ki_def-0.8;
 80080bc:	4640      	mov	r0, r8
 80080be:	4649      	mov	r1, r9
                    else if(pid->V_set >= 150 && pid->V_set < 200)
 80080c0:	d80e      	bhi.n	80080e0 <PID_Calulate+0xb18>
                        pid->Ki_Sped = pid->Ki_def-0.8;
 80080c2:	a317      	add	r3, pc, #92	@ (adr r3, 8008120 <PID_Calulate+0xb58>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 f902 	bl	80002d0 <__aeabi_dsub>
 80080cc:	e9c4 012e 	strd	r0, r1, [r4, #184]	@ 0xb8
 80080d0:	f7ff baee 	b.w	80076b0 <PID_Calulate+0xe8>
        pid->Kp_Sped = pid->Kp_def - 3.0f, pid->Ki_Sped = (pid->PPR >= 100) ? pid->Ki_def - 3.0f : pid->Ki_def - 4.0f;
 80080d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008144 <PID_Calulate+0xb7c>)
 80080d6:	f7f8 f8fb 	bl	80002d0 <__aeabi_dsub>
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	e705      	b.n	8007eec <PID_Calulate+0x924>
                        pid->Ki_Sped = pid->Ki_def-0.9;
 80080e0:	a311      	add	r3, pc, #68	@ (adr r3, 8008128 <PID_Calulate+0xb60>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	f7f8 f8f3 	bl	80002d0 <__aeabi_dsub>
 80080ea:	e9c4 012e 	strd	r0, r1, [r4, #184]	@ 0xb8
 80080ee:	f7ff badf 	b.w	80076b0 <PID_Calulate+0xe8>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	00000000 	.word	0x00000000
 80080fc:	c07f2000 	.word	0xc07f2000
 8008100:	33333333 	.word	0x33333333
 8008104:	3fe33333 	.word	0x3fe33333
 8008108:	eb1c432d 	.word	0xeb1c432d
 800810c:	3f0a36e2 	.word	0x3f0a36e2
 8008110:	a0000000 	.word	0xa0000000
 8008114:	3ff99999 	.word	0x3ff99999
 8008118:	66666666 	.word	0x66666666
 800811c:	3fe66666 	.word	0x3fe66666
 8008120:	9999999a 	.word	0x9999999a
 8008124:	3fe99999 	.word	0x3fe99999
 8008128:	cccccccd 	.word	0xcccccccd
 800812c:	3feccccc 	.word	0x3feccccc
 8008130:	40590000 	.word	0x40590000
 8008134:	403e0000 	.word	0x403e0000
 8008138:	40100000 	.word	0x40100000
 800813c:	40012c00 	.word	0x40012c00
 8008140:	402e0000 	.word	0x402e0000
 8008144:	40080000 	.word	0x40080000
 8008148:	20000640 	.word	0x20000640
 800814c:	40240000 	.word	0x40240000
 8008150:	fffffe0e 	.word	0xfffffe0e
 8008154:	40300000 	.word	0x40300000

08008158 <PID_Init>:

void PID_Init(PID_typedef *pid, uint8_t Mode)
{
 8008158:	b410      	push	{r4}
    pid->f_param_init = PID_param_init;
    pid->f_pid_set    = PID_set;
 800815a:	4a05      	ldr	r2, [pc, #20]	@ (8008170 <PID_Init+0x18>)
    pid->f_param_init = PID_param_init;
 800815c:	4c05      	ldr	r4, [pc, #20]	@ (8008174 <PID_Init+0x1c>)
    pid->f_cal_pid	  = PID_Calulate;
 800815e:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <PID_Init+0x20>)
    pid->f_pid_set    = PID_set;
 8008160:	e9c0 4248 	strd	r4, r2, [r0, #288]	@ 0x120
    pid->f_cal_pid	  = PID_Calulate;
 8008164:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
    pid->mode		  = Mode;
}
 8008168:	bc10      	pop	{r4}
    pid->mode		  = Mode;
 800816a:	7001      	strb	r1, [r0, #0]
}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	08007575 	.word	0x08007575
 8008174:	08007411 	.word	0x08007411
 8008178:	080075c9 	.word	0x080075c9

0800817c <memset>:
 800817c:	4603      	mov	r3, r0
 800817e:	4402      	add	r2, r0
 8008180:	4293      	cmp	r3, r2
 8008182:	d100      	bne.n	8008186 <memset+0xa>
 8008184:	4770      	bx	lr
 8008186:	f803 1b01 	strb.w	r1, [r3], #1
 800818a:	e7f9      	b.n	8008180 <memset+0x4>

0800818c <_reclaim_reent>:
 800818c:	4b29      	ldr	r3, [pc, #164]	@ (8008234 <_reclaim_reent+0xa8>)
 800818e:	b570      	push	{r4, r5, r6, lr}
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4604      	mov	r4, r0
 8008194:	4283      	cmp	r3, r0
 8008196:	d04b      	beq.n	8008230 <_reclaim_reent+0xa4>
 8008198:	69c3      	ldr	r3, [r0, #28]
 800819a:	b1ab      	cbz	r3, 80081c8 <_reclaim_reent+0x3c>
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	b16b      	cbz	r3, 80081bc <_reclaim_reent+0x30>
 80081a0:	2500      	movs	r5, #0
 80081a2:	69e3      	ldr	r3, [r4, #28]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	5959      	ldr	r1, [r3, r5]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d13b      	bne.n	8008224 <_reclaim_reent+0x98>
 80081ac:	3504      	adds	r5, #4
 80081ae:	2d80      	cmp	r5, #128	@ 0x80
 80081b0:	d1f7      	bne.n	80081a2 <_reclaim_reent+0x16>
 80081b2:	69e3      	ldr	r3, [r4, #28]
 80081b4:	4620      	mov	r0, r4
 80081b6:	68d9      	ldr	r1, [r3, #12]
 80081b8:	f000 f864 	bl	8008284 <_free_r>
 80081bc:	69e3      	ldr	r3, [r4, #28]
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	b111      	cbz	r1, 80081c8 <_reclaim_reent+0x3c>
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f85e 	bl	8008284 <_free_r>
 80081c8:	6961      	ldr	r1, [r4, #20]
 80081ca:	b111      	cbz	r1, 80081d2 <_reclaim_reent+0x46>
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 f859 	bl	8008284 <_free_r>
 80081d2:	69e1      	ldr	r1, [r4, #28]
 80081d4:	b111      	cbz	r1, 80081dc <_reclaim_reent+0x50>
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 f854 	bl	8008284 <_free_r>
 80081dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80081de:	b111      	cbz	r1, 80081e6 <_reclaim_reent+0x5a>
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 f84f 	bl	8008284 <_free_r>
 80081e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081e8:	b111      	cbz	r1, 80081f0 <_reclaim_reent+0x64>
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 f84a 	bl	8008284 <_free_r>
 80081f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80081f2:	b111      	cbz	r1, 80081fa <_reclaim_reent+0x6e>
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 f845 	bl	8008284 <_free_r>
 80081fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80081fc:	b111      	cbz	r1, 8008204 <_reclaim_reent+0x78>
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 f840 	bl	8008284 <_free_r>
 8008204:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008206:	b111      	cbz	r1, 800820e <_reclaim_reent+0x82>
 8008208:	4620      	mov	r0, r4
 800820a:	f000 f83b 	bl	8008284 <_free_r>
 800820e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008210:	b111      	cbz	r1, 8008218 <_reclaim_reent+0x8c>
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f836 	bl	8008284 <_free_r>
 8008218:	6a23      	ldr	r3, [r4, #32]
 800821a:	b14b      	cbz	r3, 8008230 <_reclaim_reent+0xa4>
 800821c:	4620      	mov	r0, r4
 800821e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008222:	4718      	bx	r3
 8008224:	680e      	ldr	r6, [r1, #0]
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f82c 	bl	8008284 <_free_r>
 800822c:	4631      	mov	r1, r6
 800822e:	e7bb      	b.n	80081a8 <_reclaim_reent+0x1c>
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	bf00      	nop
 8008234:	20000168 	.word	0x20000168

08008238 <__libc_init_array>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	2600      	movs	r6, #0
 800823c:	4d0c      	ldr	r5, [pc, #48]	@ (8008270 <__libc_init_array+0x38>)
 800823e:	4c0d      	ldr	r4, [pc, #52]	@ (8008274 <__libc_init_array+0x3c>)
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	42a6      	cmp	r6, r4
 8008246:	d109      	bne.n	800825c <__libc_init_array+0x24>
 8008248:	f000 f8b6 	bl	80083b8 <_init>
 800824c:	2600      	movs	r6, #0
 800824e:	4d0a      	ldr	r5, [pc, #40]	@ (8008278 <__libc_init_array+0x40>)
 8008250:	4c0a      	ldr	r4, [pc, #40]	@ (800827c <__libc_init_array+0x44>)
 8008252:	1b64      	subs	r4, r4, r5
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	42a6      	cmp	r6, r4
 8008258:	d105      	bne.n	8008266 <__libc_init_array+0x2e>
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008260:	4798      	blx	r3
 8008262:	3601      	adds	r6, #1
 8008264:	e7ee      	b.n	8008244 <__libc_init_array+0xc>
 8008266:	f855 3b04 	ldr.w	r3, [r5], #4
 800826a:	4798      	blx	r3
 800826c:	3601      	adds	r6, #1
 800826e:	e7f2      	b.n	8008256 <__libc_init_array+0x1e>
 8008270:	08008594 	.word	0x08008594
 8008274:	08008594 	.word	0x08008594
 8008278:	08008594 	.word	0x08008594
 800827c:	08008598 	.word	0x08008598

08008280 <__retarget_lock_acquire_recursive>:
 8008280:	4770      	bx	lr

08008282 <__retarget_lock_release_recursive>:
 8008282:	4770      	bx	lr

08008284 <_free_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4605      	mov	r5, r0
 8008288:	2900      	cmp	r1, #0
 800828a:	d040      	beq.n	800830e <_free_r+0x8a>
 800828c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008290:	1f0c      	subs	r4, r1, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	bfb8      	it	lt
 8008296:	18e4      	addlt	r4, r4, r3
 8008298:	f000 f83c 	bl	8008314 <__malloc_lock>
 800829c:	4a1c      	ldr	r2, [pc, #112]	@ (8008310 <_free_r+0x8c>)
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	b933      	cbnz	r3, 80082b0 <_free_r+0x2c>
 80082a2:	6063      	str	r3, [r4, #4]
 80082a4:	6014      	str	r4, [r2, #0]
 80082a6:	4628      	mov	r0, r5
 80082a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ac:	f000 b838 	b.w	8008320 <__malloc_unlock>
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d908      	bls.n	80082c6 <_free_r+0x42>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	1821      	adds	r1, r4, r0
 80082b8:	428b      	cmp	r3, r1
 80082ba:	bf01      	itttt	eq
 80082bc:	6819      	ldreq	r1, [r3, #0]
 80082be:	685b      	ldreq	r3, [r3, #4]
 80082c0:	1809      	addeq	r1, r1, r0
 80082c2:	6021      	streq	r1, [r4, #0]
 80082c4:	e7ed      	b.n	80082a2 <_free_r+0x1e>
 80082c6:	461a      	mov	r2, r3
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	b10b      	cbz	r3, 80082d0 <_free_r+0x4c>
 80082cc:	42a3      	cmp	r3, r4
 80082ce:	d9fa      	bls.n	80082c6 <_free_r+0x42>
 80082d0:	6811      	ldr	r1, [r2, #0]
 80082d2:	1850      	adds	r0, r2, r1
 80082d4:	42a0      	cmp	r0, r4
 80082d6:	d10b      	bne.n	80082f0 <_free_r+0x6c>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	4401      	add	r1, r0
 80082dc:	1850      	adds	r0, r2, r1
 80082de:	4283      	cmp	r3, r0
 80082e0:	6011      	str	r1, [r2, #0]
 80082e2:	d1e0      	bne.n	80082a6 <_free_r+0x22>
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	4408      	add	r0, r1
 80082ea:	6010      	str	r0, [r2, #0]
 80082ec:	6053      	str	r3, [r2, #4]
 80082ee:	e7da      	b.n	80082a6 <_free_r+0x22>
 80082f0:	d902      	bls.n	80082f8 <_free_r+0x74>
 80082f2:	230c      	movs	r3, #12
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	e7d6      	b.n	80082a6 <_free_r+0x22>
 80082f8:	6820      	ldr	r0, [r4, #0]
 80082fa:	1821      	adds	r1, r4, r0
 80082fc:	428b      	cmp	r3, r1
 80082fe:	bf01      	itttt	eq
 8008300:	6819      	ldreq	r1, [r3, #0]
 8008302:	685b      	ldreq	r3, [r3, #4]
 8008304:	1809      	addeq	r1, r1, r0
 8008306:	6021      	streq	r1, [r4, #0]
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	6054      	str	r4, [r2, #4]
 800830c:	e7cb      	b.n	80082a6 <_free_r+0x22>
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20002648 	.word	0x20002648

08008314 <__malloc_lock>:
 8008314:	4801      	ldr	r0, [pc, #4]	@ (800831c <__malloc_lock+0x8>)
 8008316:	f7ff bfb3 	b.w	8008280 <__retarget_lock_acquire_recursive>
 800831a:	bf00      	nop
 800831c:	20002644 	.word	0x20002644

08008320 <__malloc_unlock>:
 8008320:	4801      	ldr	r0, [pc, #4]	@ (8008328 <__malloc_unlock+0x8>)
 8008322:	f7ff bfae 	b.w	8008282 <__retarget_lock_release_recursive>
 8008326:	bf00      	nop
 8008328:	20002644 	.word	0x20002644

0800832c <round>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008332:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8008336:	2a13      	cmp	r2, #19
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	460b      	mov	r3, r1
 800833e:	dc1a      	bgt.n	8008376 <round+0x4a>
 8008340:	2a00      	cmp	r2, #0
 8008342:	da0b      	bge.n	800835c <round+0x30>
 8008344:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008348:	3201      	adds	r2, #1
 800834a:	bf04      	itt	eq
 800834c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008350:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008354:	2200      	movs	r2, #0
 8008356:	461d      	mov	r5, r3
 8008358:	4614      	mov	r4, r2
 800835a:	e016      	b.n	800838a <round+0x5e>
 800835c:	4815      	ldr	r0, [pc, #84]	@ (80083b4 <round+0x88>)
 800835e:	4110      	asrs	r0, r2
 8008360:	4001      	ands	r1, r0
 8008362:	4321      	orrs	r1, r4
 8008364:	d011      	beq.n	800838a <round+0x5e>
 8008366:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800836a:	fa41 f202 	asr.w	r2, r1, r2
 800836e:	4413      	add	r3, r2
 8008370:	ea23 0300 	bic.w	r3, r3, r0
 8008374:	e7ee      	b.n	8008354 <round+0x28>
 8008376:	2a33      	cmp	r2, #51	@ 0x33
 8008378:	dd0a      	ble.n	8008390 <round+0x64>
 800837a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800837e:	d104      	bne.n	800838a <round+0x5e>
 8008380:	4602      	mov	r2, r0
 8008382:	f7f7 ffa7 	bl	80002d4 <__adddf3>
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
 800838a:	4620      	mov	r0, r4
 800838c:	4629      	mov	r1, r5
 800838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008398:	40f8      	lsrs	r0, r7
 800839a:	4220      	tst	r0, r4
 800839c:	d0f5      	beq.n	800838a <round+0x5e>
 800839e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80083a2:	2201      	movs	r2, #1
 80083a4:	408a      	lsls	r2, r1
 80083a6:	1912      	adds	r2, r2, r4
 80083a8:	bf28      	it	cs
 80083aa:	3301      	addcs	r3, #1
 80083ac:	ea22 0200 	bic.w	r2, r2, r0
 80083b0:	e7d1      	b.n	8008356 <round+0x2a>
 80083b2:	bf00      	nop
 80083b4:	000fffff 	.word	0x000fffff

080083b8 <_init>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr

080083c4 <_fini>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr
