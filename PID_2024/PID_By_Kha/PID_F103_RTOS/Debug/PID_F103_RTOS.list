
PID_F103_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef0c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800f01c  0800f01c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3dc  0800f3dc  000111b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f3dc  0800f3dc  000111b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f3dc  0800f3dc  000111b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3dc  0800f3dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f3e0  0800f3e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  20000000  0800f3e4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e80  200001b0  0800f594  000111b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003030  0800f594  00012030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236fc  00000000  00000000  000111d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f1f  00000000  00000000  000348d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000164b  00000000  00000000  0003c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eec8  00000000  00000000  0003db4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027667  00000000  00000000  0005ca13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d83a  00000000  00000000  0008407a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001218b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ca4  00000000  00000000  001218f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0012959c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001b0 	.word	0x200001b0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f004 	.word	0x0800f004

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001b4 	.word	0x200001b4
 800014c:	0800f004 	.word	0x0800f004

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <__aeabi_f2uiz>:
 80010e0:	0042      	lsls	r2, r0, #1
 80010e2:	d20e      	bcs.n	8001102 <__aeabi_f2uiz+0x22>
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010e8:	d30b      	bcc.n	8001102 <__aeabi_f2uiz+0x22>
 80010ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d409      	bmi.n	8001108 <__aeabi_f2uiz+0x28>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr
 8001108:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800110c:	d101      	bne.n	8001112 <__aeabi_f2uiz+0x32>
 800110e:	0242      	lsls	r2, r0, #9
 8001110:	d102      	bne.n	8001118 <__aeabi_f2uiz+0x38>
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	4770      	bx	lr
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_CAN_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <MX_CAN_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_CAN_Init+0x64>)
 800112c:	2210      	movs	r2, #16
 800112e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_CAN_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <MX_CAN_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_CAN_Init+0x64>)
 800113e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001142:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_CAN_Init+0x64>)
 8001146:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800114a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_CAN_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_CAN_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_CAN_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_CAN_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <MX_CAN_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_CAN_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_CAN_Init+0x64>)
 8001172:	f000 ff41 	bl	8001ff8 <HAL_CAN_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 fb12 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001cc 	.word	0x200001cc
 8001188:	40006400 	.word	0x40006400

0800118c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a29      	ldr	r2, [pc, #164]	@ (800124c <HAL_CAN_MspInit+0xc0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d14b      	bne.n	8001244 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011ac:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <HAL_CAN_MspInit+0xc4>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_CAN_MspInit+0xc4>)
 80011b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b6:	61d3      	str	r3, [r2, #28]
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <HAL_CAN_MspInit+0xc4>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <HAL_CAN_MspInit+0xc4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a21      	ldr	r2, [pc, #132]	@ (8001250 <HAL_CAN_MspInit+0xc4>)
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_CAN_MspInit+0xc4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4818      	ldr	r0, [pc, #96]	@ (8001254 <HAL_CAN_MspInit+0xc8>)
 80011f2:	f001 fc71 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4812      	ldr	r0, [pc, #72]	@ (8001254 <HAL_CAN_MspInit+0xc8>)
 800120c:	f001 fc64 	bl	8002ad8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_CAN_MspInit+0xcc>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_CAN_MspInit+0xcc>)
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2105      	movs	r1, #5
 8001238:	2014      	movs	r0, #20
 800123a:	f001 fb48 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800123e:	2014      	movs	r0, #20
 8001240:	f001 fb61 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40006400 	.word	0x40006400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40010000 	.word	0x40010000

0800125c <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_CAN_MspDeInit+0x30>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d10a      	bne.n	8001284 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_CAN_MspDeInit+0x34>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_CAN_MspDeInit+0x34>)
 8001274:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001278:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 800127a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <HAL_CAN_MspDeInit+0x38>)
 8001280:	f001 fdae 	bl	8002de0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40006400 	.word	0x40006400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010c00 	.word	0x40010c00

08001298 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_CRC_Init+0x20>)
 800129e:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <MX_CRC_Init+0x24>)
 80012a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_CRC_Init+0x20>)
 80012a4:	f001 fb49 	bl	800293a <HAL_CRC_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80012ae:	f000 fa79 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001f4 	.word	0x200001f4
 80012bc:	40023000 	.word	0x40023000

080012c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_CRC_MspInit+0x34>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10b      	bne.n	80012ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_CRC_MspInit+0x38>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_CRC_MspInit+0x38>)
 80012d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_CRC_MspInit+0x38>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40023000 	.word	0x40023000
 80012f8:	40021000 	.word	0x40021000

080012fc <Blink_led>:
osThreadId pidTaskHandle;
osThreadId usbTaskHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void Blink_led(PID_typedef *pid) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (pid->mode != PID_Position) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7c5b      	ldrb	r3, [r3, #17]
 8001308:	2b09      	cmp	r3, #9
 800130a:	d021      	beq.n	8001350 <Blink_led+0x54>
		if (HAL_GetTick() - time_led >= 10000 / (pid->Value_Set + 1)
 800130c:	f000 fe6a 	bl	8001fe4 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <Blink_led+0x80>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6a12      	ldr	r2, [r2, #32]
 800131c:	3201      	adds	r2, #1
 800131e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001322:	fb91 f2f2 	sdiv	r2, r1, r2
 8001326:	4293      	cmp	r3, r2
 8001328:	d208      	bcs.n	800133c <Blink_led+0x40>
				|| HAL_GetTick() - time_led >= 700) {
 800132a:	f000 fe5b 	bl	8001fe4 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <Blink_led+0x80>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800133a:	d31b      	bcc.n	8001374 <Blink_led+0x78>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800133c:	2120      	movs	r1, #32
 800133e:	4810      	ldr	r0, [pc, #64]	@ (8001380 <Blink_led+0x84>)
 8001340:	f001 fe22 	bl	8002f88 <HAL_GPIO_TogglePin>
			time_led = HAL_GetTick();
 8001344:	f000 fe4e 	bl	8001fe4 <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <Blink_led+0x80>)
 800134c:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - time_led >= 500) {
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
			time_led = HAL_GetTick();
		}
	}
}
 800134e:	e011      	b.n	8001374 <Blink_led+0x78>
		if (HAL_GetTick() - time_led >= 500) {
 8001350:	f000 fe48 	bl	8001fe4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <Blink_led+0x80>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001360:	d308      	bcc.n	8001374 <Blink_led+0x78>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001362:	2120      	movs	r1, #32
 8001364:	4806      	ldr	r0, [pc, #24]	@ (8001380 <Blink_led+0x84>)
 8001366:	f001 fe0f 	bl	8002f88 <HAL_GPIO_TogglePin>
			time_led = HAL_GetTick();
 800136a:	f000 fe3b 	bl	8001fe4 <HAL_GetTick>
 800136e:	4603      	mov	r3, r0
 8001370:	4a02      	ldr	r2, [pc, #8]	@ (800137c <Blink_led+0x80>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001fc 	.word	0x200001fc
 8001380:	40010c00 	.word	0x40010c00

08001384 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <vApplicationGetIdleTaskMemory+0x28>)
 8001394:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800139a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000208 	.word	0x20000208
 80013b0:	200002a8 	.word	0x200002a8

080013b4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	MX_USB_DEVICE_Init();
 80013ba:	f00b f9f5 	bl	800c7a8 <MX_USB_DEVICE_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of pidTask */
	osThreadDef(pidTask, StartPidTask, osPriorityNormal, 0, 256);
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_FREERTOS_Init+0x5c>)
 80013c0:	f107 041c 	add.w	r4, r7, #28
 80013c4:	461d      	mov	r5, r3
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pidTaskHandle = osThreadCreate(osThread(pidTask), NULL);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 ffbf 	bl	800b35c <osThreadCreate>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <MX_FREERTOS_Init+0x60>)
 80013e2:	6013      	str	r3, [r2, #0]

	/* definition and creation of usbTask */
	osThreadDef(usbTask, StartUsbTask, osPriorityNormal, 0, 256);
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_FREERTOS_Init+0x64>)
 80013e6:	463c      	mov	r4, r7
 80013e8:	461d      	mov	r5, r3
 80013ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	usbTaskHandle = osThreadCreate(osThread(usbTask), NULL);
 80013f6:	463b      	mov	r3, r7
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 ffae 	bl	800b35c <osThreadCreate>
 8001400:	4603      	mov	r3, r0
 8001402:	4a06      	ldr	r2, [pc, #24]	@ (800141c <MX_FREERTOS_Init+0x68>)
 8001404:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8001406:	bf00      	nop
 8001408:	3738      	adds	r7, #56	@ 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	bf00      	nop
 8001410:	0800f024 	.word	0x0800f024
 8001414:	20000200 	.word	0x20000200
 8001418:	0800f048 	.word	0x0800f048
 800141c:	20000204 	.word	0x20000204

08001420 <StartPidTask>:
 * @brief  Function implementing the pidTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPidTask */
void StartPidTask(void const *argument) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
//  MX_USB_DEVICE_Init();
	/* USER CODE BEGIN StartPidTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f009 ffe3 	bl	800b3f4 <osDelay>
		if (PID.enablePID == 1 && usbPID.resquetCMD != Save_data) {
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <StartPidTask+0x38>)
 8001430:	7d5b      	ldrb	r3, [r3, #21]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d1f7      	bne.n	8001428 <StartPidTask+0x8>
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <StartPidTask+0x3c>)
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d0f3      	beq.n	8001428 <StartPidTask+0x8>
			Update_Encoder(&PID);
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <StartPidTask+0x38>)
 8001442:	f00c f87f 	bl	800d544 <Update_Encoder>
			PID.f_cal_pid(&PID);
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <StartPidTask+0x38>)
 8001448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <StartPidTask+0x38>)
 800144e:	4798      	blx	r3
			PID.enablePID = 0;
 8001450:	4b01      	ldr	r3, [pc, #4]	@ (8001458 <StartPidTask+0x38>)
 8001452:	2200      	movs	r2, #0
 8001454:	755a      	strb	r2, [r3, #21]
		osDelay(1);
 8001456:	e7e7      	b.n	8001428 <StartPidTask+0x8>
 8001458:	20002c8c 	.word	0x20002c8c
 800145c:	20002d5c 	.word	0x20002d5c

08001460 <StartUsbTask>:
 * @brief Function implementing the usbTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsbTask */
void StartUsbTask(void const *argument) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUsbTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f009 ffc3 	bl	800b3f4 <osDelay>
		Blink_led(&PID);
 800146e:	4836      	ldr	r0, [pc, #216]	@ (8001548 <StartUsbTask+0xe8>)
 8001470:	f7ff ff44 	bl	80012fc <Blink_led>

		if (pdev1->dev_state == 0x03) //Connected USB
 8001474:	4b35      	ldr	r3, [pc, #212]	@ (800154c <StartUsbTask+0xec>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800147c:	2b03      	cmp	r3, #3
 800147e:	d157      	bne.n	8001530 <StartUsbTask+0xd0>
				{
			if (usbPID.isConnected == 1) {
 8001480:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <StartUsbTask+0xf0>)
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d1ef      	bne.n	8001468 <StartUsbTask+0x8>
				if (HAL_GetTick() - usbPID.timeOut > TIME_OUT_SEND) {
 8001488:	f000 fdac 	bl	8001fe4 <HAL_GetTick>
 800148c:	4603      	mov	r3, r0
 800148e:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <StartUsbTask+0xf0>)
 8001490:	8812      	ldrh	r2, [r2, #0]
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	2b14      	cmp	r3, #20
 8001496:	d90a      	bls.n	80014ae <StartUsbTask+0x4e>
					usbPID.f_data_write(&usbPID);
 8001498:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <StartUsbTask+0xf0>)
 800149a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800149e:	482c      	ldr	r0, [pc, #176]	@ (8001550 <StartUsbTask+0xf0>)
 80014a0:	4798      	blx	r3
					usbPID.timeOut = HAL_GetTick();
 80014a2:	f000 fd9f 	bl	8001fe4 <HAL_GetTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <StartUsbTask+0xf0>)
 80014ac:	801a      	strh	r2, [r3, #0]
				}
				usbPID.f_data_read(&usbPID);
 80014ae:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <StartUsbTask+0xf0>)
 80014b0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80014b4:	4826      	ldr	r0, [pc, #152]	@ (8001550 <StartUsbTask+0xf0>)
 80014b6:	4798      	blx	r3

				if (usbPID.resquetCMD == Save_data) {
 80014b8:	4b25      	ldr	r3, [pc, #148]	@ (8001550 <StartUsbTask+0xf0>)
 80014ba:	795b      	ldrb	r3, [r3, #5]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d124      	bne.n	800150a <StartUsbTask+0xaa>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80014c0:	2100      	movs	r1, #0
 80014c2:	4824      	ldr	r0, [pc, #144]	@ (8001554 <StartUsbTask+0xf4>)
 80014c4:	f004 f9f0 	bl	80058a8 <HAL_TIM_PWM_Stop>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80014c8:	2104      	movs	r1, #4
 80014ca:	4822      	ldr	r0, [pc, #136]	@ (8001554 <StartUsbTask+0xf4>)
 80014cc:	f004 f9ec 	bl	80058a8 <HAL_TIM_PWM_Stop>
					HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 80014d0:	213c      	movs	r1, #60	@ 0x3c
 80014d2:	4821      	ldr	r0, [pc, #132]	@ (8001558 <StartUsbTask+0xf8>)
 80014d4:	f004 fc88 	bl	8005de8 <HAL_TIM_Encoder_Stop>
					HAL_TIM_Base_Stop_IT(&htim4);
 80014d8:	4820      	ldr	r0, [pc, #128]	@ (800155c <StartUsbTask+0xfc>)
 80014da:	f004 f8bd 	bl	8005658 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim3);
 80014de:	4820      	ldr	r0, [pc, #128]	@ (8001560 <StartUsbTask+0x100>)
 80014e0:	f004 f8ba 	bl	8005658 <HAL_TIM_Base_Stop_IT>

					Flash_data.f_write_param(&Flash_data);
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <StartUsbTask+0x104>)
 80014e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014ea:	481e      	ldr	r0, [pc, #120]	@ (8001564 <StartUsbTask+0x104>)
 80014ec:	4798      	blx	r3
					Flash_data.f_read_param(&Flash_data);
 80014ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <StartUsbTask+0x104>)
 80014f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80014f4:	481b      	ldr	r0, [pc, #108]	@ (8001564 <StartUsbTask+0x104>)
 80014f6:	4798      	blx	r3

					PID.f_param_init(&PID);
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <StartUsbTask+0xe8>)
 80014fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80014fe:	4812      	ldr	r0, [pc, #72]	@ (8001548 <StartUsbTask+0xe8>)
 8001500:	4798      	blx	r3
					usbPID.resquetCMD = NoneCMD;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <StartUsbTask+0xf0>)
 8001504:	2200      	movs	r2, #0
 8001506:	715a      	strb	r2, [r3, #5]
 8001508:	e7ae      	b.n	8001468 <StartUsbTask+0x8>
				} else if (usbPID.resquetCMD == Get_infor) {
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <StartUsbTask+0xf0>)
 800150c:	795b      	ldrb	r3, [r3, #5]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d1aa      	bne.n	8001468 <StartUsbTask+0x8>
					Flash_data.f_change_mode(&Flash_data, &PID);
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <StartUsbTask+0x104>)
 8001514:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001518:	490b      	ldr	r1, [pc, #44]	@ (8001548 <StartUsbTask+0xe8>)
 800151a:	4812      	ldr	r0, [pc, #72]	@ (8001564 <StartUsbTask+0x104>)
 800151c:	4798      	blx	r3
					PID.f_param_init(&PID);
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <StartUsbTask+0xe8>)
 8001520:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001524:	4808      	ldr	r0, [pc, #32]	@ (8001548 <StartUsbTask+0xe8>)
 8001526:	4798      	blx	r3
					usbPID.resquetCMD = NoneCMD;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <StartUsbTask+0xf0>)
 800152a:	2200      	movs	r2, #0
 800152c:	715a      	strb	r2, [r3, #5]
 800152e:	e79b      	b.n	8001468 <StartUsbTask+0x8>
				}
			}
		} else {
			usbPID.isConnected = 0;
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <StartUsbTask+0xf0>)
 8001532:	2200      	movs	r2, #0
 8001534:	709a      	strb	r2, [r3, #2]
			PID.ptlCtrl = UARTCOM;
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <StartUsbTask+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	749a      	strb	r2, [r3, #18]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2110      	movs	r1, #16
 8001540:	4809      	ldr	r0, [pc, #36]	@ (8001568 <StartUsbTask+0x108>)
 8001542:	f001 fd09 	bl	8002f58 <HAL_GPIO_WritePin>
		osDelay(1);
 8001546:	e78f      	b.n	8001468 <StartUsbTask+0x8>
 8001548:	20002c8c 	.word	0x20002c8c
 800154c:	20002d54 	.word	0x20002d54
 8001550:	20002d5c 	.word	0x20002d5c
 8001554:	20000500 	.word	0x20000500
 8001558:	20000548 	.word	0x20000548
 800155c:	200005d8 	.word	0x200005d8
 8001560:	20000590 	.word	0x20000590
 8001564:	20002bb8 	.word	0x20002bb8
 8001568:	40010c00 	.word	0x40010c00

0800156c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001580:	4b36      	ldr	r3, [pc, #216]	@ (800165c <MX_GPIO_Init+0xf0>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a35      	ldr	r2, [pc, #212]	@ (800165c <MX_GPIO_Init+0xf0>)
 8001586:	f043 0320 	orr.w	r3, r3, #32
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b33      	ldr	r3, [pc, #204]	@ (800165c <MX_GPIO_Init+0xf0>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b30      	ldr	r3, [pc, #192]	@ (800165c <MX_GPIO_Init+0xf0>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <MX_GPIO_Init+0xf0>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <MX_GPIO_Init+0xf0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <MX_GPIO_Init+0xf0>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a29      	ldr	r2, [pc, #164]	@ (800165c <MX_GPIO_Init+0xf0>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b27      	ldr	r3, [pc, #156]	@ (800165c <MX_GPIO_Init+0xf0>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	211c      	movs	r1, #28
 80015cc:	4824      	ldr	r0, [pc, #144]	@ (8001660 <MX_GPIO_Init+0xf4>)
 80015ce:	f001 fcc3 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2130      	movs	r1, #48	@ 0x30
 80015d6:	4823      	ldr	r0, [pc, #140]	@ (8001664 <MX_GPIO_Init+0xf8>)
 80015d8:	f001 fcbe 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80015dc:	231c      	movs	r3, #28
 80015de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	481b      	ldr	r0, [pc, #108]	@ (8001660 <MX_GPIO_Init+0xf4>)
 80015f4:	f001 fa70 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4619      	mov	r1, r3
 800160a:	4815      	ldr	r0, [pc, #84]	@ (8001660 <MX_GPIO_Init+0xf4>)
 800160c:	f001 fa64 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001610:	2302      	movs	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_GPIO_Init+0xfc>)
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	4810      	ldr	r0, [pc, #64]	@ (8001664 <MX_GPIO_Init+0xf8>)
 8001624:	f001 fa58 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001628:	2330      	movs	r3, #48	@ 0x30
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4619      	mov	r1, r3
 800163e:	4809      	ldr	r0, [pc, #36]	@ (8001664 <MX_GPIO_Init+0xf8>)
 8001640:	f001 fa4a 	bl	8002ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2105      	movs	r1, #5
 8001648:	2007      	movs	r0, #7
 800164a:	f001 f940 	bl	80028ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800164e:	2007      	movs	r0, #7
 8001650:	f001 f959 	bl	8002906 <HAL_NVIC_EnableIRQ>

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800
 8001664:	40010c00 	.word	0x40010c00
 8001668:	10110000 	.word	0x10110000

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001670:	f000 fc60 	bl	8001f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001674:	f000 f83c 	bl	80016f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PID_Init(&PID);
 8001678:	4819      	ldr	r0, [pc, #100]	@ (80016e0 <main+0x74>)
 800167a:	f00d f91d 	bl	800e8b8 <PID_Init>
  HID_Data_Init(&usbPID);
 800167e:	4819      	ldr	r0, [pc, #100]	@ (80016e4 <main+0x78>)
 8001680:	f00d fb78 	bl	800ed74 <HID_Data_Init>
  Flash_data_init(&Flash_data);
 8001684:	4818      	ldr	r0, [pc, #96]	@ (80016e8 <main+0x7c>)
 8001686:	f00b ff3b 	bl	800d500 <Flash_data_init>

  usbPID.f_param_init(&usbPID);
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <main+0x78>)
 800168c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8001690:	4814      	ldr	r0, [pc, #80]	@ (80016e4 <main+0x78>)
 8001692:	4798      	blx	r3
  Flash_data.f_init_param(&Flash_data);
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <main+0x7c>)
 8001696:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800169a:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <main+0x7c>)
 800169c:	4798      	blx	r3
  Flash_data.f_read_param(&Flash_data);
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <main+0x7c>)
 80016a0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <main+0x7c>)
 80016a6:	4798      	blx	r3

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a8:	f7ff ff60 	bl	800156c <MX_GPIO_Init>
//  MX_CAN_Init();
  MX_TIM1_Init();
 80016ac:	f000 f99a 	bl	80019e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016b0:	f000 fa44 	bl	8001b3c <MX_TIM2_Init>
//  MX_TIM3_Init();
//  MX_TIM4_Init();
  MX_USART1_UART_Init();
 80016b4:	f000 fb8c 	bl	8001dd0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80016b8:	f7ff fdee 	bl	8001298 <MX_CRC_Init>
  MX_SPI2_Init();
 80016bc:	f000 f878 	bl	80017b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN_Init();
 80016c0:	f7ff fd2e 	bl	8001120 <MX_CAN_Init>
  HAL_CAN_DeInit(&hcan);
 80016c4:	4809      	ldr	r0, [pc, #36]	@ (80016ec <main+0x80>)
 80016c6:	f000 fd92 	bl	80021ee <HAL_CAN_DeInit>
  PID.f_param_init(&PID);
 80016ca:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <main+0x74>)
 80016cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <main+0x74>)
 80016d2:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80016d4:	f7ff fe6e 	bl	80013b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016d8:	f009 fe39 	bl	800b34e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <main+0x70>
 80016e0:	20002c8c 	.word	0x20002c8c
 80016e4:	20002d5c 	.word	0x20002d5c
 80016e8:	20002bb8 	.word	0x20002bb8
 80016ec:	200001cc 	.word	0x200001cc

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	@ 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016fa:	2228      	movs	r2, #40	@ 0x28
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f00d fb54 	bl	800edac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172e:	2301      	movs	r3, #1
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800173c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001746:	4618      	mov	r0, r3
 8001748:	f003 f99a 	bl	8004a80 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001752:	f000 f827 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001766:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fc06 	bl	8004f84 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800177e:	f000 f811 	bl	80017a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001782:	2310      	movs	r3, #16
 8001784:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fd87 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001798:	f000 f804 	bl	80017a4 <Error_Handler>
  }
}
 800179c:	bf00      	nop
 800179e:	3750      	adds	r7, #80	@ 0x50
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <Error_Handler+0x8>

080017b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017b4:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017b6:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017e4:	2208      	movs	r2, #8
 80017e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_SPI2_Init+0x64>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <MX_SPI2_Init+0x64>)
 8001802:	f003 fe03 	bl	800540c <HAL_SPI_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800180c:	f7ff ffca 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200004a8 	.word	0x200004a8
 8001818:	40003800 	.word	0x40003800

0800181c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <HAL_SPI_MspInit+0x8c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d131      	bne.n	80018a0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_SPI_MspInit+0x90>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_SPI_MspInit+0x90>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001846:	61d3      	str	r3, [r2, #28]
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_SPI_MspInit+0x90>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_SPI_MspInit+0x90>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <HAL_SPI_MspInit+0x90>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_SPI_MspInit+0x90>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800186c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <HAL_SPI_MspInit+0x94>)
 8001882:	f001 f929 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001886:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800188a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <HAL_SPI_MspInit+0x94>)
 800189c:	f001 f91c 	bl	8002ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40003800 	.word	0x40003800
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010c00 	.word	0x40010c00

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <HAL_MspInit+0x68>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <HAL_MspInit+0x68>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_MspInit+0x68>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_MspInit+0x68>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a11      	ldr	r2, [pc, #68]	@ (800191c <HAL_MspInit+0x68>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <HAL_MspInit+0x68>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	210f      	movs	r1, #15
 80018ee:	f06f 0001 	mvn.w	r0, #1
 80018f2:	f000 ffec 	bl	80028ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_MspInit+0x6c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_MspInit+0x6c>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f000 fb30 	bl	8001fc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001960:	f00a fafe 	bl	800bf60 <xTaskGetSchedulerState>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800196a:	f00a fced 	bl	800c348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}

08001972 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001976:	2002      	movs	r0, #2
 8001978:	f001 fb20 	bl	8002fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8001986:	f000 fc9e 	bl	80022c6 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800198a:	4803      	ldr	r0, [pc, #12]	@ (8001998 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 800198c:	f001 fc4a 	bl	8003224 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200001cc 	.word	0x200001cc
 8001998:	20002888 	.word	0x20002888

0800199c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <TIM3_IRQHandler+0x10>)
 80019a2:	f004 fab8 	bl	8005f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000590 	.word	0x20000590

080019b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <TIM4_IRQHandler+0x10>)
 80019b6:	f004 faae 	bl	8005f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200005d8 	.word	0x200005d8

080019c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <USART1_IRQHandler+0x10>)
 80019ca:	f005 f91f 	bl	8006c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000620 	.word	0x20000620

080019d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	@ 0x58
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2220      	movs	r2, #32
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00d f9c5 	bl	800edac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a22:	4b44      	ldr	r3, [pc, #272]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a24:	4a44      	ldr	r2, [pc, #272]	@ (8001b38 <MX_TIM1_Init+0x154>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8001a28:	4b42      	ldr	r3, [pc, #264]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b41      	ldr	r3, [pc, #260]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001a34:	4b3f      	ldr	r3, [pc, #252]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a42:	4b3c      	ldr	r3, [pc, #240]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a4e:	4839      	ldr	r0, [pc, #228]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a50:	f003 fd60 	bl	8005514 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a5a:	f7ff fea3 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4832      	ldr	r0, [pc, #200]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a6c:	f004 fc06 	bl	800627c <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a76:	f7ff fe95 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a7a:	482e      	ldr	r0, [pc, #184]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a7c:	f003 fe1a 	bl	80056b4 <HAL_TIM_PWM_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a86:	f7ff fe8d 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a96:	4619      	mov	r1, r3
 8001a98:	4826      	ldr	r0, [pc, #152]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001a9a:	f004 ff81 	bl	80069a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001aa4:	f7ff fe7e 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa8:	2360      	movs	r3, #96	@ 0x60
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4819      	ldr	r0, [pc, #100]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001ace:	f004 fb13 	bl	80060f8 <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ad8:	f7ff fe64 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4813      	ldr	r0, [pc, #76]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001ae6:	f004 fb07 	bl	80060f8 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001af0:	f7ff fe58 	bl	80017a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001b18:	f004 ffa0 	bl	8006a5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001b22:	f7ff fe3f 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b26:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <MX_TIM1_Init+0x150>)
 8001b28:	f000 f91e 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 8001b2c:	bf00      	nop
 8001b2e:	3758      	adds	r7, #88	@ 0x58
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000500 	.word	0x20000500
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	2224      	movs	r2, #36	@ 0x24
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00d f92e 	bl	800edac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b80:	2303      	movs	r3, #3
 8001b82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b84:	2302      	movs	r3, #2
 8001b86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001bac:	f003 ffec 	bl	8005b88 <HAL_TIM_Encoder_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bb6:	f7ff fdf5 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001bc8:	f004 feea 	bl	80069a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bd2:	f7ff fde7 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	@ 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000548 	.word	0x20000548

08001be4 <MX_TIM4_Init>:
  /* USER CODE END TIM3_Init 2 */

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c02:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <MX_TIM4_Init+0x94>)
 8001c04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c08:	2247      	movs	r2, #71	@ 0x47
 8001c0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5-1;
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c14:	2204      	movs	r2, #4
 8001c16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c24:	4813      	ldr	r0, [pc, #76]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c26:	f003 fc75 	bl	8005514 <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001c30:	f7ff fdb8 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c42:	f004 fb1b 	bl	800627c <HAL_TIM_ConfigClockSource>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001c4c:	f7ff fdaa 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c58:	463b      	mov	r3, r7
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_TIM4_Init+0x90>)
 8001c5e:	f004 fe9f 	bl	80069a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001c68:	f7ff fd9c 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200005d8 	.word	0x200005d8
 8001c78:	40000800 	.word	0x40000800

08001c7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_TIM_Base_MspInit+0x68>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ca6:	e018      	b.n	8001cda <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <HAL_TIM_Base_MspInit+0x70>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d113      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x6c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	201e      	movs	r0, #30
 8001cd0:	f000 fdfd 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cd4:	201e      	movs	r0, #30
 8001cd6:	f000 fe16 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40000800 	.word	0x40000800

08001cf0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0e:	d123      	bne.n	8001d58 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	61d3      	str	r3, [r2, #28]
 8001d1c:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d40:	2303      	movs	r3, #3
 8001d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4619      	mov	r1, r3
 8001d52:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d54:	f000 fec0 	bl	8002ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010800 	.word	0x40010800

08001d68 <HAL_TIM_MspPostInit>:

  /* USER CODE END TIM3_MspInit 1 */
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <HAL_TIM_MspPostInit+0x5c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d118      	bne.n	8001dba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <HAL_TIM_MspPostInit+0x60>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc8 <HAL_TIM_MspPostInit+0x60>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <HAL_TIM_MspPostInit+0x60>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001da0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <HAL_TIM_MspPostInit+0x64>)
 8001db6:	f000 fe8f 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010800 	.word	0x40010800

08001dd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <MX_USART1_UART_Init+0x50>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001ddc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e08:	f004 fe8b 	bl	8006b22 <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e12:	f7ff fcc7 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000620 	.word	0x20000620
 8001e20:	40013800 	.word	0x40013800

08001e24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a26      	ldr	r2, [pc, #152]	@ (8001ed8 <HAL_UART_MspInit+0xb4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d145      	bne.n	8001ed0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <HAL_UART_MspInit+0xb8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a24      	ldr	r2, [pc, #144]	@ (8001edc <HAL_UART_MspInit+0xb8>)
 8001e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <HAL_UART_MspInit+0xb8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <HAL_UART_MspInit+0xb8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a1e      	ldr	r2, [pc, #120]	@ (8001edc <HAL_UART_MspInit+0xb8>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <HAL_UART_MspInit+0xb8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e74:	2340      	movs	r3, #64	@ 0x40
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4816      	ldr	r0, [pc, #88]	@ (8001ee0 <HAL_UART_MspInit+0xbc>)
 8001e88:	f000 fe26 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4810      	ldr	r0, [pc, #64]	@ (8001ee0 <HAL_UART_MspInit+0xbc>)
 8001ea0:	f000 fe1a 	bl	8002ad8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <HAL_UART_MspInit+0xc0>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <HAL_UART_MspInit+0xc0>)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2105      	movs	r1, #5
 8001ec4:	2025      	movs	r0, #37	@ 0x25
 8001ec6:	f000 fd02 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eca:	2025      	movs	r0, #37	@ 0x25
 8001ecc:	f000 fd1b 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	@ 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010c00 	.word	0x40010c00
 8001ee4:	40010000 	.word	0x40010000

08001ee8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee8:	f7ff fd76 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480b      	ldr	r0, [pc, #44]	@ (8001f1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eee:	490c      	ldr	r1, [pc, #48]	@ (8001f20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a09      	ldr	r2, [pc, #36]	@ (8001f28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f04:	4c09      	ldr	r4, [pc, #36]	@ (8001f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f00c ffa9 	bl	800ee68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f16:	f7ff fba9 	bl	800166c <main>
  bx lr
 8001f1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001f24:	0800f3e4 	.word	0x0800f3e4
  ldr r2, =_sbss
 8001f28:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001f2c:	20003030 	.word	0x20003030

08001f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC1_2_IRQHandler>
	...

08001f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_Init+0x28>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_Init+0x28>)
 8001f3e:	f043 0310 	orr.w	r3, r3, #16
 8001f42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 fcb7 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fcb0 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40022000 	.word	0x40022000

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fccf 	bl	8002922 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 fc97 	bl	80028ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_IncTick+0x1c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a03      	ldr	r2, [pc, #12]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000668 	.word	0x20000668

08001fe4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	@ (8001ff4 <HAL_GetTick+0x10>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000668 	.word	0x20000668

08001ff8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0ed      	b.n	80021e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff f8b8 	bl	800118c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800202c:	f7ff ffda 	bl	8001fe4 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002032:	e012      	b.n	800205a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002034:	f7ff ffd6 	bl	8001fe4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b0a      	cmp	r3, #10
 8002040:	d90b      	bls.n	800205a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2205      	movs	r2, #5
 8002052:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0c5      	b.n	80021e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0e5      	beq.n	8002034 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0202 	bic.w	r2, r2, #2
 8002076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002078:	f7ff ffb4 	bl	8001fe4 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800207e:	e012      	b.n	80020a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002080:	f7ff ffb0 	bl	8001fe4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b0a      	cmp	r3, #10
 800208c:	d90b      	bls.n	80020a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2205      	movs	r2, #5
 800209e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e09f      	b.n	80021e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e5      	bne.n	8002080 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7e1b      	ldrb	r3, [r3, #24]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e007      	b.n	80020de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7e5b      	ldrb	r3, [r3, #25]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e007      	b.n	8002108 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7e9b      	ldrb	r3, [r3, #26]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e007      	b.n	8002132 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0220 	bic.w	r2, r2, #32
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7edb      	ldrb	r3, [r3, #27]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0210 	bic.w	r2, r2, #16
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e007      	b.n	800215c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0210 	orr.w	r2, r2, #16
 800215a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7f1b      	ldrb	r3, [r3, #28]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d108      	bne.n	8002176 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0208 	orr.w	r2, r2, #8
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e007      	b.n	8002186 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7f5b      	ldrb	r3, [r3, #29]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0204 	orr.w	r2, r2, #4
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e007      	b.n	80021b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e015      	b.n	800222c <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f817 	bl	8002234 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff f828 	bl	800125c <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800221a:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d133      	bne.n	80022b0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002258:	f7ff fec4 	bl	8001fe4 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800225e:	e012      	b.n	8002286 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002260:	f7ff fec0 	bl	8001fe4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b0a      	cmp	r3, #10
 800226c:	d90b      	bls.n	8002286 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2205      	movs	r2, #5
 800227e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e01b      	b.n	80022be <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0e5      	beq.n	8002260 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0202 	bic.w	r2, r2, #2
 80022a2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e006      	b.n	80022be <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b08a      	sub	sp, #40	@ 0x28
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d07c      	beq.n	8002406 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d023      	beq.n	800235e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f983 	bl	8002634 <HAL_CAN_TxMailbox0CompleteCallback>
 800232e:	e016      	b.n	800235e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
 8002342:	e00c      	b.n	800235e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
 8002356:	e002      	b.n	800235e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f986 	bl	800266a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d024      	beq.n	80023b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002370:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f962 	bl	8002646 <HAL_CAN_TxMailbox1CompleteCallback>
 8002382:	e016      	b.n	80023b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
 8002396:	e00c      	b.n	80023b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023aa:	e002      	b.n	80023b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f965 	bl	800267c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d024      	beq.n	8002406 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f941 	bl	8002658 <HAL_CAN_TxMailbox2CompleteCallback>
 80023d6:	e016      	b.n	8002406 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ea:	e00c      	b.n	8002406 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fe:	e002      	b.n	8002406 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f944 	bl	800268e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2210      	movs	r2, #16
 8002428:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2208      	movs	r2, #8
 8002444:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f933 	bl	80026b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f91b 	bl	80026a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2210      	movs	r2, #16
 800248c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2208      	movs	r2, #8
 80024a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f913 	bl	80026d6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f8fb 	bl	80026c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2210      	movs	r2, #16
 80024e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8fc 	bl	80026e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2208      	movs	r2, #8
 800250a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8f4 	bl	80026fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d07b      	beq.n	8002614 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d072      	beq.n	800260c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002580:	2b00      	cmp	r3, #0
 8002582:	d043      	beq.n	800260c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03e      	beq.n	800260c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002594:	2b60      	cmp	r3, #96	@ 0x60
 8002596:	d02b      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x32a>
 8002598:	2b60      	cmp	r3, #96	@ 0x60
 800259a:	d82e      	bhi.n	80025fa <HAL_CAN_IRQHandler+0x334>
 800259c:	2b50      	cmp	r3, #80	@ 0x50
 800259e:	d022      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x320>
 80025a0:	2b50      	cmp	r3, #80	@ 0x50
 80025a2:	d82a      	bhi.n	80025fa <HAL_CAN_IRQHandler+0x334>
 80025a4:	2b40      	cmp	r3, #64	@ 0x40
 80025a6:	d019      	beq.n	80025dc <HAL_CAN_IRQHandler+0x316>
 80025a8:	2b40      	cmp	r3, #64	@ 0x40
 80025aa:	d826      	bhi.n	80025fa <HAL_CAN_IRQHandler+0x334>
 80025ac:	2b30      	cmp	r3, #48	@ 0x30
 80025ae:	d010      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x30c>
 80025b0:	2b30      	cmp	r3, #48	@ 0x30
 80025b2:	d822      	bhi.n	80025fa <HAL_CAN_IRQHandler+0x334>
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d002      	beq.n	80025be <HAL_CAN_IRQHandler+0x2f8>
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d005      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025bc:	e01d      	b.n	80025fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025c6:	e019      	b.n	80025fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	f043 0310 	orr.w	r3, r3, #16
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025d0:	e014      	b.n	80025fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	f043 0320 	orr.w	r3, r3, #32
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025da:	e00f      	b.n	80025fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025e4:	e00a      	b.n	80025fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ee:	e005      	b.n	80025fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025f8:	e000      	b.n	80025fc <HAL_CAN_IRQHandler+0x336>
            break;
 80025fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800260a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2204      	movs	r2, #4
 8002612:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f870 	bl	800270c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	@ 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
	...

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4906      	ldr	r1, [pc, #24]	@ (80027b8 <__NVIC_EnableIRQ+0x34>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	@ (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f7ff ff90 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff2d 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff42 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff90 	bl	8002810 <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5f 	bl	80027bc <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff35 	bl	8002784 <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa2 	bl	8002874 <SysTick_Config>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e00e      	b.n	800296a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	795b      	ldrb	r3, [r3, #5]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fe fcaf 	bl	80012c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d008      	beq.n	800299c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2204      	movs	r2, #4
 800298e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e020      	b.n	80029de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020e 	bic.w	r2, r2, #14
 80029aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d005      	beq.n	8002a0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	e051      	b.n	8002ab0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 020e 	bic.w	r2, r2, #14
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a22      	ldr	r2, [pc, #136]	@ (8002abc <HAL_DMA_Abort_IT+0xd4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d029      	beq.n	8002a8a <HAL_DMA_Abort_IT+0xa2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a21      	ldr	r2, [pc, #132]	@ (8002ac0 <HAL_DMA_Abort_IT+0xd8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_Abort_IT+0x9e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac4 <HAL_DMA_Abort_IT+0xdc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01a      	beq.n	8002a80 <HAL_DMA_Abort_IT+0x98>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac8 <HAL_DMA_Abort_IT+0xe0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d012      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x92>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1c      	ldr	r2, [pc, #112]	@ (8002acc <HAL_DMA_Abort_IT+0xe4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00a      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x8c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <HAL_DMA_Abort_IT+0xe8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <HAL_DMA_Abort_IT+0x86>
 8002a68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a6c:	e00e      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a72:	e00b      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a78:	e008      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a7e:	e005      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a84:	e002      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a86:	2310      	movs	r3, #16
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_Abort_IT+0xa4>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4a11      	ldr	r2, [pc, #68]	@ (8002ad4 <HAL_DMA_Abort_IT+0xec>)
 8002a8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
    } 
  }
  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40020008 	.word	0x40020008
 8002ac0:	4002001c 	.word	0x4002001c
 8002ac4:	40020030 	.word	0x40020030
 8002ac8:	40020044 	.word	0x40020044
 8002acc:	40020058 	.word	0x40020058
 8002ad0:	4002006c 	.word	0x4002006c
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b08b      	sub	sp, #44	@ 0x2c
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e169      	b.n	8002dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aec:	2201      	movs	r2, #1
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8158 	bne.w	8002dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a9a      	ldr	r2, [pc, #616]	@ (8002d78 <HAL_GPIO_Init+0x2a0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d05e      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b14:	4a98      	ldr	r2, [pc, #608]	@ (8002d78 <HAL_GPIO_Init+0x2a0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d875      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b1a:	4a98      	ldr	r2, [pc, #608]	@ (8002d7c <HAL_GPIO_Init+0x2a4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d058      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b20:	4a96      	ldr	r2, [pc, #600]	@ (8002d7c <HAL_GPIO_Init+0x2a4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d86f      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b26:	4a96      	ldr	r2, [pc, #600]	@ (8002d80 <HAL_GPIO_Init+0x2a8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d052      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b2c:	4a94      	ldr	r2, [pc, #592]	@ (8002d80 <HAL_GPIO_Init+0x2a8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d869      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b32:	4a94      	ldr	r2, [pc, #592]	@ (8002d84 <HAL_GPIO_Init+0x2ac>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d04c      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b38:	4a92      	ldr	r2, [pc, #584]	@ (8002d84 <HAL_GPIO_Init+0x2ac>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d863      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b3e:	4a92      	ldr	r2, [pc, #584]	@ (8002d88 <HAL_GPIO_Init+0x2b0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d046      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b44:	4a90      	ldr	r2, [pc, #576]	@ (8002d88 <HAL_GPIO_Init+0x2b0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d85d      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b4a:	2b12      	cmp	r3, #18
 8002b4c:	d82a      	bhi.n	8002ba4 <HAL_GPIO_Init+0xcc>
 8002b4e:	2b12      	cmp	r3, #18
 8002b50:	d859      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b52:	a201      	add	r2, pc, #4	@ (adr r2, 8002b58 <HAL_GPIO_Init+0x80>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002bd3 	.word	0x08002bd3
 8002b5c:	08002bad 	.word	0x08002bad
 8002b60:	08002bbf 	.word	0x08002bbf
 8002b64:	08002c01 	.word	0x08002c01
 8002b68:	08002c07 	.word	0x08002c07
 8002b6c:	08002c07 	.word	0x08002c07
 8002b70:	08002c07 	.word	0x08002c07
 8002b74:	08002c07 	.word	0x08002c07
 8002b78:	08002c07 	.word	0x08002c07
 8002b7c:	08002c07 	.word	0x08002c07
 8002b80:	08002c07 	.word	0x08002c07
 8002b84:	08002c07 	.word	0x08002c07
 8002b88:	08002c07 	.word	0x08002c07
 8002b8c:	08002c07 	.word	0x08002c07
 8002b90:	08002c07 	.word	0x08002c07
 8002b94:	08002c07 	.word	0x08002c07
 8002b98:	08002c07 	.word	0x08002c07
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002bc9 	.word	0x08002bc9
 8002ba4:	4a79      	ldr	r2, [pc, #484]	@ (8002d8c <HAL_GPIO_Init+0x2b4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002baa:	e02c      	b.n	8002c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	623b      	str	r3, [r7, #32]
          break;
 8002bb2:	e029      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	e024      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	623b      	str	r3, [r7, #32]
          break;
 8002bc6:	e01f      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	623b      	str	r3, [r7, #32]
          break;
 8002bd0:	e01a      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e013      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be8:	2308      	movs	r3, #8
 8002bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	611a      	str	r2, [r3, #16]
          break;
 8002bf2:	e009      	b.n	8002c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	615a      	str	r2, [r3, #20]
          break;
 8002bfe:	e003      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          break;
 8002c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2bff      	cmp	r3, #255	@ 0xff
 8002c0c:	d801      	bhi.n	8002c12 <HAL_GPIO_Init+0x13a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_Init+0x13e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2bff      	cmp	r3, #255	@ 0xff
 8002c1c:	d802      	bhi.n	8002c24 <HAL_GPIO_Init+0x14c>
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x152>
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	3b08      	subs	r3, #8
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	210f      	movs	r1, #15
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	431a      	orrs	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80b1 	beq.w	8002dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c58:	4b4d      	ldr	r3, [pc, #308]	@ (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c70:	4a48      	ldr	r2, [pc, #288]	@ (8002d94 <HAL_GPIO_Init+0x2bc>)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a40      	ldr	r2, [pc, #256]	@ (8002d98 <HAL_GPIO_Init+0x2c0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_GPIO_Init+0x1ec>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d9c <HAL_GPIO_Init+0x2c4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_GPIO_Init+0x1e8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8002da0 <HAL_GPIO_Init+0x2c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <HAL_GPIO_Init+0x1e4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	@ (8002da4 <HAL_GPIO_Init+0x2cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_GPIO_Init+0x1e0>
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e004      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e002      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc8:	f002 0203 	and.w	r2, r2, #3
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cd6:	492f      	ldr	r1, [pc, #188]	@ (8002d94 <HAL_GPIO_Init+0x2bc>)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d006      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	492c      	ldr	r1, [pc, #176]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	4928      	ldr	r1, [pc, #160]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d18:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4922      	ldr	r1, [pc, #136]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d26:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	491e      	ldr	r1, [pc, #120]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4918      	ldr	r1, [pc, #96]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4914      	ldr	r1, [pc, #80]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d021      	beq.n	8002dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d68:	4b0f      	ldr	r3, [pc, #60]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	490e      	ldr	r1, [pc, #56]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
 8002d74:	e021      	b.n	8002dba <HAL_GPIO_Init+0x2e2>
 8002d76:	bf00      	nop
 8002d78:	10320000 	.word	0x10320000
 8002d7c:	10310000 	.word	0x10310000
 8002d80:	10220000 	.word	0x10220000
 8002d84:	10210000 	.word	0x10210000
 8002d88:	10120000 	.word	0x10120000
 8002d8c:	10110000 	.word	0x10110000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40010c00 	.word	0x40010c00
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4909      	ldr	r1, [pc, #36]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f ae8e 	bne.w	8002aec <HAL_GPIO_Init+0x14>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	372c      	adds	r7, #44	@ 0x2c
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	@ 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002dee:	e09a      	b.n	8002f26 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 808d 	beq.w	8002f20 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002e06:	4a4e      	ldr	r2, [pc, #312]	@ (8002f40 <HAL_GPIO_DeInit+0x160>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4013      	ands	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	@ (8002f44 <HAL_GPIO_DeInit+0x164>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_GPIO_DeInit+0x78>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a45      	ldr	r2, [pc, #276]	@ (8002f48 <HAL_GPIO_DeInit+0x168>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00d      	beq.n	8002e54 <HAL_GPIO_DeInit+0x74>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a44      	ldr	r2, [pc, #272]	@ (8002f4c <HAL_GPIO_DeInit+0x16c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d007      	beq.n	8002e50 <HAL_GPIO_DeInit+0x70>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a43      	ldr	r2, [pc, #268]	@ (8002f50 <HAL_GPIO_DeInit+0x170>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_GPIO_DeInit+0x6c>
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e006      	b.n	8002e5a <HAL_GPIO_DeInit+0x7a>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	e004      	b.n	8002e5a <HAL_GPIO_DeInit+0x7a>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e002      	b.n	8002e5a <HAL_GPIO_DeInit+0x7a>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_GPIO_DeInit+0x7a>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f002 0203 	and.w	r2, r2, #3
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	4093      	lsls	r3, r2
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d132      	bne.n	8002ed0 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	4938      	ldr	r1, [pc, #224]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002e78:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	4934      	ldr	r1, [pc, #208]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002e86:	4b33      	ldr	r3, [pc, #204]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	4931      	ldr	r1, [pc, #196]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002e94:	4b2f      	ldr	r3, [pc, #188]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	492d      	ldr	r1, [pc, #180]	@ (8002f54 <HAL_GPIO_DeInit+0x174>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002eb2:	4a23      	ldr	r2, [pc, #140]	@ (8002f40 <HAL_GPIO_DeInit+0x160>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	481f      	ldr	r0, [pc, #124]	@ (8002f40 <HAL_GPIO_DeInit+0x160>)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	400a      	ands	r2, r1
 8002eca:	3302      	adds	r3, #2
 8002ecc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2bff      	cmp	r3, #255	@ 0xff
 8002ed4:	d801      	bhi.n	8002eda <HAL_GPIO_DeInit+0xfa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	e001      	b.n	8002ede <HAL_GPIO_DeInit+0xfe>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2bff      	cmp	r3, #255	@ 0xff
 8002ee4:	d802      	bhi.n	8002eec <HAL_GPIO_DeInit+0x10c>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	e002      	b.n	8002ef2 <HAL_GPIO_DeInit+0x112>
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3b08      	subs	r3, #8
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	210f      	movs	r1, #15
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	2104      	movs	r1, #4
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f47f af5e 	bne.w	8002df0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40010800 	.word	0x40010800
 8002f48:	40010c00 	.word	0x40010c00
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	40011400 	.word	0x40011400
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f68:	787b      	ldrb	r3, [r7, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f74:	e003      	b.n	8002f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	611a      	str	r2, [r3, #16]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43d9      	mvns	r1, r3
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	400b      	ands	r3, r1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	611a      	str	r2, [r3, #16]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f00a fbe8 	bl	800d7b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0e8      	b.n	80031d0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f009 fd22 	bl	800ca5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2203      	movs	r2, #3
 800301c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fb23 	bl	8007676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303a:	f004 faf9 	bl	8007630 <USB_CoreInit>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0bf      	b.n	80031d0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f004 fb27 	bl	80076aa <USB_SetCurrentMode>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0b0      	b.n	80031d0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	e03e      	b.n	80030f2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	3311      	adds	r3, #17
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	3310      	adds	r3, #16
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	3313      	adds	r3, #19
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	440b      	add	r3, r1
 80030be:	3320      	adds	r3, #32
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	3324      	adds	r3, #36	@ 0x24
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	3301      	adds	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d3bb      	bcc.n	8003074 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e044      	b.n	800318c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3301      	adds	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	791b      	ldrb	r3, [r3, #4]
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	429a      	cmp	r2, r3
 8003194:	d3b5      	bcc.n	8003102 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a0:	f004 fa8f 	bl	80076c2 <USB_DevInit>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e00c      	b.n	80031d0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f006 fd0e 	bl	8009bea <USB_DevDisconnect>

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_PCD_Start+0x16>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e016      	b.n	800321c <HAL_PCD_Start+0x44>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fa25 	bl	800764a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003200:	2101      	movs	r1, #1
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f009 fe7f 	bl	800cf06 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f006 fce2 	bl	8009bd6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f006 fce4 	bl	8009bfe <USB_ReadInterrupts>
 8003236:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb03 	bl	800384e <PCD_EP_ISR_Handler>

    return;
 8003248:	e119      	b.n	800347e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800325c:	b29a      	uxth	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003266:	b292      	uxth	r2, r2
 8003268:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f009 fc70 	bl	800cb52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003272:	2100      	movs	r1, #0
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f905 	bl	8003484 <HAL_PCD_SetAddress>

    return;
 800327a:	e100      	b.n	800347e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003298:	b292      	uxth	r2, r2
 800329a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800329e:	e0ee      	b.n	800347e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032bc:	b292      	uxth	r2, r2
 80032be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80032c2:	e0dc      	b.n	800347e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d027      	beq.n	800331e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0204 	bic.w	r2, r2, #4
 80032e0:	b292      	uxth	r2, r2
 80032e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0208 	bic.w	r2, r2, #8
 80032f8:	b292      	uxth	r2, r2
 80032fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f009 fc60 	bl	800cbc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003316:	b292      	uxth	r2, r2
 8003318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800331c:	e0af      	b.n	800347e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8083 	beq.w	8003430 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e010      	b.n	8003352 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	7ffb      	ldrb	r3, [r7, #31]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	441a      	add	r2, r3
 800333c:	7ffb      	ldrb	r3, [r7, #31]
 800333e:	8812      	ldrh	r2, [r2, #0]
 8003340:	b292      	uxth	r2, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	3320      	adds	r3, #32
 8003346:	443b      	add	r3, r7
 8003348:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800334c:	7ffb      	ldrb	r3, [r7, #31]
 800334e:	3301      	adds	r3, #1
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b07      	cmp	r3, #7
 8003356:	d9eb      	bls.n	8003330 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003360:	b29a      	uxth	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	b292      	uxth	r2, r2
 800336c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	b292      	uxth	r2, r2
 8003384:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003388:	bf00      	nop
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003392:	b29b      	uxth	r3, r3
 8003394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f6      	beq.n	800338a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ae:	b292      	uxth	r2, r2
 80033b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e00f      	b.n	80033da <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	4611      	mov	r1, r2
 80033c2:	7ffa      	ldrb	r2, [r7, #31]
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	440a      	add	r2, r1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	3320      	adds	r3, #32
 80033cc:	443b      	add	r3, r7
 80033ce:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80033d2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	3301      	adds	r3, #1
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	7ffb      	ldrb	r3, [r7, #31]
 80033dc:	2b07      	cmp	r3, #7
 80033de:	d9ec      	bls.n	80033ba <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0208 	orr.w	r2, r2, #8
 80033f2:	b292      	uxth	r2, r2
 80033f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003400:	b29a      	uxth	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800340a:	b292      	uxth	r2, r2
 800340c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0204 	orr.w	r2, r2, #4
 8003422:	b292      	uxth	r2, r2
 8003424:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f009 fbb1 	bl	800cb90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800342e:	e026      	b.n	800347e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00f      	beq.n	800345a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800344c:	b292      	uxth	r2, r2
 800344e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f009 fb6f 	bl	800cb36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003458:	e011      	b.n	800347e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00c      	beq.n	800347e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003476:	b292      	uxth	r2, r2
 8003478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800347c:	bf00      	nop
  }
}
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_PCD_SetAddress+0x1a>
 800349a:	2302      	movs	r3, #2
 800349c:	e012      	b.n	80034c4 <HAL_PCD_SetAddress+0x40>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f006 fb7b 	bl	8009bb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	70fb      	strb	r3, [r7, #3]
 80034de:	460b      	mov	r3, r1
 80034e0:	803b      	strh	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da0e      	bge.n	8003510 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 0207 	and.w	r2, r3, #7
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	3310      	adds	r3, #16
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	705a      	strb	r2, [r3, #1]
 800350e:	e00e      	b.n	800352e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	f003 0207 	and.w	r2, r3, #7
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800353a:	883a      	ldrh	r2, [r7, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	78ba      	ldrb	r2, [r7, #2]
 8003544:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d102      	bne.n	8003552 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_PCD_EP_Open+0x94>
 800355c:	2302      	movs	r3, #2
 800355e:	e00e      	b.n	800357e <HAL_PCD_EP_Open+0xb2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	4618      	mov	r0, r3
 8003570:	f004 f8c4 	bl	80076fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800357c:	7afb      	ldrb	r3, [r7, #11]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003596:	2b00      	cmp	r3, #0
 8003598:	da0e      	bge.n	80035b8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	f003 0207 	and.w	r2, r3, #7
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	3310      	adds	r3, #16
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	705a      	strb	r2, [r3, #1]
 80035b6:	e00e      	b.n	80035d6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 0207 	and.w	r2, r3, #7
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_PCD_EP_Close+0x6a>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e00e      	b.n	800360e <HAL_PCD_EP_Close+0x88>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fc3c 	bl	8007e7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	460b      	mov	r3, r1
 8003624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	f003 0207 	and.w	r2, r3, #7
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	b2da      	uxtb	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6979      	ldr	r1, [r7, #20]
 8003668:	4618      	mov	r0, r3
 800366a:	f004 fdf3 	bl	8008254 <USB_EPStartXfer>

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	460b      	mov	r3, r1
 8003686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	f003 0207 	and.w	r2, r3, #7
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	3310      	adds	r3, #16
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2201      	movs	r2, #1
 80036c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c4:	7afb      	ldrb	r3, [r7, #11]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 fdbc 	bl	8008254 <USB_EPStartXfer>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	7912      	ldrb	r2, [r2, #4]
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e04c      	b.n	800379e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da0e      	bge.n	800372a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 0207 	and.w	r2, r3, #7
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	3310      	adds	r3, #16
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	705a      	strb	r2, [r3, #1]
 8003728:	e00c      	b.n	8003744 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_PCD_EP_SetStall+0x7e>
 8003760:	2302      	movs	r3, #2
 8003762:	e01c      	b.n	800379e <HAL_PCD_EP_SetStall+0xb8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68f9      	ldr	r1, [r7, #12]
 8003772:	4618      	mov	r0, r3
 8003774:	f006 f91f 	bl	80099b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f006 fa44 	bl	8009c1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	7912      	ldrb	r2, [r2, #4]
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e040      	b.n	8003846 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da0e      	bge.n	80037ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 0207 	and.w	r2, r3, #7
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	3310      	adds	r3, #16
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	705a      	strb	r2, [r3, #1]
 80037e8:	e00e      	b.n	8003808 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 0207 	and.w	r2, r3, #7
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	b2da      	uxtb	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_PCD_EP_ClrStall+0x82>
 8003824:	2302      	movs	r3, #2
 8003826:	e00e      	b.n	8003846 <HAL_PCD_EP_ClrStall+0xa0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68f9      	ldr	r1, [r7, #12]
 8003836:	4618      	mov	r0, r3
 8003838:	f006 f90d 	bl	8009a56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b096      	sub	sp, #88	@ 0x58
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003856:	e3bb      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003860:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003872:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8175 	bne.w	8003b66 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800387c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d14e      	bne.n	8003926 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003898:	81fb      	strh	r3, [r7, #14]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	89fb      	ldrh	r3, [r7, #14]
 80038a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3310      	adds	r3, #16
 80038b0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	3302      	adds	r3, #2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	441a      	add	r2, r3
 80038e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038ec:	2100      	movs	r1, #0
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f009 f907 	bl	800cb02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7b5b      	ldrb	r3, [r3, #13]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8368 	beq.w	8003fd0 <PCD_EP_ISR_Handler+0x782>
 8003900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 8363 	bne.w	8003fd0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7b5b      	ldrb	r3, [r3, #13]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003914:	b2da      	uxtb	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	735a      	strb	r2, [r3, #13]
 8003924:	e354      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800392c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003938:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800393c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003940:	2b00      	cmp	r3, #0
 8003942:	d034      	beq.n	80039ae <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394c:	b29b      	uxth	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	3306      	adds	r3, #6
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800397a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800397e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003980:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003982:	b29b      	uxth	r3, r3
 8003984:	f006 f99a 	bl	8009cbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29a      	uxth	r2, r3
 8003990:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003994:	4013      	ands	r3, r2
 8003996:	823b      	strh	r3, [r7, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	8a3a      	ldrh	r2, [r7, #16]
 800399e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039a2:	b292      	uxth	r2, r2
 80039a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f009 f87e 	bl	800caa8 <HAL_PCD_SetupStageCallback>
 80039ac:	e310      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f280 830c 	bge.w	8003fd0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80039c4:	4013      	ands	r3, r2
 80039c6:	83fb      	strh	r3, [r7, #30]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	8bfa      	ldrh	r2, [r7, #30]
 80039ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039d2:	b292      	uxth	r2, r2
 80039d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039de:	b29b      	uxth	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	3306      	adds	r3, #6
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d019      	beq.n	8003a3e <PCD_EP_ISR_Handler+0x1f0>
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d015      	beq.n	8003a3e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a18:	6959      	ldr	r1, [r3, #20]
 8003a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f006 f94a 	bl	8009cbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	441a      	add	r2, r3
 8003a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a36:	2100      	movs	r1, #0
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f009 f847 	bl	800cacc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003a48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 82bd 	bne.w	8003fd0 <PCD_EP_ISR_Handler+0x782>
 8003a56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a62:	f000 82b5 	beq.w	8003fd0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a9c:	d91d      	bls.n	8003ada <PCD_EP_ISR_Handler+0x28c>
 8003a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <PCD_EP_ISR_Handler+0x26a>
 8003ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	029b      	lsls	r3, r3, #10
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	e026      	b.n	8003b28 <PCD_EP_ISR_Handler+0x2da>
 8003ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <PCD_EP_ISR_Handler+0x2aa>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	801a      	strh	r2, [r3, #0]
 8003af6:	e017      	b.n	8003b28 <PCD_EP_ISR_Handler+0x2da>
 8003af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	085b      	lsrs	r3, r3, #1
 8003afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <PCD_EP_ISR_Handler+0x2c4>
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b0e:	3301      	adds	r3, #1
 8003b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b38:	827b      	strh	r3, [r7, #18]
 8003b3a:	8a7b      	ldrh	r3, [r7, #18]
 8003b3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003b40:	827b      	strh	r3, [r7, #18]
 8003b42:	8a7b      	ldrh	r3, [r7, #18]
 8003b44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b48:	827b      	strh	r3, [r7, #18]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	8a7b      	ldrh	r3, [r7, #18]
 8003b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	8013      	strh	r3, [r2, #0]
 8003b64:	e234      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b7a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f280 80fc 	bge.w	8003d7c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003bb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003bba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd2:	7b1b      	ldrb	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d125      	bne.n	8003c24 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	3306      	adds	r3, #6
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c00:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003c04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8092 	beq.w	8003d32 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	6959      	ldr	r1, [r3, #20]
 8003c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c18:	88da      	ldrh	r2, [r3, #6]
 8003c1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c1e:	f006 f84d 	bl	8009cbc <USB_ReadPMA>
 8003c22:	e086      	b.n	8003d32 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c26:	78db      	ldrb	r3, [r3, #3]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d10a      	bne.n	8003c42 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c30:	461a      	mov	r2, r3
 8003c32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f9d9 	bl	8003fec <HAL_PCD_EP_DB_Receive>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003c40:	e077      	b.n	8003d32 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d024      	beq.n	8003cea <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ccc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02e      	beq.n	8003d32 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cda:	6959      	ldr	r1, [r3, #20]
 8003cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cde:	891a      	ldrh	r2, [r3, #8]
 8003ce0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ce4:	f005 ffea 	bl	8009cbc <USB_ReadPMA>
 8003ce8:	e023      	b.n	8003d32 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3306      	adds	r3, #6
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d12:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003d16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d24:	6959      	ldr	r1, [r3, #20]
 8003d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d28:	895a      	ldrh	r2, [r3, #10]
 8003d2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d2e:	f005 ffc5 	bl	8009cbc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d3a:	441a      	add	r2, r3
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d48:	441a      	add	r2, r3
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <PCD_EP_ISR_Handler+0x514>
 8003d56:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d206      	bcs.n	8003d70 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f008 feaf 	bl	800cacc <HAL_PCD_DataOutStageCallback>
 8003d6e:	e005      	b.n	8003d7c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 fa6c 	bl	8008254 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8123 	beq.w	8003fd0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d8a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	3310      	adds	r3, #16
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	441a      	add	r2, r3
 8003dca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ddc:	78db      	ldrb	r3, [r3, #3]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	f040 80a2 	bne.w	8003f28 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dec:	7b1b      	ldrb	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8093 	beq.w	8003f1a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003df4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d046      	beq.n	8003e8e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d126      	bne.n	8003e56 <PCD_EP_ISR_Handler+0x608>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	4413      	add	r3, r2
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	011a      	lsls	r2, r3, #4
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	4413      	add	r3, r2
 8003e2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	e061      	b.n	8003f1a <PCD_EP_ISR_Handler+0x6cc>
 8003e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d15d      	bne.n	8003f1a <PCD_EP_ISR_Handler+0x6cc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e72:	4413      	add	r3, r2
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	011a      	lsls	r2, r3, #4
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	4413      	add	r3, r2
 8003e80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	e045      	b.n	8003f1a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d126      	bne.n	8003eea <PCD_EP_ISR_Handler+0x69c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb0:	4413      	add	r3, r2
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	011a      	lsls	r2, r3, #4
 8003eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	e017      	b.n	8003f1a <PCD_EP_ISR_Handler+0x6cc>
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d113      	bne.n	8003f1a <PCD_EP_ISR_Handler+0x6cc>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f00:	4413      	add	r3, r2
 8003f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	011a      	lsls	r2, r3, #4
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	2200      	movs	r2, #0
 8003f18:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f008 fdee 	bl	800cb02 <HAL_PCD_DataInStageCallback>
 8003f26:	e053      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003f28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d146      	bne.n	8003fc2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d907      	bls.n	8003f7c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f74:	1ad2      	subs	r2, r2, r3
 8003f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f78:	619a      	str	r2, [r3, #24]
 8003f7a:	e002      	b.n	8003f82 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7e:	2200      	movs	r2, #0
 8003f80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f008 fdb6 	bl	800cb02 <HAL_PCD_DataInStageCallback>
 8003f96:	e01b      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003fa0:	441a      	add	r2, r3
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003fae:	441a      	add	r2, r3
 8003fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 f94a 	bl	8008254 <USB_EPStartXfer>
 8003fc0:	e006      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003fc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f91b 	bl	8004206 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b21b      	sxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f6ff ac3b 	blt.w	8003858 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3758      	adds	r7, #88	@ 0x58
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d07e      	beq.n	8004102 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800400c:	b29b      	uxth	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	3302      	adds	r3, #2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800402c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	8b7b      	ldrh	r3, [r7, #26]
 8004034:	429a      	cmp	r2, r3
 8004036:	d306      	bcc.n	8004046 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	8b7b      	ldrh	r3, [r7, #26]
 800403e:	1ad2      	subs	r2, r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	619a      	str	r2, [r3, #24]
 8004044:	e002      	b.n	800404c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d123      	bne.n	800409c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800406a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406e:	833b      	strh	r3, [r7, #24]
 8004070:	8b3b      	ldrh	r3, [r7, #24]
 8004072:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004076:	833b      	strh	r3, [r7, #24]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	8b3b      	ldrh	r3, [r7, #24]
 8004088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800408c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01f      	beq.n	80040e6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c0:	82fb      	strh	r3, [r7, #22]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	8afb      	ldrh	r3, [r7, #22]
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040e6:	8b7b      	ldrh	r3, [r7, #26]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8087 	beq.w	80041fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6959      	ldr	r1, [r3, #20]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	891a      	ldrh	r2, [r3, #8]
 80040fa:	8b7b      	ldrh	r3, [r7, #26]
 80040fc:	f005 fdde 	bl	8009cbc <USB_ReadPMA>
 8004100:	e07c      	b.n	80041fc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	3306      	adds	r3, #6
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	8b7b      	ldrh	r3, [r7, #26]
 8004132:	429a      	cmp	r2, r3
 8004134:	d306      	bcc.n	8004144 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	8b7b      	ldrh	r3, [r7, #26]
 800413c:	1ad2      	subs	r2, r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	619a      	str	r2, [r3, #24]
 8004142:	e002      	b.n	800414a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d123      	bne.n	800419a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416c:	83fb      	strh	r3, [r7, #30]
 800416e:	8bfb      	ldrh	r3, [r7, #30]
 8004170:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004174:	83fb      	strh	r3, [r7, #30]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	8bfb      	ldrh	r3, [r7, #30]
 8004186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800418e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004196:	b29b      	uxth	r3, r3
 8004198:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11f      	bne.n	80041e4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	83bb      	strh	r3, [r7, #28]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	8bbb      	ldrh	r3, [r7, #28]
 80041d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041e4:	8b7b      	ldrh	r3, [r7, #26]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6959      	ldr	r1, [r3, #20]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	895a      	ldrh	r2, [r3, #10]
 80041f6:	8b7b      	ldrh	r3, [r7, #26]
 80041f8:	f005 fd60 	bl	8009cbc <USB_ReadPMA>
    }
  }

  return count;
 80041fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b0a4      	sub	sp, #144	@ 0x90
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 81dd 	beq.w	80045da <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004228:	b29b      	uxth	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	3302      	adds	r3, #2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004248:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004254:	429a      	cmp	r2, r3
 8004256:	d907      	bls.n	8004268 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004260:	1ad2      	subs	r2, r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	619a      	str	r2, [r3, #24]
 8004266:	e002      	b.n	800426e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 80b9 	bne.w	80043ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	785b      	ldrb	r3, [r3, #1]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d126      	bne.n	80042ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800428e:	b29b      	uxth	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	4413      	add	r3, r2
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	011a      	lsls	r2, r3, #4
 800429e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a0:	4413      	add	r3, r2
 80042a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	e01a      	b.n	8004304 <HAL_PCD_EP_DB_Transmit+0xfe>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d116      	bne.n	8004304 <HAL_PCD_EP_DB_Transmit+0xfe>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	4413      	add	r3, r2
 80042ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	011a      	lsls	r2, r3, #4
 80042f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f6:	4413      	add	r3, r2
 80042f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	2200      	movs	r2, #0
 8004302:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d126      	bne.n	8004360 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004320:	b29b      	uxth	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	011a      	lsls	r2, r3, #4
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004344:	b29a      	uxth	r2, r3
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004358:	b29a      	uxth	r2, r3
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e017      	b.n	8004390 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d113      	bne.n	8004390 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004370:	b29b      	uxth	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	4413      	add	r3, r2
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	011a      	lsls	r2, r3, #4
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	4413      	add	r3, r2
 8004384:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004388:	623b      	str	r3, [r7, #32]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2200      	movs	r2, #0
 800438e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	4619      	mov	r1, r3
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f008 fbb3 	bl	800cb02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 82fc 	beq.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c2:	82fb      	strh	r3, [r7, #22]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	8afb      	ldrh	r3, [r7, #22]
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
 80043e8:	e2da      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d021      	beq.n	8004438 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800442c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800443e:	2b01      	cmp	r3, #1
 8004440:	f040 82ae 	bne.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800444c:	441a      	add	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800445a:	441a      	add	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d30b      	bcc.n	8004484 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	621a      	str	r2, [r3, #32]
 8004482:	e017      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800448c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004490:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800449c:	e00a      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2200      	movs	r2, #0
 80044b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d165      	bne.n	8004588 <HAL_PCD_EP_DB_Transmit+0x382>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d0:	4413      	add	r3, r2
 80044d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	011a      	lsls	r2, r3, #4
 80044da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044dc:	4413      	add	r3, r2
 80044de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80044fa:	d91d      	bls.n	8004538 <HAL_PCD_EP_DB_Transmit+0x332>
 80044fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <HAL_PCD_EP_DB_Transmit+0x310>
 8004510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004512:	3b01      	subs	r3, #1
 8004514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29a      	uxth	r2, r3
 800451c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800451e:	b29b      	uxth	r3, r3
 8004520:	029b      	lsls	r3, r3, #10
 8004522:	b29b      	uxth	r3, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004530:	b29a      	uxth	r2, r3
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	e044      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <HAL_PCD_EP_DB_Transmit+0x350>
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800454e:	b29a      	uxth	r2, r3
 8004550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	e035      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_PCD_EP_DB_Transmit+0x36a>
 800456a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800456c:	3301      	adds	r3, #1
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29a      	uxth	r2, r3
 8004576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004578:	b29b      	uxth	r3, r3
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	b29b      	uxth	r3, r3
 800457e:	4313      	orrs	r3, r2
 8004580:	b29a      	uxth	r2, r3
 8004582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e01c      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d118      	bne.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	647b      	str	r3, [r7, #68]	@ 0x44
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a4:	4413      	add	r3, r2
 80045a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	011a      	lsls	r2, r3, #4
 80045ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045b0:	4413      	add	r3, r2
 80045b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6959      	ldr	r1, [r3, #20]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	891a      	ldrh	r2, [r3, #8]
 80045ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f005 fb2d 	bl	8009c32 <USB_WritePMA>
 80045d8:	e1e2      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	3306      	adds	r3, #6
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004602:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800460e:	429a      	cmp	r2, r3
 8004610:	d307      	bcc.n	8004622 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	619a      	str	r2, [r3, #24]
 8004620:	e002      	b.n	8004628 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 80c0 	bne.w	80047b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d126      	bne.n	8004688 <HAL_PCD_EP_DB_Transmit+0x482>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004648:	b29b      	uxth	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800464e:	4413      	add	r3, r2
 8004650:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	011a      	lsls	r2, r3, #4
 8004658:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800465a:	4413      	add	r3, r2
 800465c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466c:	b29a      	uxth	r2, r3
 800466e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004680:	b29a      	uxth	r2, r3
 8004682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e01a      	b.n	80046be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d116      	bne.n	80046be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	667b      	str	r3, [r7, #100]	@ 0x64
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046a4:	4413      	add	r3, r2
 80046a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	011a      	lsls	r2, r3, #4
 80046ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046b0:	4413      	add	r3, r2
 80046b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80046b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80046b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ba:	2200      	movs	r2, #0
 80046bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d12b      	bne.n	8004724 <HAL_PCD_EP_DB_Transmit+0x51e>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046da:	b29b      	uxth	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e0:	4413      	add	r3, r2
 80046e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	011a      	lsls	r2, r3, #4
 80046ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ec:	4413      	add	r3, r2
 80046ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004702:	b29a      	uxth	r2, r3
 8004704:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471a:	b29a      	uxth	r2, r3
 800471c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e017      	b.n	8004754 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d113      	bne.n	8004754 <HAL_PCD_EP_DB_Transmit+0x54e>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004734:	b29b      	uxth	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800473a:	4413      	add	r3, r2
 800473c:	677b      	str	r3, [r7, #116]	@ 0x74
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	011a      	lsls	r2, r3, #4
 8004744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004746:	4413      	add	r3, r2
 8004748:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800474c:	673b      	str	r3, [r7, #112]	@ 0x70
 800474e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004750:	2200      	movs	r2, #0
 8004752:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	4619      	mov	r1, r3
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f008 f9d1 	bl	800cb02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 811a 	bne.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004786:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800479c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	8013      	strh	r3, [r2, #0]
 80047b0:	e0f6      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d121      	bne.n	8004800 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004806:	2b01      	cmp	r3, #1
 8004808:	f040 80ca 	bne.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004814:	441a      	add	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004822:	441a      	add	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d30b      	bcc.n	800484c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004844:	1ad2      	subs	r2, r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	621a      	str	r2, [r3, #32]
 800484a:	e017      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d108      	bne.n	8004866 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004854:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004858:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004864:	e00a      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	657b      	str	r3, [r7, #84]	@ 0x54
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d165      	bne.n	8004956 <HAL_PCD_EP_DB_Transmit+0x750>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800489e:	4413      	add	r3, r2
 80048a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	011a      	lsls	r2, r3, #4
 80048a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048aa:	4413      	add	r3, r2
 80048ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	b29a      	uxth	r2, r3
 80048be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80048c8:	d91d      	bls.n	8004906 <HAL_PCD_EP_DB_Transmit+0x700>
 80048ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80048de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048e0:	3b01      	subs	r3, #1
 80048e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fe:	b29a      	uxth	r2, r3
 8004900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	e041      	b.n	800498a <HAL_PCD_EP_DB_Transmit+0x784>
 8004906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_PCD_EP_DB_Transmit+0x71e>
 800490e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491c:	b29a      	uxth	r2, r3
 800491e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	e032      	b.n	800498a <HAL_PCD_EP_DB_Transmit+0x784>
 8004924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800492c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_PCD_EP_DB_Transmit+0x738>
 8004938:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800493a:	3301      	adds	r3, #1
 800493c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800493e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29a      	uxth	r2, r3
 8004944:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004946:	b29b      	uxth	r3, r3
 8004948:	029b      	lsls	r3, r3, #10
 800494a:	b29b      	uxth	r3, r3
 800494c:	4313      	orrs	r3, r2
 800494e:	b29a      	uxth	r2, r3
 8004950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	e019      	b.n	800498a <HAL_PCD_EP_DB_Transmit+0x784>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	785b      	ldrb	r3, [r3, #1]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d115      	bne.n	800498a <HAL_PCD_EP_DB_Transmit+0x784>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496c:	4413      	add	r3, r2
 800496e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	011a      	lsls	r2, r3, #4
 8004976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004978:	4413      	add	r3, r2
 800497a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800497e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004984:	b29a      	uxth	r2, r3
 8004986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004988:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6959      	ldr	r1, [r3, #20]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	895a      	ldrh	r2, [r3, #10]
 8004996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800499a:	b29b      	uxth	r3, r3
 800499c:	f005 f949 	bl	8009c32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ba:	82bb      	strh	r3, [r7, #20]
 80049bc:	8abb      	ldrh	r3, [r7, #20]
 80049be:	f083 0310 	eor.w	r3, r3, #16
 80049c2:	82bb      	strh	r3, [r7, #20]
 80049c4:	8abb      	ldrh	r3, [r7, #20]
 80049c6:	f083 0320 	eor.w	r3, r3, #32
 80049ca:	82bb      	strh	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	8abb      	ldrh	r3, [r7, #20]
 80049dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3790      	adds	r7, #144	@ 0x90
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b087      	sub	sp, #28
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	817b      	strh	r3, [r7, #10]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a0c:	897b      	ldrh	r3, [r7, #10]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00b      	beq.n	8004a30 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	f003 0207 	and.w	r2, r3, #7
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	3310      	adds	r3, #16
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e009      	b.n	8004a44 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a30:	897a      	ldrh	r2, [r7, #10]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d107      	bne.n	8004a5a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	80da      	strh	r2, [r3, #6]
 8004a58:	e00b      	b.n	8004a72 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e272      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8087 	beq.w	8004bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aa0:	4b92      	ldr	r3, [pc, #584]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004aac:	4b8f      	ldr	r3, [pc, #572]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d112      	bne.n	8004ade <HAL_RCC_OscConfig+0x5e>
 8004ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac6:	4b89      	ldr	r3, [pc, #548]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d06c      	beq.n	8004bac <HAL_RCC_OscConfig+0x12c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d168      	bne.n	8004bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e24c      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCC_OscConfig+0x76>
 8004ae8:	4b80      	ldr	r3, [pc, #512]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a7f      	ldr	r2, [pc, #508]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e02e      	b.n	8004b54 <HAL_RCC_OscConfig+0xd4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x98>
 8004afe:	4b7b      	ldr	r3, [pc, #492]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7a      	ldr	r2, [pc, #488]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b78      	ldr	r3, [pc, #480]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a77      	ldr	r2, [pc, #476]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e01d      	b.n	8004b54 <HAL_RCC_OscConfig+0xd4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0xbc>
 8004b22:	4b72      	ldr	r3, [pc, #456]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a71      	ldr	r2, [pc, #452]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6e      	ldr	r2, [pc, #440]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_OscConfig+0xd4>
 8004b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6a      	ldr	r2, [pc, #424]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4b68      	ldr	r3, [pc, #416]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a67      	ldr	r2, [pc, #412]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d013      	beq.n	8004b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7fd fa42 	bl	8001fe4 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fd fa3e 	bl	8001fe4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e200      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	4b5d      	ldr	r3, [pc, #372]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0xe4>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fd fa2e 	bl	8001fe4 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fd fa2a 	bl	8001fe4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e1ec      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9e:	4b53      	ldr	r3, [pc, #332]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x10c>
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bba:	4b4c      	ldr	r3, [pc, #304]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bc6:	4b49      	ldr	r3, [pc, #292]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d11c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x18c>
 8004bd2:	4b46      	ldr	r3, [pc, #280]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d116      	bne.n	8004c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x176>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e1c0      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4939      	ldr	r1, [pc, #228]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0a:	e03a      	b.n	8004c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c14:	4b36      	ldr	r3, [pc, #216]	@ (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fd f9e3 	bl	8001fe4 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c22:	f7fd f9df 	bl	8001fe4 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e1a1      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c34:	4b2d      	ldr	r3, [pc, #180]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c40:	4b2a      	ldr	r3, [pc, #168]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4927      	ldr	r1, [pc, #156]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]
 8004c54:	e015      	b.n	8004c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c56:	4b26      	ldr	r3, [pc, #152]	@ (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5c:	f7fd f9c2 	bl	8001fe4 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fd f9be 	bl	8001fe4 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e180      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c76:	4b1d      	ldr	r3, [pc, #116]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03a      	beq.n	8004d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d019      	beq.n	8004cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c96:	4b17      	ldr	r3, [pc, #92]	@ (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9c:	f7fd f9a2 	bl	8001fe4 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca4:	f7fd f99e 	bl	8001fe4 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e160      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <HAL_RCC_OscConfig+0x26c>)
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f000 face 	bl	8005264 <RCC_Delay>
 8004cc8:	e01c      	b.n	8004d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cca:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd0:	f7fd f988 	bl	8001fe4 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd6:	e00f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd8:	f7fd f984 	bl	8001fe4 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d908      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e146      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	42420000 	.word	0x42420000
 8004cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	4b92      	ldr	r3, [pc, #584]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e9      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a6 	beq.w	8004e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d16:	4b8b      	ldr	r3, [pc, #556]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	4b88      	ldr	r3, [pc, #544]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	4a87      	ldr	r2, [pc, #540]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d2c:	61d3      	str	r3, [r2, #28]
 8004d2e:	4b85      	ldr	r3, [pc, #532]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	60bb      	str	r3, [r7, #8]
 8004d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3e:	4b82      	ldr	r3, [pc, #520]	@ (8004f48 <HAL_RCC_OscConfig+0x4c8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d118      	bne.n	8004d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f48 <HAL_RCC_OscConfig+0x4c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f48 <HAL_RCC_OscConfig+0x4c8>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d56:	f7fd f945 	bl	8001fe4 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fd f941 	bl	8001fe4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b64      	cmp	r3, #100	@ 0x64
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e103      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d70:	4b75      	ldr	r3, [pc, #468]	@ (8004f48 <HAL_RCC_OscConfig+0x4c8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d106      	bne.n	8004d92 <HAL_RCC_OscConfig+0x312>
 8004d84:	4b6f      	ldr	r3, [pc, #444]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	4a6e      	ldr	r2, [pc, #440]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	6213      	str	r3, [r2, #32]
 8004d90:	e02d      	b.n	8004dee <HAL_RCC_OscConfig+0x36e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCC_OscConfig+0x334>
 8004d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4a69      	ldr	r2, [pc, #420]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	6213      	str	r3, [r2, #32]
 8004da6:	4b67      	ldr	r3, [pc, #412]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4a66      	ldr	r2, [pc, #408]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	f023 0304 	bic.w	r3, r3, #4
 8004db0:	6213      	str	r3, [r2, #32]
 8004db2:	e01c      	b.n	8004dee <HAL_RCC_OscConfig+0x36e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d10c      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x356>
 8004dbc:	4b61      	ldr	r3, [pc, #388]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4a60      	ldr	r2, [pc, #384]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	f043 0304 	orr.w	r3, r3, #4
 8004dc6:	6213      	str	r3, [r2, #32]
 8004dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6213      	str	r3, [r2, #32]
 8004dd4:	e00b      	b.n	8004dee <HAL_RCC_OscConfig+0x36e>
 8004dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	4a5a      	ldr	r2, [pc, #360]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	6213      	str	r3, [r2, #32]
 8004de2:	4b58      	ldr	r3, [pc, #352]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	4a57      	ldr	r2, [pc, #348]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d015      	beq.n	8004e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df6:	f7fd f8f5 	bl	8001fe4 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fd f8f1 	bl	8001fe4 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0b1      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e14:	4b4b      	ldr	r3, [pc, #300]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ee      	beq.n	8004dfe <HAL_RCC_OscConfig+0x37e>
 8004e20:	e014      	b.n	8004e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fd f8df 	bl	8001fe4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fd f8db 	bl	8001fe4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e09b      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e40:	4b40      	ldr	r3, [pc, #256]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ee      	bne.n	8004e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e52:	4b3c      	ldr	r3, [pc, #240]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4a3b      	ldr	r2, [pc, #236]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8087 	beq.w	8004f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e68:	4b36      	ldr	r3, [pc, #216]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d061      	beq.n	8004f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d146      	bne.n	8004f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b33      	ldr	r3, [pc, #204]	@ (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fd f8af 	bl	8001fe4 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fd f8ab 	bl	8001fe4 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e06d      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e9c:	4b29      	ldr	r3, [pc, #164]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb0:	d108      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	4921      	ldr	r1, [pc, #132]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a19      	ldr	r1, [r3, #32]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	491b      	ldr	r1, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004edc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee2:	f7fd f87f 	bl	8001fe4 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fd f87b 	bl	8001fe4 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e03d      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004efc:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x46a>
 8004f08:	e035      	b.n	8004f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0a:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <HAL_RCC_OscConfig+0x4cc>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fd f868 	bl	8001fe4 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd f864 	bl	8001fe4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e026      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x498>
 8004f36:	e01e      	b.n	8004f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e019      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <HAL_RCC_OscConfig+0x500>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d106      	bne.n	8004f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000

08004f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0d0      	b.n	800513a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f98:	4b6a      	ldr	r3, [pc, #424]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d910      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b67      	ldr	r3, [pc, #412]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 0207 	bic.w	r2, r3, #7
 8004fae:	4965      	ldr	r1, [pc, #404]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b8      	b.n	800513a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b50      	ldr	r3, [pc, #320]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494d      	ldr	r1, [pc, #308]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d040      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b47      	ldr	r3, [pc, #284]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d115      	bne.n	8005062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07f      	b.n	800513a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005042:	4b41      	ldr	r3, [pc, #260]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e073      	b.n	800513a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005052:	4b3d      	ldr	r3, [pc, #244]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e06b      	b.n	800513a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005062:	4b39      	ldr	r3, [pc, #228]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f023 0203 	bic.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4936      	ldr	r1, [pc, #216]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005074:	f7fc ffb6 	bl	8001fe4 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507a:	e00a      	b.n	8005092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507c:	f7fc ffb2 	bl	8001fe4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e053      	b.n	800513a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	4b2d      	ldr	r3, [pc, #180]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 020c 	and.w	r2, r3, #12
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d1eb      	bne.n	800507c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050a4:	4b27      	ldr	r3, [pc, #156]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d210      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b24      	ldr	r3, [pc, #144]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 0207 	bic.w	r2, r3, #7
 80050ba:	4922      	ldr	r1, [pc, #136]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b20      	ldr	r3, [pc, #128]	@ (8005144 <HAL_RCC_ClockConfig+0x1c0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e032      	b.n	800513a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4916      	ldr	r1, [pc, #88]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050fe:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490e      	ldr	r1, [pc, #56]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f821 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005116:	4602      	mov	r2, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	490a      	ldr	r1, [pc, #40]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005124:	5ccb      	ldrb	r3, [r1, r3]
 8005126:	fa22 f303 	lsr.w	r3, r2, r3
 800512a:	4a09      	ldr	r2, [pc, #36]	@ (8005150 <HAL_RCC_ClockConfig+0x1cc>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCC_ClockConfig+0x1d0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fc ff14 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40022000 	.word	0x40022000
 8005148:	40021000 	.word	0x40021000
 800514c:	0800f0b0 	.word	0x0800f0b0
 8005150:	20000000 	.word	0x20000000
 8005154:	20000004 	.word	0x20000004

08005158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	2300      	movs	r3, #0
 800516c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005172:	4b1e      	ldr	r3, [pc, #120]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x94>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b04      	cmp	r3, #4
 8005180:	d002      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x30>
 8005182:	2b08      	cmp	r3, #8
 8005184:	d003      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0x36>
 8005186:	e027      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005188:	4b19      	ldr	r3, [pc, #100]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800518a:	613b      	str	r3, [r7, #16]
      break;
 800518c:	e027      	b.n	80051de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	0c9b      	lsrs	r3, r3, #18
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005198:	5cd3      	ldrb	r3, [r2, r3]
 800519a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d010      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051a6:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x94>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	0c5b      	lsrs	r3, r3, #17
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	4a11      	ldr	r2, [pc, #68]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80051b2:	5cd3      	ldrb	r3, [r2, r3]
 80051b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a0d      	ldr	r2, [pc, #52]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80051ba:	fb03 f202 	mul.w	r2, r3, r2
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e004      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a0c      	ldr	r2, [pc, #48]	@ (80051fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80051cc:	fb02 f303 	mul.w	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	613b      	str	r3, [r7, #16]
      break;
 80051d6:	e002      	b.n	80051de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051d8:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80051da:	613b      	str	r3, [r7, #16]
      break;
 80051dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051de:	693b      	ldr	r3, [r7, #16]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	007a1200 	.word	0x007a1200
 80051f4:	0800f0c8 	.word	0x0800f0c8
 80051f8:	0800f0d8 	.word	0x0800f0d8
 80051fc:	003d0900 	.word	0x003d0900

08005200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005204:	4b02      	ldr	r3, [pc, #8]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x10>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	20000000 	.word	0x20000000

08005214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005218:	f7ff fff2 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4903      	ldr	r1, [pc, #12]	@ (8005238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40021000 	.word	0x40021000
 8005238:	0800f0c0 	.word	0x0800f0c0

0800523c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005240:	f7ff ffde 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b05      	ldr	r3, [pc, #20]	@ (800525c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	0adb      	lsrs	r3, r3, #11
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4903      	ldr	r1, [pc, #12]	@ (8005260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40021000 	.word	0x40021000
 8005260:	0800f0c0 	.word	0x0800f0c0

08005264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800526c:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <RCC_Delay+0x34>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0a      	ldr	r2, [pc, #40]	@ (800529c <RCC_Delay+0x38>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	0a5b      	lsrs	r3, r3, #9
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005280:	bf00      	nop
  }
  while (Delay --);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1e5a      	subs	r2, r3, #1
 8005286:	60fa      	str	r2, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f9      	bne.n	8005280 <RCC_Delay+0x1c>
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	20000000 	.word	0x20000000
 800529c:	10624dd3 	.word	0x10624dd3

080052a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d07d      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80052bc:	2300      	movs	r3, #0
 80052be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d6:	61d3      	str	r3, [r2, #28]
 80052d8:	4b49      	ldr	r3, [pc, #292]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e8:	4b46      	ldr	r3, [pc, #280]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d118      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f4:	4b43      	ldr	r3, [pc, #268]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a42      	ldr	r2, [pc, #264]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005300:	f7fc fe70 	bl	8001fe4 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005306:	e008      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005308:	f7fc fe6c 	bl	8001fe4 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	@ 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e06d      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531a:	4b3a      	ldr	r3, [pc, #232]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005326:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800532e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d02e      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	429a      	cmp	r2, r3
 8005342:	d027      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005344:	4b2e      	ldr	r3, [pc, #184]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800534e:	4b2e      	ldr	r3, [pc, #184]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005350:	2201      	movs	r2, #1
 8005352:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005354:	4b2c      	ldr	r3, [pc, #176]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800535a:	4a29      	ldr	r2, [pc, #164]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d014      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fc fe3b 	bl	8001fe4 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fc fe37 	bl	8001fe4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e036      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ee      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005394:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4917      	ldr	r1, [pc, #92]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ac:	4b14      	ldr	r3, [pc, #80]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	4a13      	ldr	r2, [pc, #76]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	490b      	ldr	r1, [pc, #44]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053e2:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4904      	ldr	r1, [pc, #16]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	40007000 	.word	0x40007000
 8005408:	42420440 	.word	0x42420440

0800540c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e076      	b.n	800550c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800542e:	d009      	beq.n	8005444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	61da      	str	r2, [r3, #28]
 8005436:	e005      	b.n	8005444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc f9dc 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800547a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c8:	ea42 0103 	orr.w	r1, r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	0c1a      	lsrs	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f002 0204 	and.w	r2, r2, #4
 80054ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e041      	b.n	80055aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc fb9e 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 ff74 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d001      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e03a      	b.n	8005642 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a18      	ldr	r2, [pc, #96]	@ (800564c <HAL_TIM_Base_Start_IT+0x98>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x58>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f6:	d009      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x58>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a14      	ldr	r2, [pc, #80]	@ (8005650 <HAL_TIM_Base_Start_IT+0x9c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x58>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a13      	ldr	r2, [pc, #76]	@ (8005654 <HAL_TIM_Base_Start_IT+0xa0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d111      	bne.n	8005630 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b06      	cmp	r3, #6
 800561c:	d010      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562e:	e007      	b.n	8005640 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800

08005658 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a1a      	ldr	r2, [r3, #32]
 8005676:	f241 1311 	movw	r3, #4369	@ 0x1111
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10f      	bne.n	80056a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a1a      	ldr	r2, [r3, #32]
 8005686:	f240 4344 	movw	r3, #1092	@ 0x444
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d107      	bne.n	80056a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e041      	b.n	800574a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f839 	bl	8005752 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 fea4 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start+0x24>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e022      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d109      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x3e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	bf14      	ite	ne
 800579a:	2301      	movne	r3, #1
 800579c:	2300      	moveq	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e015      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start+0x58>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e008      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	bf14      	ite	ne
 80057c8:	2301      	movne	r3, #1
 80057ca:	2300      	moveq	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e05e      	b.n	8005894 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0x82>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e4:	e013      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x92>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f4:	e00b      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0xa2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005804:	e003      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f89e 	bl	8006958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1e      	ldr	r2, [pc, #120]	@ (800589c <HAL_TIM_PWM_Start+0x138>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d107      	bne.n	8005836 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a18      	ldr	r2, [pc, #96]	@ (800589c <HAL_TIM_PWM_Start+0x138>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_TIM_PWM_Start+0xfa>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005848:	d009      	beq.n	800585e <HAL_TIM_PWM_Start+0xfa>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a14      	ldr	r2, [pc, #80]	@ (80058a0 <HAL_TIM_PWM_Start+0x13c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_TIM_PWM_Start+0xfa>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a12      	ldr	r2, [pc, #72]	@ (80058a4 <HAL_TIM_PWM_Start+0x140>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d111      	bne.n	8005882 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b06      	cmp	r3, #6
 800586e:	d010      	beq.n	8005892 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005880:	e007      	b.n	8005892 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800

080058a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 f84c 	bl	8006958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a29      	ldr	r2, [pc, #164]	@ (800596c <HAL_TIM_PWM_Stop+0xc4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d117      	bne.n	80058fa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a1a      	ldr	r2, [r3, #32]
 80058d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10f      	bne.n	80058fa <HAL_TIM_PWM_Stop+0x52>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d107      	bne.n	80058fa <HAL_TIM_PWM_Stop+0x52>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10f      	bne.n	800592a <HAL_TIM_PWM_Stop+0x82>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f240 4344 	movw	r3, #1092	@ 0x444
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <HAL_TIM_PWM_Stop+0x82>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Stop+0x92>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005938:	e013      	b.n	8005962 <HAL_TIM_PWM_Stop+0xba>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Stop+0xa2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005948:	e00b      	b.n	8005962 <HAL_TIM_PWM_Stop+0xba>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b08      	cmp	r3, #8
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Stop+0xb2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005958:	e003      	b.n	8005962 <HAL_TIM_PWM_Stop+0xba>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40012c00 	.word	0x40012c00

08005970 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <HAL_TIM_IC_Start_IT+0x1e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e013      	b.n	80059b6 <HAL_TIM_IC_Start_IT+0x46>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b04      	cmp	r3, #4
 8005992:	d104      	bne.n	800599e <HAL_TIM_IC_Start_IT+0x2e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800599a:	b2db      	uxtb	r3, r3
 800599c:	e00b      	b.n	80059b6 <HAL_TIM_IC_Start_IT+0x46>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_IC_Start_IT+0x3e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	e003      	b.n	80059b6 <HAL_TIM_IC_Start_IT+0x46>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <HAL_TIM_IC_Start_IT+0x58>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e013      	b.n	80059f0 <HAL_TIM_IC_Start_IT+0x80>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d104      	bne.n	80059d8 <HAL_TIM_IC_Start_IT+0x68>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	e00b      	b.n	80059f0 <HAL_TIM_IC_Start_IT+0x80>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d104      	bne.n	80059e8 <HAL_TIM_IC_Start_IT+0x78>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e003      	b.n	80059f0 <HAL_TIM_IC_Start_IT+0x80>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80059f2:	7bbb      	ldrb	r3, [r7, #14]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d102      	bne.n	80059fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80059f8:	7b7b      	ldrb	r3, [r7, #13]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0b8      	b.n	8005b74 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_IC_Start_IT+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a10:	e013      	b.n	8005a3a <HAL_TIM_IC_Start_IT+0xca>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0xb2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a20:	e00b      	b.n	8005a3a <HAL_TIM_IC_Start_IT+0xca>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_IC_Start_IT+0xc2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a30:	e003      	b.n	8005a3a <HAL_TIM_IC_Start_IT+0xca>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_IC_Start_IT+0xda>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a48:	e013      	b.n	8005a72 <HAL_TIM_IC_Start_IT+0x102>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_IC_Start_IT+0xea>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a58:	e00b      	b.n	8005a72 <HAL_TIM_IC_Start_IT+0x102>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_IC_Start_IT+0xfa>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a68:	e003      	b.n	8005a72 <HAL_TIM_IC_Start_IT+0x102>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d841      	bhi.n	8005afc <HAL_TIM_IC_Start_IT+0x18c>
 8005a78:	a201      	add	r2, pc, #4	@ (adr r2, 8005a80 <HAL_TIM_IC_Start_IT+0x110>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005afd 	.word	0x08005afd
 8005a88:	08005afd 	.word	0x08005afd
 8005a8c:	08005afd 	.word	0x08005afd
 8005a90:	08005ac7 	.word	0x08005ac7
 8005a94:	08005afd 	.word	0x08005afd
 8005a98:	08005afd 	.word	0x08005afd
 8005a9c:	08005afd 	.word	0x08005afd
 8005aa0:	08005ad9 	.word	0x08005ad9
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005afd 	.word	0x08005afd
 8005aac:	08005afd 	.word	0x08005afd
 8005ab0:	08005aeb 	.word	0x08005aeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0202 	orr.w	r2, r2, #2
 8005ac2:	60da      	str	r2, [r3, #12]
      break;
 8005ac4:	e01d      	b.n	8005b02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0204 	orr.w	r2, r2, #4
 8005ad4:	60da      	str	r2, [r3, #12]
      break;
 8005ad6:	e014      	b.n	8005b02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0208 	orr.w	r2, r2, #8
 8005ae6:	60da      	str	r2, [r3, #12]
      break;
 8005ae8:	e00b      	b.n	8005b02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0210 	orr.w	r2, r2, #16
 8005af8:	60da      	str	r2, [r3, #12]
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      break;
 8005b00:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d134      	bne.n	8005b72 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 ff21 	bl	8006958 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a18      	ldr	r2, [pc, #96]	@ (8005b7c <HAL_TIM_IC_Start_IT+0x20c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIM_IC_Start_IT+0x1ce>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b28:	d009      	beq.n	8005b3e <HAL_TIM_IC_Start_IT+0x1ce>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a14      	ldr	r2, [pc, #80]	@ (8005b80 <HAL_TIM_IC_Start_IT+0x210>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIM_IC_Start_IT+0x1ce>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a12      	ldr	r2, [pc, #72]	@ (8005b84 <HAL_TIM_IC_Start_IT+0x214>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d111      	bne.n	8005b62 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b06      	cmp	r3, #6
 8005b4e:	d010      	beq.n	8005b72 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b60:	e007      	b.n	8005b72 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800

08005b88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e093      	b.n	8005cc4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fc f89d 	bl	8001cf0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f000 fc2f 	bl	8006440 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c28:	f023 030c 	bic.w	r3, r3, #12
 8005c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	4313      	orrs	r3, r2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	031b      	lsls	r3, r3, #12
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4313      	orrs	r3, r2
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ce4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005cf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d110      	bne.n	8005d1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d102      	bne.n	8005d08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d02:	7b7b      	ldrb	r3, [r7, #13]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d001      	beq.n	8005d0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e069      	b.n	8005de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d1c:	e031      	b.n	8005d82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d110      	bne.n	8005d46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d102      	bne.n	8005d30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d2a:	7b3b      	ldrb	r3, [r7, #12]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d001      	beq.n	8005d34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e055      	b.n	8005de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d44:	e01d      	b.n	8005d82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d108      	bne.n	8005d5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d4c:	7bbb      	ldrb	r3, [r7, #14]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d105      	bne.n	8005d5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d52:	7b7b      	ldrb	r3, [r7, #13]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d102      	bne.n	8005d5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d58:	7b3b      	ldrb	r3, [r7, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d001      	beq.n	8005d62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e03e      	b.n	8005de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_TIM_Encoder_Start+0xc4>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d008      	beq.n	8005da0 <HAL_TIM_Encoder_Start+0xd4>
 8005d8e:	e00f      	b.n	8005db0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fddd 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 8005d9e:	e016      	b.n	8005dce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2201      	movs	r2, #1
 8005da6:	2104      	movs	r1, #4
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fdd5 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 8005dae:	e00e      	b.n	8005dce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2201      	movs	r2, #1
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fdcd 	bl	8006958 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	2104      	movs	r1, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fdc6 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 8005dcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_TIM_Encoder_Stop+0x18>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d008      	beq.n	8005e10 <HAL_TIM_Encoder_Stop+0x28>
 8005dfe:	e00f      	b.n	8005e20 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2200      	movs	r2, #0
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fda5 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 8005e0e:	e016      	b.n	8005e3e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2104      	movs	r1, #4
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fd9d 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 8005e1e:	e00e      	b.n	8005e3e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fd95 	bl	8006958 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2104      	movs	r1, #4
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fd8e 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 8005e3c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a1a      	ldr	r2, [r3, #32]
 8005e44:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <HAL_TIM_Encoder_Stop+0x86>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_TIM_Encoder_Stop+0x86>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_TIM_Encoder_Stop+0x92>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d138      	bne.n	8005eec <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_Encoder_Stop+0xa2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e88:	e013      	b.n	8005eb2 <HAL_TIM_Encoder_Stop+0xca>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_Encoder_Stop+0xb2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e98:	e00b      	b.n	8005eb2 <HAL_TIM_Encoder_Stop+0xca>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_Encoder_Stop+0xc2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ea8:	e003      	b.n	8005eb2 <HAL_TIM_Encoder_Stop+0xca>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_Encoder_Stop+0xda>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ec0:	e024      	b.n	8005f0c <HAL_TIM_Encoder_Stop+0x124>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_Encoder_Stop+0xea>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ed0:	e01c      	b.n	8005f0c <HAL_TIM_Encoder_Stop+0x124>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_Encoder_Stop+0xfa>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee0:	e014      	b.n	8005f0c <HAL_TIM_Encoder_Stop+0x124>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eea:	e00f      	b.n	8005f0c <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d020      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01b      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f06f 0202 	mvn.w	r2, #2
 8005f4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f007 fc03 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 8005f66:	e005      	b.n	8005f74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa4e 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa54 	bl	800641c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d020      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01b      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f06f 0204 	mvn.w	r2, #4
 8005f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f007 fbdd 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 8005fb2:	e005      	b.n	8005fc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa28 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa2e 	bl	800641c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d020      	beq.n	8006012 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01b      	beq.n	8006012 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f06f 0208 	mvn.w	r2, #8
 8005fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f007 fbb7 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 8005ffe:	e005      	b.n	800600c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fa02 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa08 	bl	800641c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01b      	beq.n	800605e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f06f 0210 	mvn.w	r2, #16
 800602e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2208      	movs	r2, #8
 8006034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f007 fb91 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 800604a:	e005      	b.n	8006058 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f9dc 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f9e2 	bl	800641c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00c      	beq.n	8006082 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f06f 0201 	mvn.w	r2, #1
 800607a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f007 faeb 	bl	800d658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fd35 	bl	8006b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9b2 	bl	800642e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f06f 0220 	mvn.w	r2, #32
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fd08 	bl	8006afe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006112:	2302      	movs	r3, #2
 8006114:	e0ae      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b0c      	cmp	r3, #12
 8006122:	f200 809f 	bhi.w	8006264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006126:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006161 	.word	0x08006161
 8006130:	08006265 	.word	0x08006265
 8006134:	08006265 	.word	0x08006265
 8006138:	08006265 	.word	0x08006265
 800613c:	080061a1 	.word	0x080061a1
 8006140:	08006265 	.word	0x08006265
 8006144:	08006265 	.word	0x08006265
 8006148:	08006265 	.word	0x08006265
 800614c:	080061e3 	.word	0x080061e3
 8006150:	08006265 	.word	0x08006265
 8006154:	08006265 	.word	0x08006265
 8006158:	08006265 	.word	0x08006265
 800615c:	08006223 	.word	0x08006223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f9d8 	bl	800651c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0208 	orr.w	r2, r2, #8
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0204 	bic.w	r2, r2, #4
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	619a      	str	r2, [r3, #24]
      break;
 800619e:	e064      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fa1e 	bl	80065e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6999      	ldr	r1, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	619a      	str	r2, [r3, #24]
      break;
 80061e0:	e043      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fa67 	bl	80066bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0208 	orr.w	r2, r2, #8
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0204 	bic.w	r2, r2, #4
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	61da      	str	r2, [r3, #28]
      break;
 8006220:	e023      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fab1 	bl	8006790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800623c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800624c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69d9      	ldr	r1, [r3, #28]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	021a      	lsls	r2, r3, #8
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	61da      	str	r2, [r3, #28]
      break;
 8006262:	e002      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	75fb      	strb	r3, [r7, #23]
      break;
 8006268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIM_ConfigClockSource+0x1c>
 8006294:	2302      	movs	r3, #2
 8006296:	e0b4      	b.n	8006402 <HAL_TIM_ConfigClockSource+0x186>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d0:	d03e      	beq.n	8006350 <HAL_TIM_ConfigClockSource+0xd4>
 80062d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d6:	f200 8087 	bhi.w	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062de:	f000 8086 	beq.w	80063ee <HAL_TIM_ConfigClockSource+0x172>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e6:	d87f      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b70      	cmp	r3, #112	@ 0x70
 80062ea:	d01a      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0xa6>
 80062ec:	2b70      	cmp	r3, #112	@ 0x70
 80062ee:	d87b      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b60      	cmp	r3, #96	@ 0x60
 80062f2:	d050      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x11a>
 80062f4:	2b60      	cmp	r3, #96	@ 0x60
 80062f6:	d877      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b50      	cmp	r3, #80	@ 0x50
 80062fa:	d03c      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0xfa>
 80062fc:	2b50      	cmp	r3, #80	@ 0x50
 80062fe:	d873      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b40      	cmp	r3, #64	@ 0x40
 8006302:	d058      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006304:	2b40      	cmp	r3, #64	@ 0x40
 8006306:	d86f      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b30      	cmp	r3, #48	@ 0x30
 800630a:	d064      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 800630c:	2b30      	cmp	r3, #48	@ 0x30
 800630e:	d86b      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d060      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	2b20      	cmp	r3, #32
 8006316:	d867      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05c      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 800631c:	2b10      	cmp	r3, #16
 800631e:	d05a      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006320:	e062      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006332:	f000 faf2 	bl	800691a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	609a      	str	r2, [r3, #8]
      break;
 800634e:	e04f      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006360:	f000 fadb 	bl	800691a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006372:	609a      	str	r2, [r3, #8]
      break;
 8006374:	e03c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006382:	461a      	mov	r2, r3
 8006384:	f000 fa52 	bl	800682c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2150      	movs	r1, #80	@ 0x50
 800638e:	4618      	mov	r0, r3
 8006390:	f000 faa9 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 8006394:	e02c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a2:	461a      	mov	r2, r3
 80063a4:	f000 fa70 	bl	8006888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2160      	movs	r1, #96	@ 0x60
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fa99 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 80063b4:	e01c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c2:	461a      	mov	r2, r3
 80063c4:	f000 fa32 	bl	800682c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2140      	movs	r1, #64	@ 0x40
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fa89 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 80063d4:	e00c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f000 fa80 	bl	80068e6 <TIM_ITRx_SetConfig>
      break;
 80063e6:	e003      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
      break;
 80063ec:	e000      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a2f      	ldr	r2, [pc, #188]	@ (8006510 <TIM_Base_SetConfig+0xd0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00b      	beq.n	8006470 <TIM_Base_SetConfig+0x30>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645e:	d007      	beq.n	8006470 <TIM_Base_SetConfig+0x30>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2c      	ldr	r2, [pc, #176]	@ (8006514 <TIM_Base_SetConfig+0xd4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_Base_SetConfig+0x30>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2b      	ldr	r2, [pc, #172]	@ (8006518 <TIM_Base_SetConfig+0xd8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d108      	bne.n	8006482 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a22      	ldr	r2, [pc, #136]	@ (8006510 <TIM_Base_SetConfig+0xd0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00b      	beq.n	80064a2 <TIM_Base_SetConfig+0x62>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006490:	d007      	beq.n	80064a2 <TIM_Base_SetConfig+0x62>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a1f      	ldr	r2, [pc, #124]	@ (8006514 <TIM_Base_SetConfig+0xd4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <TIM_Base_SetConfig+0x62>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a1e      	ldr	r2, [pc, #120]	@ (8006518 <TIM_Base_SetConfig+0xd8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d108      	bne.n	80064b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a0d      	ldr	r2, [pc, #52]	@ (8006510 <TIM_Base_SetConfig+0xd0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d103      	bne.n	80064e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f023 0201 	bic.w	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	611a      	str	r2, [r3, #16]
  }
}
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800

0800651c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f023 0201 	bic.w	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f023 0302 	bic.w	r3, r3, #2
 8006564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1c      	ldr	r2, [pc, #112]	@ (80065e4 <TIM_OC1_SetConfig+0xc8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d10c      	bne.n	8006592 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 0308 	bic.w	r3, r3, #8
 800657e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 0304 	bic.w	r3, r3, #4
 8006590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a13      	ldr	r2, [pc, #76]	@ (80065e4 <TIM_OC1_SetConfig+0xc8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d111      	bne.n	80065be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	621a      	str	r2, [r3, #32]
}
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40012c00 	.word	0x40012c00

080065e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f023 0210 	bic.w	r2, r3, #16
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0320 	bic.w	r3, r3, #32
 8006632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a1d      	ldr	r2, [pc, #116]	@ (80066b8 <TIM_OC2_SetConfig+0xd0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10d      	bne.n	8006664 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a14      	ldr	r2, [pc, #80]	@ (80066b8 <TIM_OC2_SetConfig+0xd0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d113      	bne.n	8006694 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800667a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	40012c00 	.word	0x40012c00

080066bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1d      	ldr	r2, [pc, #116]	@ (800678c <TIM_OC3_SetConfig+0xd0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d10d      	bne.n	8006736 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a14      	ldr	r2, [pc, #80]	@ (800678c <TIM_OC3_SetConfig+0xd0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d113      	bne.n	8006766 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800674c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	621a      	str	r2, [r3, #32]
}
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40012c00 	.word	0x40012c00

08006790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	031b      	lsls	r3, r3, #12
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a0f      	ldr	r2, [pc, #60]	@ (8006828 <TIM_OC4_SetConfig+0x98>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d109      	bne.n	8006804 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	019b      	lsls	r3, r3, #6
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr
 8006828:	40012c00 	.word	0x40012c00

0800682c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f023 0201 	bic.w	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f023 030a 	bic.w	r3, r3, #10
 8006868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f023 0210 	bic.w	r2, r3, #16
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	031b      	lsls	r3, r3, #12
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr

080068e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	f043 0307 	orr.w	r3, r3, #7
 8006908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	609a      	str	r2, [r3, #8]
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr

0800691a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800691a:	b480      	push	{r7}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006934:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	021a      	lsls	r2, r3, #8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	431a      	orrs	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4313      	orrs	r3, r2
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	609a      	str	r2, [r3, #8]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr

08006958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2201      	movs	r2, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	43db      	mvns	r3, r3
 800697a:	401a      	ands	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1a      	ldr	r2, [r3, #32]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e046      	b.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a16      	ldr	r2, [pc, #88]	@ (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a04:	d009      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a12      	ldr	r2, [pc, #72]	@ (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a10      	ldr	r2, [pc, #64]	@ (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d10c      	bne.n	8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800

08006a5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e03d      	b.n	8006af4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr

08006b22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e042      	b.n	8006bba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fb f96b 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2224      	movs	r2, #36	@ 0x24
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fcd4 	bl	8007514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695a      	ldr	r2, [r3, #20]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d112      	bne.n	8006c02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_UART_Receive_IT+0x26>
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e00b      	b.n	8006c04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fab6 	bl	800716a <UART_Start_Receive_IT>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	e000      	b.n	8006c04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c02:	2302      	movs	r3, #2
  }
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c42:	f003 030f 	and.w	r3, r3, #15
 8006c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10f      	bne.n	8006c72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_UART_IRQHandler+0x66>
 8006c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fb93 	bl	8007396 <UART_Receive_IT>
      return;
 8006c70:	e25b      	b.n	800712a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80de 	beq.w	8006e38 <HAL_UART_IRQHandler+0x22c>
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80d1 	beq.w	8006e38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <HAL_UART_IRQHandler+0xae>
 8006ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb2:	f043 0201 	orr.w	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <HAL_UART_IRQHandler+0xd2>
 8006cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd6:	f043 0202 	orr.w	r2, r3, #2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <HAL_UART_IRQHandler+0xf6>
 8006cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfa:	f043 0204 	orr.w	r2, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d011      	beq.n	8006d32 <HAL_UART_IRQHandler+0x126>
 8006d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d105      	bne.n	8006d26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2a:	f043 0208 	orr.w	r2, r3, #8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 81f2 	beq.w	8007120 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <HAL_UART_IRQHandler+0x14e>
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb1e 	bl	8007396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf14      	ite	ne
 8006d68:	2301      	movne	r3, #1
 8006d6a:	2300      	moveq	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <HAL_UART_IRQHandler+0x17a>
 8006d7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d04f      	beq.n	8006e26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa28 	bl	80071dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d041      	beq.n	8006e1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006db8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3314      	adds	r3, #20
 8006dc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1d9      	bne.n	8006d9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d013      	beq.n	8006e16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df2:	4a7e      	ldr	r2, [pc, #504]	@ (8006fec <HAL_UART_IRQHandler+0x3e0>)
 8006df4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fb fdf4 	bl	80029e8 <HAL_DMA_Abort_IT>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d016      	beq.n	8006e34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e14:	e00e      	b.n	8006e34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f993 	bl	8007142 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	e00a      	b.n	8006e34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f98f 	bl	8007142 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e24:	e006      	b.n	8006e34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f98b 	bl	8007142 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006e32:	e175      	b.n	8007120 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e34:	bf00      	nop
    return;
 8006e36:	e173      	b.n	8007120 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	f040 814f 	bne.w	80070e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8148 	beq.w	80070e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8141 	beq.w	80070e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80b6 	beq.w	8006ff0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8145 	beq.w	8007124 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	f080 813e 	bcs.w	8007124 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	f000 8088 	beq.w	8006fcc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ed6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ee8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ef4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1d9      	bne.n	8006ebc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f2c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f34:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e1      	bne.n	8006f08 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3314      	adds	r3, #20
 8006f64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f68:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e3      	bne.n	8006f44 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	330c      	adds	r3, #12
 8006f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f9c:	f023 0310 	bic.w	r3, r3, #16
 8006fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	330c      	adds	r3, #12
 8006faa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006fae:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006fb0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e3      	bne.n	8006f8a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fb fcd3 	bl	8002972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8b6 	bl	8007154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fe8:	e09c      	b.n	8007124 <HAL_UART_IRQHandler+0x518>
 8006fea:	bf00      	nop
 8006fec:	080072a1 	.word	0x080072a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 808e 	beq.w	8007128 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800700c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8089 	beq.w	8007128 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	330c      	adds	r3, #12
 800701c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800702c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800703a:	647a      	str	r2, [r7, #68]	@ 0x44
 800703c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007040:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e3      	bne.n	8007016 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3314      	adds	r3, #20
 8007054:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	623b      	str	r3, [r7, #32]
   return(result);
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3314      	adds	r3, #20
 800706e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007072:	633a      	str	r2, [r7, #48]	@ 0x30
 8007074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e3      	bne.n	800704e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0310 	bic.w	r3, r3, #16
 80070aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	330c      	adds	r3, #12
 80070b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80070b8:	61fa      	str	r2, [r7, #28]
 80070ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e3      	bne.n	8007094 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f83b 	bl	8007154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070de:	e023      	b.n	8007128 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <HAL_UART_IRQHandler+0x4f4>
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8e5 	bl	80072c8 <UART_Transmit_IT>
    return;
 80070fe:	e014      	b.n	800712a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <HAL_UART_IRQHandler+0x51e>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f924 	bl	8007366 <UART_EndTransmit_IT>
    return;
 800711e:	e004      	b.n	800712a <HAL_UART_IRQHandler+0x51e>
    return;
 8007120:	bf00      	nop
 8007122:	e002      	b.n	800712a <HAL_UART_IRQHandler+0x51e>
      return;
 8007124:	bf00      	nop
 8007126:	e000      	b.n	800712a <HAL_UART_IRQHandler+0x51e>
      return;
 8007128:	bf00      	nop
  }
}
 800712a:	37e8      	adds	r7, #232	@ 0xe8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr

08007142 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	4613      	mov	r3, r2
 8007176:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	88fa      	ldrh	r2, [r7, #6]
 8007182:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88fa      	ldrh	r2, [r7, #6]
 8007188:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2222      	movs	r2, #34	@ 0x22
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0220 	orr.w	r2, r2, #32
 80071ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b095      	sub	sp, #84	@ 0x54
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	330c      	adds	r3, #12
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ee:	e853 3f00 	ldrex	r3, [r3]
 80071f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007204:	643a      	str	r2, [r7, #64]	@ 0x40
 8007206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800720a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e5      	bne.n	80071e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3314      	adds	r3, #20
 800721e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	61fb      	str	r3, [r7, #28]
   return(result);
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f023 0301 	bic.w	r3, r3, #1
 800722e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3314      	adds	r3, #20
 8007236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800723a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800723e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e5      	bne.n	8007218 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007250:	2b01      	cmp	r3, #1
 8007252:	d119      	bne.n	8007288 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	330c      	adds	r3, #12
 800725a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	60bb      	str	r3, [r7, #8]
   return(result);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f023 0310 	bic.w	r3, r3, #16
 800726a:	647b      	str	r3, [r7, #68]	@ 0x44
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	330c      	adds	r3, #12
 8007272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007274:	61ba      	str	r2, [r7, #24]
 8007276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6979      	ldr	r1, [r7, #20]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	613b      	str	r3, [r7, #16]
   return(result);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e5      	bne.n	8007254 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007296:	bf00      	nop
 8007298:	3754      	adds	r7, #84	@ 0x54
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr

080072a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff ff41 	bl	8007142 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b21      	cmp	r3, #33	@ 0x21
 80072da:	d13e      	bne.n	800735a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e4:	d114      	bne.n	8007310 <UART_Transmit_IT+0x48>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d110      	bne.n	8007310 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007302:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	1c9a      	adds	r2, r3, #2
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	621a      	str	r2, [r3, #32]
 800730e:	e008      	b.n	8007322 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	1c59      	adds	r1, r3, #1
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6211      	str	r1, [r2, #32]
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007326:	b29b      	uxth	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	b29b      	uxth	r3, r3
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4619      	mov	r1, r3
 8007330:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10f      	bne.n	8007356 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007344:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007354:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	e000      	b.n	800735c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800735a:	2302      	movs	r3, #2
  }
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800737c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff fed2 	bl	8007130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b08c      	sub	sp, #48	@ 0x30
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b22      	cmp	r3, #34	@ 0x22
 80073a8:	f040 80ae 	bne.w	8007508 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b4:	d117      	bne.n	80073e6 <UART_Receive_IT+0x50>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d113      	bne.n	80073e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073de:	1c9a      	adds	r2, r3, #2
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80073e4:	e026      	b.n	8007434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f8:	d007      	beq.n	800740a <UART_Receive_IT+0x74>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <UART_Receive_IT+0x82>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e008      	b.n	800742a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007424:	b2da      	uxtb	r2, r3
 8007426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4619      	mov	r1, r3
 8007442:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007444:	2b00      	cmp	r3, #0
 8007446:	d15d      	bne.n	8007504 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0220 	bic.w	r2, r2, #32
 8007456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695a      	ldr	r2, [r3, #20]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0201 	bic.w	r2, r2, #1
 8007476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2220      	movs	r2, #32
 800747c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748a:	2b01      	cmp	r3, #1
 800748c:	d135      	bne.n	80074fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	613b      	str	r3, [r7, #16]
   return(result);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f023 0310 	bic.w	r3, r3, #16
 80074aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	330c      	adds	r3, #12
 80074b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b4:	623a      	str	r2, [r7, #32]
 80074b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	69f9      	ldr	r1, [r7, #28]
 80074ba:	6a3a      	ldr	r2, [r7, #32]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e5      	bne.n	8007494 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d10a      	bne.n	80074ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fe2e 	bl	8007154 <HAL_UARTEx_RxEventCallback>
 80074f8:	e002      	b.n	8007500 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f006 fa64 	bl	800d9c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	e002      	b.n	800750a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3730      	adds	r7, #48	@ 0x30
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800754e:	f023 030c 	bic.w	r3, r3, #12
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	430b      	orrs	r3, r1
 800755a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2c      	ldr	r2, [pc, #176]	@ (8007628 <UART_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d103      	bne.n	8007584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800757c:	f7fd fe5e 	bl	800523c <HAL_RCC_GetPCLK2Freq>
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	e002      	b.n	800758a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007584:	f7fd fe46 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 8007588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009a      	lsls	r2, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a0:	4a22      	ldr	r2, [pc, #136]	@ (800762c <UART_SetConfig+0x118>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	0119      	lsls	r1, r3, #4
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009a      	lsls	r2, r3, #2
 80075b4:	441a      	add	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80075c0:	4b1a      	ldr	r3, [pc, #104]	@ (800762c <UART_SetConfig+0x118>)
 80075c2:	fba3 0302 	umull	r0, r3, r3, r2
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2064      	movs	r0, #100	@ 0x64
 80075ca:	fb00 f303 	mul.w	r3, r0, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	3332      	adds	r3, #50	@ 0x32
 80075d4:	4a15      	ldr	r2, [pc, #84]	@ (800762c <UART_SetConfig+0x118>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075e0:	4419      	add	r1, r3
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009a      	lsls	r2, r3, #2
 80075ec:	441a      	add	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f8:	4b0c      	ldr	r3, [pc, #48]	@ (800762c <UART_SetConfig+0x118>)
 80075fa:	fba3 0302 	umull	r0, r3, r3, r2
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2064      	movs	r0, #100	@ 0x64
 8007602:	fb00 f303 	mul.w	r3, r0, r3
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	@ 0x32
 800760c:	4a07      	ldr	r2, [pc, #28]	@ (800762c <UART_SetConfig+0x118>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	440a      	add	r2, r1
 800761e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40013800 	.word	0x40013800
 800762c:	51eb851f 	.word	0x51eb851f

08007630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	4638      	mov	r0, r7
 800763a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr

0800764a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800765a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800765e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr

08007676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800767e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007682:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	b29b      	uxth	r3, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	b29b      	uxth	r3, r3
 8007694:	4013      	ands	r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr

080076aa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr

080076c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	4638      	mov	r0, r7
 80076cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr

080076fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b09d      	sub	sp, #116	@ 0x74
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800771e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007722:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	78db      	ldrb	r3, [r3, #3]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d81f      	bhi.n	800776e <USB_ActivateEndpoint+0x72>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <USB_ActivateEndpoint+0x38>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007745 	.word	0x08007745
 8007738:	08007761 	.word	0x08007761
 800773c:	08007777 	.word	0x08007777
 8007740:	08007753 	.word	0x08007753
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007744:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007748:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800774c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007750:	e012      	b.n	8007778 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007752:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007756:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800775a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800775e:	e00b      	b.n	8007778 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007760:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007768:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800776c:	e004      	b.n	8007778 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007774:	e000      	b.n	8007778 <USB_ActivateEndpoint+0x7c>
      break;
 8007776:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	441a      	add	r2, r3
 8007782:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	7812      	ldrb	r2, [r2, #0]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80077ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	7b1b      	ldrb	r3, [r3, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 8178 	bne.w	8007ad8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8084 	beq.w	80078fa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	4413      	add	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	011a      	lsls	r2, r3, #4
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	b29b      	uxth	r3, r3
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	827b      	strh	r3, [r7, #18]
 8007834:	8a7b      	ldrh	r3, [r7, #18]
 8007836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01b      	beq.n	8007876 <USB_ActivateEndpoint+0x17a>
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007854:	823b      	strh	r3, [r7, #16]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	441a      	add	r2, r3
 8007860:	8a3b      	ldrh	r3, [r7, #16]
 8007862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800786a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800786e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007872:	b29b      	uxth	r3, r3
 8007874:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	78db      	ldrb	r3, [r3, #3]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d020      	beq.n	80078c0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007894:	81bb      	strh	r3, [r7, #12]
 8007896:	89bb      	ldrh	r3, [r7, #12]
 8007898:	f083 0320 	eor.w	r3, r3, #32
 800789c:	81bb      	strh	r3, [r7, #12]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	441a      	add	r2, r3
 80078a8:	89bb      	ldrh	r3, [r7, #12]
 80078aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	8013      	strh	r3, [r2, #0]
 80078be:	e2d5      	b.n	8007e6c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d6:	81fb      	strh	r3, [r7, #14]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	441a      	add	r2, r3
 80078e2:	89fb      	ldrh	r3, [r7, #14]
 80078e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	8013      	strh	r3, [r2, #0]
 80078f8:	e2b8      	b.n	8007e6c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007904:	b29b      	uxth	r3, r3
 8007906:	461a      	mov	r2, r3
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	4413      	add	r3, r2
 800790c:	633b      	str	r3, [r7, #48]	@ 0x30
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	011a      	lsls	r2, r3, #4
 8007914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007916:	4413      	add	r3, r2
 8007918:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800791c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	88db      	ldrh	r3, [r3, #6]
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	b29b      	uxth	r3, r3
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	4413      	add	r3, r2
 8007940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	011a      	lsls	r2, r3, #4
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	4413      	add	r3, r2
 800794c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800795c:	b29a      	uxth	r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b3e      	cmp	r3, #62	@ 0x3e
 8007968:	d91d      	bls.n	80079a6 <USB_ActivateEndpoint+0x2aa>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <USB_ActivateEndpoint+0x288>
 800797e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007980:	3b01      	subs	r3, #1
 8007982:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29a      	uxth	r2, r3
 800798a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800798c:	b29b      	uxth	r3, r3
 800798e:	029b      	lsls	r3, r3, #10
 8007990:	b29b      	uxth	r3, r3
 8007992:	4313      	orrs	r3, r2
 8007994:	b29b      	uxth	r3, r3
 8007996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799e:	b29a      	uxth	r2, r3
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e026      	b.n	80079f4 <USB_ActivateEndpoint+0x2f8>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <USB_ActivateEndpoint+0x2c8>
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079bc:	b29a      	uxth	r2, r3
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	e017      	b.n	80079f4 <USB_ActivateEndpoint+0x2f8>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <USB_ActivateEndpoint+0x2e2>
 80079d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079da:	3301      	adds	r3, #1
 80079dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	029b      	lsls	r3, r3, #10
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4313      	orrs	r3, r2
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007a02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01b      	beq.n	8007a44 <USB_ActivateEndpoint+0x348>
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a22:	843b      	strh	r3, [r7, #32]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	441a      	add	r2, r3
 8007a2e:	8c3b      	ldrh	r3, [r7, #32]
 8007a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d124      	bne.n	8007a96 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a62:	83bb      	strh	r3, [r7, #28]
 8007a64:	8bbb      	ldrh	r3, [r7, #28]
 8007a66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a6a:	83bb      	strh	r3, [r7, #28]
 8007a6c:	8bbb      	ldrh	r3, [r7, #28]
 8007a6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a72:	83bb      	strh	r3, [r7, #28]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	8bbb      	ldrh	r3, [r7, #28]
 8007a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	8013      	strh	r3, [r2, #0]
 8007a94:	e1ea      	b.n	8007e6c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aac:	83fb      	strh	r3, [r7, #30]
 8007aae:	8bfb      	ldrh	r3, [r7, #30]
 8007ab0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ab4:	83fb      	strh	r3, [r7, #30]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	441a      	add	r2, r3
 8007ac0:	8bfb      	ldrh	r3, [r7, #30]
 8007ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	8013      	strh	r3, [r2, #0]
 8007ad6:	e1c9      	b.n	8007e6c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	78db      	ldrb	r3, [r3, #3]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d11e      	bne.n	8007b1e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	441a      	add	r2, r3
 8007b04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b10:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	8013      	strh	r3, [r2, #0]
 8007b1c:	e01d      	b.n	8007b5a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b34:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	441a      	add	r2, r3
 8007b42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b6a:	4413      	add	r3, r2
 8007b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	011a      	lsls	r2, r3, #4
 8007b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	891b      	ldrh	r3, [r3, #8]
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b9e:	4413      	add	r3, r2
 8007ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	011a      	lsls	r2, r3, #4
 8007ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	895b      	ldrh	r3, [r3, #10]
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bc0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f040 8093 	bne.w	8007cf2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007bdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01b      	beq.n	8007c20 <USB_ActivateEndpoint+0x524>
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	441a      	add	r2, r3
 8007c0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007c2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01b      	beq.n	8007c70 <USB_ActivateEndpoint+0x574>
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	441a      	add	r2, r3
 8007c5a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c86:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c88:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c8e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c96:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	441a      	add	r2, r3
 8007cda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]
 8007cf0:	e0bc      	b.n	8007e6c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d01d      	beq.n	8007d4a <USB_ActivateEndpoint+0x64e>
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d24:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	441a      	add	r2, r3
 8007d32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007d5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01d      	beq.n	8007da2 <USB_ActivateEndpoint+0x6a6>
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d7c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	441a      	add	r2, r3
 8007d8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	78db      	ldrb	r3, [r3, #3]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d024      	beq.n	8007df4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007dc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007dc8:	f083 0320 	eor.w	r3, r3, #32
 8007dcc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	441a      	add	r2, r3
 8007dda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	8013      	strh	r3, [r2, #0]
 8007df2:	e01d      	b.n	8007e30 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	441a      	add	r2, r3
 8007e18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e6c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3774      	adds	r7, #116	@ 0x74
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop

08007e7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b08d      	sub	sp, #52	@ 0x34
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	7b1b      	ldrb	r3, [r3, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 808e 	bne.w	8007fac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d044      	beq.n	8007f22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	81bb      	strh	r3, [r7, #12]
 8007ea6:	89bb      	ldrh	r3, [r7, #12]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01b      	beq.n	8007ee8 <USB_DeactivateEndpoint+0x6c>
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec6:	817b      	strh	r3, [r7, #10]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	441a      	add	r2, r3
 8007ed2:	897b      	ldrh	r3, [r7, #10]
 8007ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ee0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007efe:	813b      	strh	r3, [r7, #8]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	441a      	add	r2, r3
 8007f0a:	893b      	ldrh	r3, [r7, #8]
 8007f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	8013      	strh	r3, [r2, #0]
 8007f20:	e192      	b.n	8008248 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	827b      	strh	r3, [r7, #18]
 8007f30:	8a7b      	ldrh	r3, [r7, #18]
 8007f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01b      	beq.n	8007f72 <USB_DeactivateEndpoint+0xf6>
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f50:	823b      	strh	r3, [r7, #16]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	8a3b      	ldrh	r3, [r7, #16]
 8007f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f88:	81fb      	strh	r3, [r7, #14]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]
 8007faa:	e14d      	b.n	8008248 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f040 80a5 	bne.w	8008100 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	843b      	strh	r3, [r7, #32]
 8007fc4:	8c3b      	ldrh	r3, [r7, #32]
 8007fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01b      	beq.n	8008006 <USB_DeactivateEndpoint+0x18a>
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe4:	83fb      	strh	r3, [r7, #30]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	441a      	add	r2, r3
 8007ff0:	8bfb      	ldrh	r3, [r7, #30]
 8007ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ffa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008002:	b29b      	uxth	r3, r3
 8008004:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	83bb      	strh	r3, [r7, #28]
 8008014:	8bbb      	ldrh	r3, [r7, #28]
 8008016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d01b      	beq.n	8008056 <USB_DeactivateEndpoint+0x1da>
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008034:	837b      	strh	r3, [r7, #26]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	441a      	add	r2, r3
 8008040:	8b7b      	ldrh	r3, [r7, #26]
 8008042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800804a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800804e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008052:	b29b      	uxth	r3, r3
 8008054:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806c:	833b      	strh	r3, [r7, #24]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	441a      	add	r2, r3
 8008078:	8b3b      	ldrh	r3, [r7, #24]
 800807a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008086:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a4:	82fb      	strh	r3, [r7, #22]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	8afb      	ldrh	r3, [r7, #22]
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080dc:	82bb      	strh	r3, [r7, #20]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	441a      	add	r2, r3
 80080e8:	8abb      	ldrh	r3, [r7, #20]
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]
 80080fe:	e0a3      	b.n	8008248 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800810e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01b      	beq.n	8008150 <USB_DeactivateEndpoint+0x2d4>
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800812a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800813c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800814c:	b29b      	uxth	r3, r3
 800814e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800815e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01b      	beq.n	80081a0 <USB_DeactivateEndpoint+0x324>
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800817a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	441a      	add	r2, r3
 800818a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800818c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008198:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800819c:	b29b      	uxth	r3, r3
 800819e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	441a      	add	r2, r3
 80081c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800820c:	b29b      	uxth	r3, r3
 800820e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008226:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	441a      	add	r2, r3
 8008232:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800823c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008244:	b29b      	uxth	r3, r3
 8008246:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3734      	adds	r7, #52	@ 0x34
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b0c2      	sub	sp, #264	@ 0x108
 8008258:	af00      	add	r7, sp, #0
 800825a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008262:	6018      	str	r0, [r3, #0]
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800826e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b01      	cmp	r3, #1
 800827c:	f040 86b7 	bne.w	8008fee <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699a      	ldr	r2, [r3, #24]
 800828c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	429a      	cmp	r2, r3
 800829a:	d908      	bls.n	80082ae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800829c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80082ac:	e007      	b.n	80082be <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80082ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80082be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	7b1b      	ldrb	r3, [r3, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d13a      	bne.n	8008344 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80082ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6959      	ldr	r1, [r3, #20]
 80082da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	88da      	ldrh	r2, [r3, #6]
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80082f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80082f4:	6800      	ldr	r0, [r0, #0]
 80082f6:	f001 fc9c 	bl	8009c32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	4413      	add	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	011a      	lsls	r2, r3, #4
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	4413      	add	r3, r2
 8008330:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833a:	b29a      	uxth	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	801a      	strh	r2, [r3, #0]
 8008340:	f000 be1f 	b.w	8008f82 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	78db      	ldrb	r3, [r3, #3]
 8008350:	2b02      	cmp	r3, #2
 8008352:	f040 8462 	bne.w	8008c1a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6a1a      	ldr	r2, [r3, #32]
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	429a      	cmp	r2, r3
 8008370:	f240 83df 	bls.w	8008b32 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800839e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	441a      	add	r2, r3
 80083b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80083bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083c4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80083c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80083d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e0:	1ad2      	subs	r2, r2, r3
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 81c7 	beq.w	80087a4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	633b      	str	r3, [r7, #48]	@ 0x30
 8008422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d177      	bne.n	8008522 <USB_EPStartXfer+0x2ce>
 8008432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800843e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800844c:	b29b      	uxth	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008452:	4413      	add	r3, r2
 8008454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	011a      	lsls	r2, r3, #4
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	4413      	add	r3, r2
 8008468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008478:	b29a      	uxth	r2, r3
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	801a      	strh	r2, [r3, #0]
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008482:	2b3e      	cmp	r3, #62	@ 0x3e
 8008484:	d921      	bls.n	80084ca <USB_EPStartXfer+0x276>
 8008486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848a:	095b      	lsrs	r3, r3, #5
 800848c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008494:	f003 031f 	and.w	r3, r3, #31
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <USB_EPStartXfer+0x252>
 800849c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80084a0:	3b01      	subs	r3, #1
 80084a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	029b      	lsls	r3, r3, #10
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	4313      	orrs	r3, r2
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	801a      	strh	r2, [r3, #0]
 80084c8:	e050      	b.n	800856c <USB_EPStartXfer+0x318>
 80084ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <USB_EPStartXfer+0x294>
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	e041      	b.n	800856c <USB_EPStartXfer+0x318>
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80084f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d004      	beq.n	8008508 <USB_EPStartXfer+0x2b4>
 80084fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008502:	3301      	adds	r3, #1
 8008504:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29a      	uxth	r2, r3
 800850e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008512:	b29b      	uxth	r3, r3
 8008514:	029b      	lsls	r3, r3, #10
 8008516:	b29b      	uxth	r3, r3
 8008518:	4313      	orrs	r3, r2
 800851a:	b29a      	uxth	r2, r3
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e024      	b.n	800856c <USB_EPStartXfer+0x318>
 8008522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d11c      	bne.n	800856c <USB_EPStartXfer+0x318>
 8008532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008540:	b29b      	uxth	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008546:	4413      	add	r3, r2
 8008548:	633b      	str	r3, [r7, #48]	@ 0x30
 800854a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	011a      	lsls	r2, r3, #4
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	4413      	add	r3, r2
 800855c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008566:	b29a      	uxth	r2, r3
 8008568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800856c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	895b      	ldrh	r3, [r3, #10]
 8008578:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800857c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6959      	ldr	r1, [r3, #20]
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858c:	b29b      	uxth	r3, r3
 800858e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008592:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008596:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	f001 fb49 	bl	8009c32 <USB_WritePMA>
            ep->xfer_buff += len;
 80085a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695a      	ldr	r2, [r3, #20]
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	441a      	add	r2, r3
 80085b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6a1a      	ldr	r2, [r3, #32]
 80085ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d90f      	bls.n	80085fa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80085da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6a1a      	ldr	r2, [r3, #32]
 80085e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ea:	1ad2      	subs	r2, r2, r3
 80085ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	621a      	str	r2, [r3, #32]
 80085f8:	e00e      	b.n	8008618 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80085fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800860a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2200      	movs	r2, #0
 8008616:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d177      	bne.n	8008718 <USB_EPStartXfer+0x4c4>
 8008628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008642:	b29b      	uxth	r3, r3
 8008644:	461a      	mov	r2, r3
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	4413      	add	r3, r2
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	011a      	lsls	r2, r3, #4
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	4413      	add	r3, r2
 800865e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800866e:	b29a      	uxth	r2, r3
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008678:	2b3e      	cmp	r3, #62	@ 0x3e
 800867a:	d921      	bls.n	80086c0 <USB_EPStartXfer+0x46c>
 800867c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008680:	095b      	lsrs	r3, r3, #5
 8008682:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868a:	f003 031f 	and.w	r3, r3, #31
 800868e:	2b00      	cmp	r3, #0
 8008690:	d104      	bne.n	800869c <USB_EPStartXfer+0x448>
 8008692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008696:	3b01      	subs	r3, #1
 8008698:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	029b      	lsls	r3, r3, #10
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	4313      	orrs	r3, r2
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	e056      	b.n	800876e <USB_EPStartXfer+0x51a>
 80086c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <USB_EPStartXfer+0x48a>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	e047      	b.n	800876e <USB_EPStartXfer+0x51a>
 80086de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80086e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <USB_EPStartXfer+0x4aa>
 80086f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086f8:	3301      	adds	r3, #1
 80086fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008708:	b29b      	uxth	r3, r3
 800870a:	029b      	lsls	r3, r3, #10
 800870c:	b29b      	uxth	r3, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	b29a      	uxth	r2, r3
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	801a      	strh	r2, [r3, #0]
 8008716:	e02a      	b.n	800876e <USB_EPStartXfer+0x51a>
 8008718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d122      	bne.n	800876e <USB_EPStartXfer+0x51a>
 8008728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	623b      	str	r3, [r7, #32]
 8008734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008742:	b29b      	uxth	r3, r3
 8008744:	461a      	mov	r2, r3
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	4413      	add	r3, r2
 800874a:	623b      	str	r3, [r7, #32]
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	011a      	lsls	r2, r3, #4
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	4413      	add	r3, r2
 800875e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008768:	b29a      	uxth	r2, r3
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800876e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	891b      	ldrh	r3, [r3, #8]
 800877a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800877e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6959      	ldr	r1, [r3, #20]
 800878a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800878e:	b29b      	uxth	r3, r3
 8008790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008794:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008798:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f001 fa48 	bl	8009c32 <USB_WritePMA>
 80087a2:	e3ee      	b.n	8008f82 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d177      	bne.n	80088a4 <USB_EPStartXfer+0x650>
 80087b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087d4:	4413      	add	r3, r2
 80087d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	011a      	lsls	r2, r3, #4
 80087e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087e8:	4413      	add	r3, r2
 80087ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80087ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80087f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008804:	2b3e      	cmp	r3, #62	@ 0x3e
 8008806:	d921      	bls.n	800884c <USB_EPStartXfer+0x5f8>
 8008808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2b00      	cmp	r3, #0
 800881c:	d104      	bne.n	8008828 <USB_EPStartXfer+0x5d4>
 800881e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008822:	3b01      	subs	r3, #1
 8008824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29a      	uxth	r2, r3
 800882e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008832:	b29b      	uxth	r3, r3
 8008834:	029b      	lsls	r3, r3, #10
 8008836:	b29b      	uxth	r3, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	b29b      	uxth	r3, r3
 800883c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008844:	b29a      	uxth	r2, r3
 8008846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	e056      	b.n	80088fa <USB_EPStartXfer+0x6a6>
 800884c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <USB_EPStartXfer+0x616>
 8008854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008862:	b29a      	uxth	r2, r3
 8008864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008866:	801a      	strh	r2, [r3, #0]
 8008868:	e047      	b.n	80088fa <USB_EPStartXfer+0x6a6>
 800886a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <USB_EPStartXfer+0x636>
 8008880:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008884:	3301      	adds	r3, #1
 8008886:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800888a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008894:	b29b      	uxth	r3, r3
 8008896:	029b      	lsls	r3, r3, #10
 8008898:	b29b      	uxth	r3, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	b29a      	uxth	r2, r3
 800889e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	e02a      	b.n	80088fa <USB_EPStartXfer+0x6a6>
 80088a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d122      	bne.n	80088fa <USB_EPStartXfer+0x6a6>
 80088b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	653b      	str	r3, [r7, #80]	@ 0x50
 80088c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088d4:	4413      	add	r3, r2
 80088d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80088d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	011a      	lsls	r2, r3, #4
 80088e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e8:	4413      	add	r3, r2
 80088ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	891b      	ldrh	r3, [r3, #8]
 8008906:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800890a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800890e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6959      	ldr	r1, [r3, #20]
 8008916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891a:	b29b      	uxth	r3, r3
 800891c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008920:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008924:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008928:	6800      	ldr	r0, [r0, #0]
 800892a:	f001 f982 	bl	8009c32 <USB_WritePMA>
            ep->xfer_buff += len;
 800892e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695a      	ldr	r2, [r3, #20]
 800893a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893e:	441a      	add	r2, r3
 8008940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800894c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6a1a      	ldr	r2, [r3, #32]
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	429a      	cmp	r2, r3
 8008966:	d90f      	bls.n	8008988 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6a1a      	ldr	r2, [r3, #32]
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008978:	1ad2      	subs	r2, r2, r3
 800897a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	621a      	str	r2, [r3, #32]
 8008986:	e00e      	b.n	80089a6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2200      	movs	r2, #0
 80089a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80089b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	785b      	ldrb	r3, [r3, #1]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d177      	bne.n	8008ab2 <USB_EPStartXfer+0x85e>
 80089c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089dc:	b29b      	uxth	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	4413      	add	r3, r2
 80089e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	011a      	lsls	r2, r3, #4
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	4413      	add	r3, r2
 80089f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a12:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a14:	d921      	bls.n	8008a5a <USB_EPStartXfer+0x806>
 8008a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <USB_EPStartXfer+0x7e2>
 8008a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a30:	3b01      	subs	r3, #1
 8008a32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	029b      	lsls	r3, r3, #10
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	e050      	b.n	8008afc <USB_EPStartXfer+0x8a8>
 8008a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <USB_EPStartXfer+0x824>
 8008a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a74:	801a      	strh	r2, [r3, #0]
 8008a76:	e041      	b.n	8008afc <USB_EPStartXfer+0x8a8>
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <USB_EPStartXfer+0x844>
 8008a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a92:	3301      	adds	r3, #1
 8008a94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	e024      	b.n	8008afc <USB_EPStartXfer+0x8a8>
 8008ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	785b      	ldrb	r3, [r3, #1]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d11c      	bne.n	8008afc <USB_EPStartXfer+0x8a8>
 8008ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ad6:	4413      	add	r3, r2
 8008ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	011a      	lsls	r2, r3, #4
 8008ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aea:	4413      	add	r3, r2
 8008aec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008afa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	895b      	ldrh	r3, [r3, #10]
 8008b08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6959      	ldr	r1, [r3, #20]
 8008b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b2a:	6800      	ldr	r0, [r0, #0]
 8008b2c:	f001 f881 	bl	8009c32 <USB_WritePMA>
 8008b30:	e227      	b.n	8008f82 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b68:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bbe:	4413      	add	r3, r2
 8008bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	011a      	lsls	r2, r3, #4
 8008bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008be2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	891b      	ldrh	r3, [r3, #8]
 8008bf0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6959      	ldr	r1, [r3, #20]
 8008c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c12:	6800      	ldr	r0, [r0, #0]
 8008c14:	f001 f80d 	bl	8009c32 <USB_WritePMA>
 8008c18:	e1b3      	b.n	8008f82 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6a1a      	ldr	r2, [r3, #32]
 8008c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 80c6 	beq.w	8008dec <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	785b      	ldrb	r3, [r3, #1]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d177      	bne.n	8008d6c <USB_EPStartXfer+0xb18>
 8008c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c9c:	4413      	add	r3, r2
 8008c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	011a      	lsls	r2, r3, #4
 8008cae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008cb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ccc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cce:	d921      	bls.n	8008d14 <USB_EPStartXfer+0xac0>
 8008cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cde:	f003 031f 	and.w	r3, r3, #31
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <USB_EPStartXfer+0xa9c>
 8008ce6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008cea:	3b01      	subs	r3, #1
 8008cec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	029b      	lsls	r3, r3, #10
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d10:	801a      	strh	r2, [r3, #0]
 8008d12:	e050      	b.n	8008db6 <USB_EPStartXfer+0xb62>
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <USB_EPStartXfer+0xade>
 8008d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	e041      	b.n	8008db6 <USB_EPStartXfer+0xb62>
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d36:	085b      	lsrs	r3, r3, #1
 8008d38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <USB_EPStartXfer+0xafe>
 8008d48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	029b      	lsls	r3, r3, #10
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	4313      	orrs	r3, r2
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d68:	801a      	strh	r2, [r3, #0]
 8008d6a:	e024      	b.n	8008db6 <USB_EPStartXfer+0xb62>
 8008d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	785b      	ldrb	r3, [r3, #1]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d11c      	bne.n	8008db6 <USB_EPStartXfer+0xb62>
 8008d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d90:	4413      	add	r3, r2
 8008d92:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	011a      	lsls	r2, r3, #4
 8008da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008da4:	4413      	add	r3, r2
 8008da6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008db4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	895b      	ldrh	r3, [r3, #10]
 8008dc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6959      	ldr	r1, [r3, #20]
 8008dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ddc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008de0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008de4:	6800      	ldr	r0, [r0, #0]
 8008de6:	f000 ff24 	bl	8009c32 <USB_WritePMA>
 8008dea:	e0ca      	b.n	8008f82 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d177      	bne.n	8008eec <USB_EPStartXfer+0xc98>
 8008dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e1c:	4413      	add	r3, r2
 8008e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	011a      	lsls	r2, r3, #4
 8008e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e30:	4413      	add	r3, r2
 8008e32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e46:	801a      	strh	r2, [r3, #0]
 8008e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e4e:	d921      	bls.n	8008e94 <USB_EPStartXfer+0xc40>
 8008e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <USB_EPStartXfer+0xc1c>
 8008e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	029b      	lsls	r3, r3, #10
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4313      	orrs	r3, r2
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e05c      	b.n	8008f4e <USB_EPStartXfer+0xcfa>
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <USB_EPStartXfer+0xc5e>
 8008e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	e04d      	b.n	8008f4e <USB_EPStartXfer+0xcfa>
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <USB_EPStartXfer+0xc7e>
 8008ec8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008ecc:	3301      	adds	r3, #1
 8008ece:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	029b      	lsls	r3, r3, #10
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	e030      	b.n	8008f4e <USB_EPStartXfer+0xcfa>
 8008eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d128      	bne.n	8008f4e <USB_EPStartXfer+0xcfa>
 8008efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f20:	4413      	add	r3, r2
 8008f22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	011a      	lsls	r2, r3, #4
 8008f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f38:	4413      	add	r3, r2
 8008f3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008f3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	891b      	ldrh	r3, [r3, #8]
 8008f5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6959      	ldr	r1, [r3, #20]
 8008f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f7c:	6800      	ldr	r0, [r0, #0]
 8008f7e:	f000 fe58 	bl	8009c32 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fa8:	817b      	strh	r3, [r7, #10]
 8008faa:	897b      	ldrh	r3, [r7, #10]
 8008fac:	f083 0310 	eor.w	r3, r3, #16
 8008fb0:	817b      	strh	r3, [r7, #10]
 8008fb2:	897b      	ldrh	r3, [r7, #10]
 8008fb4:	f083 0320 	eor.w	r3, r3, #32
 8008fb8:	817b      	strh	r3, [r7, #10]
 8008fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	441a      	add	r2, r3
 8008fd4:	897b      	ldrh	r3, [r7, #10]
 8008fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	8013      	strh	r3, [r2, #0]
 8008fea:	f000 bcde 	b.w	80099aa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	7b1b      	ldrb	r3, [r3, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f040 80bb 	bne.w	8009176 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699a      	ldr	r2, [r3, #24]
 800900c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	429a      	cmp	r2, r3
 800901a:	d917      	bls.n	800904c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800901c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800902c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903c:	1ad2      	subs	r2, r2, r3
 800903e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	619a      	str	r2, [r3, #24]
 800904a:	e00e      	b.n	800906a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800904c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800905c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2200      	movs	r2, #0
 8009068:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800906a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800907c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009086:	b29b      	uxth	r3, r3
 8009088:	461a      	mov	r2, r3
 800908a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800908e:	4413      	add	r3, r2
 8009090:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	011a      	lsls	r2, r3, #4
 80090a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80090a6:	4413      	add	r3, r2
 80090a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80090ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090bc:	b29a      	uxth	r2, r3
 80090be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090c2:	801a      	strh	r2, [r3, #0]
 80090c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80090ca:	d924      	bls.n	8009116 <USB_EPStartXfer+0xec2>
 80090cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d104      	bne.n	80090ec <USB_EPStartXfer+0xe98>
 80090e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80090e6:	3b01      	subs	r3, #1
 80090e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	029b      	lsls	r3, r3, #10
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	4313      	orrs	r3, r2
 8009100:	b29b      	uxth	r3, r3
 8009102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800910a:	b29a      	uxth	r2, r3
 800910c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009110:	801a      	strh	r2, [r3, #0]
 8009112:	f000 bc10 	b.w	8009936 <USB_EPStartXfer+0x16e2>
 8009116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10c      	bne.n	8009138 <USB_EPStartXfer+0xee4>
 800911e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800912e:	b29a      	uxth	r2, r3
 8009130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009134:	801a      	strh	r2, [r3, #0]
 8009136:	e3fe      	b.n	8009936 <USB_EPStartXfer+0x16e2>
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913c:	085b      	lsrs	r3, r3, #1
 800913e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d004      	beq.n	8009158 <USB_EPStartXfer+0xf04>
 800914e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009152:	3301      	adds	r3, #1
 8009154:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	b29a      	uxth	r2, r3
 8009160:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009164:	b29b      	uxth	r3, r3
 8009166:	029b      	lsls	r3, r3, #10
 8009168:	b29b      	uxth	r3, r3
 800916a:	4313      	orrs	r3, r2
 800916c:	b29a      	uxth	r2, r3
 800916e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	e3df      	b.n	8009936 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	78db      	ldrb	r3, [r3, #3]
 8009182:	2b02      	cmp	r3, #2
 8009184:	f040 8218 	bne.w	80095b8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	785b      	ldrb	r3, [r3, #1]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 809d 	bne.w	80092d4 <USB_EPStartXfer+0x1080>
 800919a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091be:	4413      	add	r3, r2
 80091c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	011a      	lsls	r2, r3, #4
 80091d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091d6:	4413      	add	r3, r2
 80091d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80091dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091f2:	801a      	strh	r2, [r3, #0]
 80091f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	2b3e      	cmp	r3, #62	@ 0x3e
 8009202:	d92b      	bls.n	800925c <USB_EPStartXfer+0x1008>
 8009204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	095b      	lsrs	r3, r3, #5
 8009212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 031f 	and.w	r3, r3, #31
 8009226:	2b00      	cmp	r3, #0
 8009228:	d104      	bne.n	8009234 <USB_EPStartXfer+0xfe0>
 800922a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922e:	3b01      	subs	r3, #1
 8009230:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29a      	uxth	r2, r3
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009240:	b29b      	uxth	r3, r3
 8009242:	029b      	lsls	r3, r3, #10
 8009244:	b29b      	uxth	r3, r3
 8009246:	4313      	orrs	r3, r2
 8009248:	b29b      	uxth	r3, r3
 800924a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009252:	b29a      	uxth	r2, r3
 8009254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	e070      	b.n	800933e <USB_EPStartXfer+0x10ea>
 800925c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10c      	bne.n	8009286 <USB_EPStartXfer+0x1032>
 800926c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927c:	b29a      	uxth	r2, r3
 800927e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	e05b      	b.n	800933e <USB_EPStartXfer+0x10ea>
 8009286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <USB_EPStartXfer+0x1062>
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b0:	3301      	adds	r3, #1
 80092b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29a      	uxth	r2, r3
 80092be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	029b      	lsls	r3, r3, #10
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	4313      	orrs	r3, r2
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092d0:	801a      	strh	r2, [r3, #0]
 80092d2:	e034      	b.n	800933e <USB_EPStartXfer+0x10ea>
 80092d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d12c      	bne.n	800933e <USB_EPStartXfer+0x10ea>
 80092e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009300:	b29b      	uxth	r3, r3
 8009302:	461a      	mov	r2, r3
 8009304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009308:	4413      	add	r3, r2
 800930a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800930e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	011a      	lsls	r2, r3, #4
 800931c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009320:	4413      	add	r3, r2
 8009322:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009326:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800932a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	b29a      	uxth	r2, r3
 8009338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800933c:	801a      	strh	r2, [r3, #0]
 800933e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800934c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f040 809d 	bne.w	8009498 <USB_EPStartXfer+0x1244>
 800935e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800936c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800937a:	b29b      	uxth	r3, r3
 800937c:	461a      	mov	r2, r3
 800937e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009382:	4413      	add	r3, r2
 8009384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800938c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	011a      	lsls	r2, r3, #4
 8009396:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800939a:	4413      	add	r3, r2
 800939c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80093a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093b6:	801a      	strh	r2, [r3, #0]
 80093b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80093c6:	d92b      	bls.n	8009420 <USB_EPStartXfer+0x11cc>
 80093c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	095b      	lsrs	r3, r3, #5
 80093d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 031f 	and.w	r3, r3, #31
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <USB_EPStartXfer+0x11a4>
 80093ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093f2:	3b01      	subs	r3, #1
 80093f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29a      	uxth	r2, r3
 8009400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009404:	b29b      	uxth	r3, r3
 8009406:	029b      	lsls	r3, r3, #10
 8009408:	b29b      	uxth	r3, r3
 800940a:	4313      	orrs	r3, r2
 800940c:	b29b      	uxth	r3, r3
 800940e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009416:	b29a      	uxth	r2, r3
 8009418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800941c:	801a      	strh	r2, [r3, #0]
 800941e:	e069      	b.n	80094f4 <USB_EPStartXfer+0x12a0>
 8009420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10c      	bne.n	800944a <USB_EPStartXfer+0x11f6>
 8009430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800943c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	e054      	b.n	80094f4 <USB_EPStartXfer+0x12a0>
 800944a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800945c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <USB_EPStartXfer+0x1226>
 8009470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009474:	3301      	adds	r3, #1
 8009476:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800947a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29a      	uxth	r2, r3
 8009482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009486:	b29b      	uxth	r3, r3
 8009488:	029b      	lsls	r3, r3, #10
 800948a:	b29b      	uxth	r3, r3
 800948c:	4313      	orrs	r3, r2
 800948e:	b29a      	uxth	r2, r3
 8009490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	e02d      	b.n	80094f4 <USB_EPStartXfer+0x12a0>
 8009498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d125      	bne.n	80094f4 <USB_EPStartXfer+0x12a0>
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094be:	4413      	add	r3, r2
 80094c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	011a      	lsls	r2, r3, #4
 80094d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094d6:	4413      	add	r3, r2
 80094d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80094dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80094e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094f2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80094f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 8218 	beq.w	8009936 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800950a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009526:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800952a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <USB_EPStartXfer+0x12ea>
 8009532:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10d      	bne.n	800955a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800953e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009546:	2b00      	cmp	r3, #0
 8009548:	f040 81f5 	bne.w	8009936 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800954c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	f040 81ee 	bne.w	8009936 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800955a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800955e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800957c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009580:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	441a      	add	r2, r3
 800959e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80095a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	8013      	strh	r3, [r2, #0]
 80095b6:	e1be      	b.n	8009936 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80095b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	78db      	ldrb	r3, [r3, #3]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	f040 81b4 	bne.w	8009932 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80095ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699a      	ldr	r2, [r3, #24]
 80095d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d917      	bls.n	8009616 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80095e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80095f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800960c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	619a      	str	r2, [r3, #24]
 8009614:	e00e      	b.n	8009634 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800962a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2200      	movs	r2, #0
 8009632:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	785b      	ldrb	r3, [r3, #1]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 8085 	bne.w	8009750 <USB_EPStartXfer+0x14fc>
 8009646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009662:	b29b      	uxth	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800966a:	4413      	add	r3, r2
 800966c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	011a      	lsls	r2, r3, #4
 800967e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009682:	4413      	add	r3, r2
 8009684:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800968c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	b29b      	uxth	r3, r3
 8009694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009698:	b29a      	uxth	r2, r3
 800969a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80096a6:	d923      	bls.n	80096f0 <USB_EPStartXfer+0x149c>
 80096a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ac:	095b      	lsrs	r3, r3, #5
 80096ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80096b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b6:	f003 031f 	and.w	r3, r3, #31
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d104      	bne.n	80096c8 <USB_EPStartXfer+0x1474>
 80096be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096c2:	3b01      	subs	r3, #1
 80096c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80096c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	029b      	lsls	r3, r3, #10
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4313      	orrs	r3, r2
 80096dc:	b29b      	uxth	r3, r3
 80096de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	e060      	b.n	80097b2 <USB_EPStartXfer+0x155e>
 80096f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10c      	bne.n	8009712 <USB_EPStartXfer+0x14be>
 80096f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009708:	b29a      	uxth	r2, r3
 800970a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800970e:	801a      	strh	r2, [r3, #0]
 8009710:	e04f      	b.n	80097b2 <USB_EPStartXfer+0x155e>
 8009712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009716:	085b      	lsrs	r3, r3, #1
 8009718:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d004      	beq.n	8009732 <USB_EPStartXfer+0x14de>
 8009728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800972c:	3301      	adds	r3, #1
 800972e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29a      	uxth	r2, r3
 800973a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800973e:	b29b      	uxth	r3, r3
 8009740:	029b      	lsls	r3, r3, #10
 8009742:	b29b      	uxth	r3, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	b29a      	uxth	r2, r3
 8009748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800974c:	801a      	strh	r2, [r3, #0]
 800974e:	e030      	b.n	80097b2 <USB_EPStartXfer+0x155e>
 8009750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	785b      	ldrb	r3, [r3, #1]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d128      	bne.n	80097b2 <USB_EPStartXfer+0x155e>
 8009760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800976e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800977c:	b29b      	uxth	r3, r3
 800977e:	461a      	mov	r2, r3
 8009780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009784:	4413      	add	r3, r2
 8009786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800978a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800978e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	011a      	lsls	r2, r3, #4
 8009798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800979c:	4413      	add	r3, r2
 800979e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80097a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	785b      	ldrb	r3, [r3, #1]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 8085 	bne.w	80098dc <USB_EPStartXfer+0x1688>
 80097d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80097e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80097f6:	4413      	add	r3, r2
 80097f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80097fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	011a      	lsls	r2, r3, #4
 800980a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800980e:	4413      	add	r3, r2
 8009810:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009814:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009824:	b29a      	uxth	r2, r3
 8009826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009830:	2b3e      	cmp	r3, #62	@ 0x3e
 8009832:	d923      	bls.n	800987c <USB_EPStartXfer+0x1628>
 8009834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <USB_EPStartXfer+0x1600>
 800984a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800984e:	3b01      	subs	r3, #1
 8009850:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b29a      	uxth	r2, r3
 800985c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009860:	b29b      	uxth	r3, r3
 8009862:	029b      	lsls	r3, r3, #10
 8009864:	b29b      	uxth	r3, r3
 8009866:	4313      	orrs	r3, r2
 8009868:	b29b      	uxth	r3, r3
 800986a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800986e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009872:	b29a      	uxth	r2, r3
 8009874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009878:	801a      	strh	r2, [r3, #0]
 800987a:	e05c      	b.n	8009936 <USB_EPStartXfer+0x16e2>
 800987c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10c      	bne.n	800989e <USB_EPStartXfer+0x164a>
 8009884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009894:	b29a      	uxth	r2, r3
 8009896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800989a:	801a      	strh	r2, [r3, #0]
 800989c:	e04b      	b.n	8009936 <USB_EPStartXfer+0x16e2>
 800989e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a2:	085b      	lsrs	r3, r3, #1
 80098a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d004      	beq.n	80098be <USB_EPStartXfer+0x166a>
 80098b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098b8:	3301      	adds	r3, #1
 80098ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	029b      	lsls	r3, r3, #10
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	4313      	orrs	r3, r2
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098d8:	801a      	strh	r2, [r3, #0]
 80098da:	e02c      	b.n	8009936 <USB_EPStartXfer+0x16e2>
 80098dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d124      	bne.n	8009936 <USB_EPStartXfer+0x16e2>
 80098ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009902:	4413      	add	r3, r2
 8009904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	011a      	lsls	r2, r3, #4
 8009916:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800991a:	4413      	add	r3, r2
 800991c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009920:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009928:	b29a      	uxth	r2, r3
 800992a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e001      	b.n	8009936 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e03a      	b.n	80099ac <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800995c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009960:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009964:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009968:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800996c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009970:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009974:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	441a      	add	r2, r3
 8009992:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800999a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800999e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	785b      	ldrb	r3, [r3, #1]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d020      	beq.n	8009a0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099de:	81bb      	strh	r3, [r7, #12]
 80099e0:	89bb      	ldrh	r3, [r7, #12]
 80099e2:	f083 0310 	eor.w	r3, r3, #16
 80099e6:	81bb      	strh	r3, [r7, #12]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	441a      	add	r2, r3
 80099f2:	89bb      	ldrh	r3, [r7, #12]
 80099f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	8013      	strh	r3, [r2, #0]
 8009a08:	e01f      	b.n	8009a4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a20:	81fb      	strh	r3, [r7, #14]
 8009a22:	89fb      	ldrh	r3, [r7, #14]
 8009a24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a28:	81fb      	strh	r3, [r7, #14]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	441a      	add	r2, r3
 8009a34:	89fb      	ldrh	r3, [r7, #14]
 8009a36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr

08009a56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b087      	sub	sp, #28
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	7b1b      	ldrb	r3, [r3, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f040 809d 	bne.w	8009ba4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	785b      	ldrb	r3, [r3, #1]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d04c      	beq.n	8009b0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	823b      	strh	r3, [r7, #16]
 8009a80:	8a3b      	ldrh	r3, [r7, #16]
 8009a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01b      	beq.n	8009ac2 <USB_EPClearStall+0x6c>
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aa0:	81fb      	strh	r3, [r7, #14]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	441a      	add	r2, r3
 8009aac:	89fb      	ldrh	r3, [r7, #14]
 8009aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	78db      	ldrb	r3, [r3, #3]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d06c      	beq.n	8009ba4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ae0:	81bb      	strh	r3, [r7, #12]
 8009ae2:	89bb      	ldrh	r3, [r7, #12]
 8009ae4:	f083 0320 	eor.w	r3, r3, #32
 8009ae8:	81bb      	strh	r3, [r7, #12]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	441a      	add	r2, r3
 8009af4:	89bb      	ldrh	r3, [r7, #12]
 8009af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	8013      	strh	r3, [r2, #0]
 8009b0a:	e04b      	b.n	8009ba4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	82fb      	strh	r3, [r7, #22]
 8009b1a:	8afb      	ldrh	r3, [r7, #22]
 8009b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d01b      	beq.n	8009b5c <USB_EPClearStall+0x106>
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b3a:	82bb      	strh	r3, [r7, #20]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	441a      	add	r2, r3
 8009b46:	8abb      	ldrh	r3, [r7, #20]
 8009b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b72:	827b      	strh	r3, [r7, #18]
 8009b74:	8a7b      	ldrh	r3, [r7, #18]
 8009b76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b7a:	827b      	strh	r3, [r7, #18]
 8009b7c:	8a7b      	ldrh	r3, [r7, #18]
 8009b7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b82:	827b      	strh	r3, [r7, #18]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	441a      	add	r2, r3
 8009b8e:	8a7b      	ldrh	r3, [r7, #18]
 8009b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	371c      	adds	r7, #28
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bc80      	pop	{r7}
 8009bae:	4770      	bx	lr

08009bb0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bbc:	78fb      	ldrb	r3, [r7, #3]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2280      	movs	r2, #128	@ 0x80
 8009bc6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr

08009bd6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr

08009bea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr

08009bfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c10:	68fb      	ldr	r3, [r7, #12]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr

08009c1c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bc80      	pop	{r7}
 8009c30:	4770      	bx	lr

08009c32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b08b      	sub	sp, #44	@ 0x2c
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	461a      	mov	r2, r3
 8009c40:	460b      	mov	r3, r1
 8009c42:	80fb      	strh	r3, [r7, #6]
 8009c44:	4613      	mov	r3, r2
 8009c46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c48:	88bb      	ldrh	r3, [r7, #4]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	085b      	lsrs	r3, r3, #1
 8009c4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c58:	88fb      	ldrh	r3, [r7, #6]
 8009c5a:	005a      	lsls	r2, r3, #1
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c64:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c6a:	e01e      	b.n	8009caa <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	3301      	adds	r3, #1
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	b21a      	sxth	r2, r3
 8009c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	b21b      	sxth	r3, r3
 8009c84:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	8a7a      	ldrh	r2, [r7, #18]
 8009c8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	3302      	adds	r3, #2
 8009c90:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	3302      	adds	r3, #2
 8009c96:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1dd      	bne.n	8009c6c <USB_WritePMA+0x3a>
  }
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	372c      	adds	r7, #44	@ 0x2c
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr

08009cbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b08b      	sub	sp, #44	@ 0x2c
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	461a      	mov	r2, r3
 8009cca:	460b      	mov	r3, r1
 8009ccc:	80fb      	strh	r3, [r7, #6]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009cd2:	88bb      	ldrh	r3, [r7, #4]
 8009cd4:	085b      	lsrs	r3, r3, #1
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	005a      	lsls	r2, r3, #1
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009cee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cf4:	e01b      	b.n	8009d2e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	3302      	adds	r3, #2
 8009d02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	0a1b      	lsrs	r3, r3, #8
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	3302      	adds	r3, #2
 8009d26:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e0      	bne.n	8009cf6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009d34:	88bb      	ldrh	r3, [r7, #4]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	701a      	strb	r2, [r3, #0]
  }
}
 8009d50:	bf00      	nop
 8009d52:	372c      	adds	r7, #44	@ 0x2c
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bc80      	pop	{r7}
 8009d58:	4770      	bx	lr

08009d5a <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8009d6a:	2340      	movs	r3, #64	@ 0x40
 8009d6c:	2203      	movs	r2, #3
 8009d6e:	2181      	movs	r1, #129	@ 0x81
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f002 ffa0 	bl	800ccb6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8009d7c:	2340      	movs	r3, #64	@ 0x40
 8009d7e:	2203      	movs	r2, #3
 8009d80:	2101      	movs	r1, #1
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f002 ff97 	bl	800ccb6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8009d90:	2054      	movs	r0, #84	@ 0x54
 8009d92:	f003 f8a3 	bl	800cedc <USBD_static_malloc>
 8009d96:	4602      	mov	r2, r0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8009da8:	2301      	movs	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
 8009dac:	e012      	b.n	8009dd4 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db4:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	2340      	movs	r3, #64	@ 0x40
 8009dcc:	2101      	movs	r1, #1
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f003 f861 	bl	800ce96 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8009dea:	2181      	movs	r1, #129	@ 0x81
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f002 ff88 	bl	800cd02 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8009df8:	2101      	movs	r1, #1
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f002 ff81 	bl	800cd02 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00e      	beq.n	8009e30 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e22:	4618      	mov	r0, r3
 8009e24:	f003 f866 	bl	800cef4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e4c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d051      	beq.n	8009f0e <USBD_CUSTOM_HID_Setup+0xd2>
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	f040 80d8 	bne.w	800a020 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	785b      	ldrb	r3, [r3, #1]
 8009e74:	3b02      	subs	r3, #2
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d841      	bhi.n	8009efe <USBD_CUSTOM_HID_Setup+0xc2>
 8009e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <USBD_CUSTOM_HID_Setup+0x44>)
 8009e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e80:	08009ed9 	.word	0x08009ed9
 8009e84:	08009eb7 	.word	0x08009eb7
 8009e88:	08009eff 	.word	0x08009eff
 8009e8c:	08009eff 	.word	0x08009eff
 8009e90:	08009eff 	.word	0x08009eff
 8009e94:	08009eff 	.word	0x08009eff
 8009e98:	08009eff 	.word	0x08009eff
 8009e9c:	08009ee9 	.word	0x08009ee9
 8009ea0:	08009ec7 	.word	0x08009ec7
 8009ea4:	08009ea9 	.word	0x08009ea9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	885b      	ldrh	r3, [r3, #2]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8009eb4:	e02a      	b.n	8009f0c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	3340      	adds	r3, #64	@ 0x40
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 f9aa 	bl	800b218 <USBD_CtlSendData>
          break;
 8009ec4:	e022      	b.n	8009f0c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	885b      	ldrh	r3, [r3, #2]
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8009ed6:	e019      	b.n	8009f0c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	3344      	adds	r3, #68	@ 0x44
 8009edc:	2201      	movs	r2, #1
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 f999 	bl	800b218 <USBD_CtlSendData>
          break;
 8009ee6:	e011      	b.n	8009f0c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2201      	movs	r2, #1
 8009eec:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8009eee:	6939      	ldr	r1, [r7, #16]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	88db      	ldrh	r3, [r3, #6]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f001 f9bc 	bl	800b274 <USBD_CtlPrepareRx>
          break;
 8009efc:	e006      	b.n	8009f0c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 f91f 	bl	800b144 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f06:	2302      	movs	r3, #2
 8009f08:	75fb      	strb	r3, [r7, #23]
          break;
 8009f0a:	bf00      	nop
      }
      break;
 8009f0c:	e08f      	b.n	800a02e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b0b      	cmp	r3, #11
 8009f14:	d87c      	bhi.n	800a010 <USBD_CUSTOM_HID_Setup+0x1d4>
 8009f16:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <USBD_CUSTOM_HID_Setup+0xe0>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f4d 	.word	0x08009f4d
 8009f20:	0800a011 	.word	0x0800a011
 8009f24:	0800a011 	.word	0x0800a011
 8009f28:	0800a011 	.word	0x0800a011
 8009f2c:	0800a011 	.word	0x0800a011
 8009f30:	0800a011 	.word	0x0800a011
 8009f34:	08009f75 	.word	0x08009f75
 8009f38:	0800a011 	.word	0x0800a011
 8009f3c:	0800a011 	.word	0x0800a011
 8009f40:	0800a011 	.word	0x0800a011
 8009f44:	08009fc3 	.word	0x08009fc3
 8009f48:	08009feb 	.word	0x08009feb
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d107      	bne.n	8009f66 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f56:	f107 030e 	add.w	r3, r7, #14
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 f95a 	bl	800b218 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f64:	e05b      	b.n	800a01e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f8eb 	bl	800b144 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	75fb      	strb	r3, [r7, #23]
          break;
 8009f72:	e054      	b.n	800a01e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	885b      	ldrh	r3, [r3, #2]
 8009f78:	0a1b      	lsrs	r3, r3, #8
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	2b22      	cmp	r3, #34	@ 0x22
 8009f7e:	d10b      	bne.n	8009f98 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	88db      	ldrh	r3, [r3, #6]
 8009f84:	2b1c      	cmp	r3, #28
 8009f86:	bf28      	it	cs
 8009f88:	231c      	movcs	r3, #28
 8009f8a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	61bb      	str	r3, [r7, #24]
 8009f96:	e00d      	b.n	8009fb4 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	885b      	ldrh	r3, [r3, #2]
 8009f9c:	0a1b      	lsrs	r3, r3, #8
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	2b21      	cmp	r3, #33	@ 0x21
 8009fa2:	d107      	bne.n	8009fb4 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8009fa4:	4b24      	ldr	r3, [pc, #144]	@ (800a038 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8009fa6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	88db      	ldrh	r3, [r3, #6]
 8009fac:	2b09      	cmp	r3, #9
 8009fae:	bf28      	it	cs
 8009fb0:	2309      	movcs	r3, #9
 8009fb2:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8009fb4:	8bfb      	ldrh	r3, [r7, #30]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	69b9      	ldr	r1, [r7, #24]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 f92c 	bl	800b218 <USBD_CtlSendData>
          break;
 8009fc0:	e02d      	b.n	800a01e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d107      	bne.n	8009fdc <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	3348      	adds	r3, #72	@ 0x48
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 f91f 	bl	800b218 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fda:	e020      	b.n	800a01e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 f8b0 	bl	800b144 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe8:	e019      	b.n	800a01e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d106      	bne.n	800a002 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	885b      	ldrh	r3, [r3, #2]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a000:	e00d      	b.n	800a01e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 f89d 	bl	800b144 <USBD_CtlError>
            ret = USBD_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	75fb      	strb	r3, [r7, #23]
          break;
 800a00e:	e006      	b.n	800a01e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 f896 	bl	800b144 <USBD_CtlError>
          ret = USBD_FAIL;
 800a018:	2302      	movs	r3, #2
 800a01a:	75fb      	strb	r3, [r7, #23]
          break;
 800a01c:	bf00      	nop
      }
      break;
 800a01e:	e006      	b.n	800a02e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f001 f88e 	bl	800b144 <USBD_CtlError>
      ret = USBD_FAIL;
 800a028:	2302      	movs	r3, #2
 800a02a:	75fb      	strb	r3, [r7, #23]
      break;
 800a02c:	bf00      	nop
  }
  return ret;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	200000c8 	.word	0x200000c8

0800a03c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4613      	mov	r3, r2
 800a048:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a050:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d111      	bne.n	800a080 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10a      	bne.n	800a07c <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800a06e:	88fb      	ldrh	r3, [r7, #6]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	2181      	movs	r1, #129	@ 0x81
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f002 feeb 	bl	800ce50 <USBD_LL_Transmit>
 800a07a:	e001      	b.n	800a080 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e000      	b.n	800a082 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2229      	movs	r2, #41	@ 0x29
 800a098:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800a09a:	4b03      	ldr	r3, [pc, #12]	@ (800a0a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	20000044 	.word	0x20000044

0800a0ac <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2229      	movs	r2, #41	@ 0x29
 800a0b8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800a0ba:	4b03      	ldr	r3, [pc, #12]	@ (800a0c8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000070 	.word	0x20000070

0800a0cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2229      	movs	r2, #41	@ 0x29
 800a0d8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800a0da:	4b03      	ldr	r3, [pc, #12]	@ (800a0e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bc80      	pop	{r7}
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	2000009c 	.word	0x2000009c

0800a0ec <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return USBD_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bc80      	pop	{r7}
 800a10e:	4770      	bx	lr

0800a110 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a122:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	7810      	ldrb	r0, [r2, #0]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	7852      	ldrb	r2, [r2, #1]
 800a134:	4611      	mov	r1, r2
 800a136:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

    pdev1 = pdev;
 800a138:	4a09      	ldr	r2, [pc, #36]	@ (800a160 <USBD_CUSTOM_HID_DataOut+0x50>)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6013      	str	r3, [r2, #0]
    hhid1 = hhid;
 800a13e:	4a09      	ldr	r2, [pc, #36]	@ (800a164 <USBD_CUSTOM_HID_DataOut+0x54>)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6013      	str	r3, [r2, #0]
    usbPID.isConnected = 1;
 800a144:	4b08      	ldr	r3, [pc, #32]	@ (800a168 <USBD_CUSTOM_HID_DataOut+0x58>)
 800a146:	2201      	movs	r2, #1
 800a148:	709a      	strb	r2, [r3, #2]


  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	2340      	movs	r3, #64	@ 0x40
 800a14e:	2101      	movs	r1, #1
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f002 fea0 	bl	800ce96 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20002d54 	.word	0x20002d54
 800a164:	20002d58 	.word	0x20002d58
 800a168:	20002d5c 	.word	0x20002d5c

0800a16c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d10c      	bne.n	800a19e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	7810      	ldrb	r0, [r2, #0]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	7852      	ldrb	r2, [r2, #1]
 800a194:	4611      	mov	r1, r2
 800a196:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	220a      	movs	r2, #10
 800a1b4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800a1b6:	4b03      	ldr	r3, [pc, #12]	@ (800a1c4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bc80      	pop	{r7}
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	200000d4 	.word	0x200000d4

0800a1c8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr

0800a1f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a208:	2302      	movs	r3, #2
 800a20a:	e01a      	b.n	800a242 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	79fa      	ldrb	r2, [r7, #7]
 800a238:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f002 fcd0 	bl	800cbe0 <USBD_LL_Init>

  return USBD_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b085      	sub	sp, #20
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d006      	beq.n	800a26c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]
 800a26a:	e001      	b.n	800a270 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a26c:	2302      	movs	r3, #2
 800a26e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	bc80      	pop	{r7}
 800a27a:	4770      	bx	lr

0800a27c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f002 fcfb 	bl	800cc80 <USBD_LL_Start>

  return USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bc80      	pop	{r7}
 800a2a6:	4770      	bx	lr

0800a2a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00c      	beq.n	800a2dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	78fa      	ldrb	r2, [r7, #3]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	4798      	blx	r3
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	78fa      	ldrb	r2, [r7, #3]
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	4798      	blx	r3

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fed7 	bl	800b0d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a332:	461a      	mov	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a340:	f003 031f 	and.w	r3, r3, #31
 800a344:	2b02      	cmp	r3, #2
 800a346:	d016      	beq.n	800a376 <USBD_LL_SetupStage+0x6a>
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d81c      	bhi.n	800a386 <USBD_LL_SetupStage+0x7a>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <USBD_LL_SetupStage+0x4a>
 800a350:	2b01      	cmp	r3, #1
 800a352:	d008      	beq.n	800a366 <USBD_LL_SetupStage+0x5a>
 800a354:	e017      	b.n	800a386 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f9ca 	bl	800a6f8 <USBD_StdDevReq>
      break;
 800a364:	e01a      	b.n	800a39c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa2c 	bl	800a7cc <USBD_StdItfReq>
      break;
 800a374:	e012      	b.n	800a39c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fa6c 	bl	800a85c <USBD_StdEPReq>
      break;
 800a384:	e00a      	b.n	800a39c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a38c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a390:	b2db      	uxtb	r3, r3
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f002 fcd3 	bl	800cd40 <USBD_LL_StallEP>
      break;
 800a39a:	bf00      	nop
  }

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d14b      	bne.n	800a452 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a3c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d134      	bne.n	800a436 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	68da      	ldr	r2, [r3, #12]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d919      	bls.n	800a40c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	1ad2      	subs	r2, r2, r3
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d203      	bcs.n	800a3fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	e002      	b.n	800a400 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	461a      	mov	r2, r3
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 ff53 	bl	800b2b0 <USBD_CtlContinueRx>
 800a40a:	e038      	b.n	800a47e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00a      	beq.n	800a42e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d105      	bne.n	800a42e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 ff50 	bl	800b2d4 <USBD_CtlSendStatus>
 800a434:	e023      	b.n	800a47e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a43c:	2b05      	cmp	r3, #5
 800a43e:	d11e      	bne.n	800a47e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a448:	2100      	movs	r1, #0
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f002 fc78 	bl	800cd40 <USBD_LL_StallEP>
 800a450:	e015      	b.n	800a47e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00d      	beq.n	800a47a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a464:	2b03      	cmp	r3, #3
 800a466:	d108      	bne.n	800a47a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	7afa      	ldrb	r2, [r7, #11]
 800a472:	4611      	mov	r1, r2
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	4798      	blx	r3
 800a478:	e001      	b.n	800a47e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a47a:	2302      	movs	r3, #2
 800a47c:	e000      	b.n	800a480 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	460b      	mov	r3, r1
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a496:	7afb      	ldrb	r3, [r7, #11]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d17f      	bne.n	800a59c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3314      	adds	r3, #20
 800a4a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d15c      	bne.n	800a566 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d915      	bls.n	800a4e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	1ad2      	subs	r2, r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 febd 	bl	800b250 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2100      	movs	r1, #0
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f002 fcda 	bl	800ce96 <USBD_LL_PrepareReceive>
 800a4e2:	e04e      	b.n	800a582 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	6912      	ldr	r2, [r2, #16]
 800a4ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4f0:	fb01 f202 	mul.w	r2, r1, r2
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d11c      	bne.n	800a534 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a502:	429a      	cmp	r2, r3
 800a504:	d316      	bcc.n	800a534 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	689a      	ldr	r2, [r3, #8]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a510:	429a      	cmp	r2, r3
 800a512:	d20f      	bcs.n	800a534 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a514:	2200      	movs	r2, #0
 800a516:	2100      	movs	r1, #0
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 fe99 	bl	800b250 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a526:	2300      	movs	r3, #0
 800a528:	2200      	movs	r2, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f002 fcb2 	bl	800ce96 <USBD_LL_PrepareReceive>
 800a532:	e026      	b.n	800a582 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00a      	beq.n	800a556 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a546:	2b03      	cmp	r3, #3
 800a548:	d105      	bne.n	800a556 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a556:	2180      	movs	r1, #128	@ 0x80
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f002 fbf1 	bl	800cd40 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 fecb 	bl	800b2fa <USBD_CtlReceiveStatus>
 800a564:	e00d      	b.n	800a582 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d004      	beq.n	800a57a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a576:	2b00      	cmp	r3, #0
 800a578:	d103      	bne.n	800a582 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a57a:	2180      	movs	r1, #128	@ 0x80
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f002 fbdf 	bl	800cd40 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d11d      	bne.n	800a5c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff fe81 	bl	800a294 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a59a:	e015      	b.n	800a5c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00d      	beq.n	800a5c4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d108      	bne.n	800a5c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	7afa      	ldrb	r2, [r7, #11]
 800a5bc:	4611      	mov	r1, r2
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	4798      	blx	r3
 800a5c2:	e001      	b.n	800a5c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e000      	b.n	800a5ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5da:	2340      	movs	r3, #64	@ 0x40
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2100      	movs	r1, #0
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f002 fb68 	bl	800ccb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2240      	movs	r2, #64	@ 0x40
 800a5f2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5f6:	2340      	movs	r3, #64	@ 0x40
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2180      	movs	r1, #128	@ 0x80
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f002 fb5a 	bl	800ccb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2240      	movs	r2, #64	@ 0x40
 800a60c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a632:	2b00      	cmp	r3, #0
 800a634:	d009      	beq.n	800a64a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	6852      	ldr	r2, [r2, #4]
 800a642:	b2d2      	uxtb	r2, r2
 800a644:	4611      	mov	r1, r2
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
  }

  return USBD_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	78fa      	ldrb	r2, [r7, #3]
 800a664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr

0800a672 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2204      	movs	r2, #4
 800a68a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	bc80      	pop	{r7}
 800a698:	4770      	bx	lr

0800a69a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d105      	bne.n	800a6b8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr

0800a6c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d10b      	bne.n	800a6ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a70e:	2b40      	cmp	r3, #64	@ 0x40
 800a710:	d005      	beq.n	800a71e <USBD_StdDevReq+0x26>
 800a712:	2b40      	cmp	r3, #64	@ 0x40
 800a714:	d84f      	bhi.n	800a7b6 <USBD_StdDevReq+0xbe>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d009      	beq.n	800a72e <USBD_StdDevReq+0x36>
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d14b      	bne.n	800a7b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
      break;
 800a72c:	e048      	b.n	800a7c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	785b      	ldrb	r3, [r3, #1]
 800a732:	2b09      	cmp	r3, #9
 800a734:	d839      	bhi.n	800a7aa <USBD_StdDevReq+0xb2>
 800a736:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <USBD_StdDevReq+0x44>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a78d 	.word	0x0800a78d
 800a740:	0800a7a1 	.word	0x0800a7a1
 800a744:	0800a7ab 	.word	0x0800a7ab
 800a748:	0800a797 	.word	0x0800a797
 800a74c:	0800a7ab 	.word	0x0800a7ab
 800a750:	0800a76f 	.word	0x0800a76f
 800a754:	0800a765 	.word	0x0800a765
 800a758:	0800a7ab 	.word	0x0800a7ab
 800a75c:	0800a783 	.word	0x0800a783
 800a760:	0800a779 	.word	0x0800a779
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f9dc 	bl	800ab24 <USBD_GetDescriptor>
          break;
 800a76c:	e022      	b.n	800a7b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fb3f 	bl	800adf4 <USBD_SetAddress>
          break;
 800a776:	e01d      	b.n	800a7b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fb7e 	bl	800ae7c <USBD_SetConfig>
          break;
 800a780:	e018      	b.n	800a7b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fc07 	bl	800af98 <USBD_GetConfig>
          break;
 800a78a:	e013      	b.n	800a7b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fc37 	bl	800b002 <USBD_GetStatus>
          break;
 800a794:	e00e      	b.n	800a7b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fc65 	bl	800b068 <USBD_SetFeature>
          break;
 800a79e:	e009      	b.n	800a7b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fc74 	bl	800b090 <USBD_ClrFeature>
          break;
 800a7a8:	e004      	b.n	800a7b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fcc9 	bl	800b144 <USBD_CtlError>
          break;
 800a7b2:	bf00      	nop
      }
      break;
 800a7b4:	e004      	b.n	800a7c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fcc3 	bl	800b144 <USBD_CtlError>
      break;
 800a7be:	bf00      	nop
  }

  return ret;
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop

0800a7cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7e2:	2b40      	cmp	r3, #64	@ 0x40
 800a7e4:	d005      	beq.n	800a7f2 <USBD_StdItfReq+0x26>
 800a7e6:	2b40      	cmp	r3, #64	@ 0x40
 800a7e8:	d82e      	bhi.n	800a848 <USBD_StdItfReq+0x7c>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <USBD_StdItfReq+0x26>
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	d12a      	bne.n	800a848 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d81d      	bhi.n	800a83a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	889b      	ldrh	r3, [r3, #4]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b01      	cmp	r3, #1
 800a806:	d813      	bhi.n	800a830 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4798      	blx	r3
 800a816:	4603      	mov	r3, r0
 800a818:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	88db      	ldrh	r3, [r3, #6]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d110      	bne.n	800a844 <USBD_StdItfReq+0x78>
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10d      	bne.n	800a844 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fd53 	bl	800b2d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a82e:	e009      	b.n	800a844 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fc86 	bl	800b144 <USBD_CtlError>
          break;
 800a838:	e004      	b.n	800a844 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fc81 	bl	800b144 <USBD_CtlError>
          break;
 800a842:	e000      	b.n	800a846 <USBD_StdItfReq+0x7a>
          break;
 800a844:	bf00      	nop
      }
      break;
 800a846:	e004      	b.n	800a852 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fc7a 	bl	800b144 <USBD_CtlError>
      break;
 800a850:	bf00      	nop
  }

  return USBD_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	889b      	ldrh	r3, [r3, #4]
 800a86e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a878:	2b40      	cmp	r3, #64	@ 0x40
 800a87a:	d007      	beq.n	800a88c <USBD_StdEPReq+0x30>
 800a87c:	2b40      	cmp	r3, #64	@ 0x40
 800a87e:	f200 8146 	bhi.w	800ab0e <USBD_StdEPReq+0x2b2>
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <USBD_StdEPReq+0x40>
 800a886:	2b20      	cmp	r3, #32
 800a888:	f040 8141 	bne.w	800ab0e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	4798      	blx	r3
      break;
 800a89a:	e13d      	b.n	800ab18 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d10a      	bne.n	800a8be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4798      	blx	r3
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	e12d      	b.n	800ab1a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	785b      	ldrb	r3, [r3, #1]
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d007      	beq.n	800a8d6 <USBD_StdEPReq+0x7a>
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	f300 811b 	bgt.w	800ab02 <USBD_StdEPReq+0x2a6>
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d072      	beq.n	800a9b6 <USBD_StdEPReq+0x15a>
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d03a      	beq.n	800a94a <USBD_StdEPReq+0xee>
 800a8d4:	e115      	b.n	800ab02 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d002      	beq.n	800a8e6 <USBD_StdEPReq+0x8a>
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d015      	beq.n	800a910 <USBD_StdEPReq+0xb4>
 800a8e4:	e02b      	b.n	800a93e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00c      	beq.n	800a906 <USBD_StdEPReq+0xaa>
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b80      	cmp	r3, #128	@ 0x80
 800a8f0:	d009      	beq.n	800a906 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f002 fa22 	bl	800cd40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a8fc:	2180      	movs	r1, #128	@ 0x80
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f002 fa1e 	bl	800cd40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a904:	e020      	b.n	800a948 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fc1b 	bl	800b144 <USBD_CtlError>
              break;
 800a90e:	e01b      	b.n	800a948 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	885b      	ldrh	r3, [r3, #2]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10e      	bne.n	800a936 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00b      	beq.n	800a936 <USBD_StdEPReq+0xda>
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
 800a920:	2b80      	cmp	r3, #128	@ 0x80
 800a922:	d008      	beq.n	800a936 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	88db      	ldrh	r3, [r3, #6]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f002 fa05 	bl	800cd40 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fccc 	bl	800b2d4 <USBD_CtlSendStatus>

              break;
 800a93c:	e004      	b.n	800a948 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fbff 	bl	800b144 <USBD_CtlError>
              break;
 800a946:	bf00      	nop
          }
          break;
 800a948:	e0e0      	b.n	800ab0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a950:	2b02      	cmp	r3, #2
 800a952:	d002      	beq.n	800a95a <USBD_StdEPReq+0xfe>
 800a954:	2b03      	cmp	r3, #3
 800a956:	d015      	beq.n	800a984 <USBD_StdEPReq+0x128>
 800a958:	e026      	b.n	800a9a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a95a:	7bbb      	ldrb	r3, [r7, #14]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00c      	beq.n	800a97a <USBD_StdEPReq+0x11e>
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b80      	cmp	r3, #128	@ 0x80
 800a964:	d009      	beq.n	800a97a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f002 f9e8 	bl	800cd40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a970:	2180      	movs	r1, #128	@ 0x80
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f002 f9e4 	bl	800cd40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a978:	e01c      	b.n	800a9b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fbe1 	bl	800b144 <USBD_CtlError>
              break;
 800a982:	e017      	b.n	800a9b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d112      	bne.n	800a9b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f002 f9ef 	bl	800cd7e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fc97 	bl	800b2d4 <USBD_CtlSendStatus>
              }
              break;
 800a9a6:	e004      	b.n	800a9b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fbca 	bl	800b144 <USBD_CtlError>
              break;
 800a9b0:	e000      	b.n	800a9b4 <USBD_StdEPReq+0x158>
              break;
 800a9b2:	bf00      	nop
          }
          break;
 800a9b4:	e0aa      	b.n	800ab0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d002      	beq.n	800a9c6 <USBD_StdEPReq+0x16a>
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d032      	beq.n	800aa2a <USBD_StdEPReq+0x1ce>
 800a9c4:	e097      	b.n	800aaf6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <USBD_StdEPReq+0x180>
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	2b80      	cmp	r3, #128	@ 0x80
 800a9d0:	d004      	beq.n	800a9dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fbb5 	bl	800b144 <USBD_CtlError>
                break;
 800a9da:	e091      	b.n	800ab00 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	da0b      	bge.n	800a9fc <USBD_StdEPReq+0x1a0>
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	3310      	adds	r3, #16
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	e00b      	b.n	800aa14 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa02:	4613      	mov	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	3304      	adds	r3, #4
 800aa14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fbf8 	bl	800b218 <USBD_CtlSendData>
              break;
 800aa28:	e06a      	b.n	800ab00 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	da11      	bge.n	800aa56 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	f003 020f 	and.w	r2, r3, #15
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	440b      	add	r3, r1
 800aa44:	3318      	adds	r3, #24
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d117      	bne.n	800aa7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fb78 	bl	800b144 <USBD_CtlError>
                  break;
 800aa54:	e054      	b.n	800ab00 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	f003 020f 	and.w	r2, r3, #15
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	440b      	add	r3, r1
 800aa68:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d104      	bne.n	800aa7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fb65 	bl	800b144 <USBD_CtlError>
                  break;
 800aa7a:	e041      	b.n	800ab00 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da0b      	bge.n	800aa9c <USBD_StdEPReq+0x240>
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	3310      	adds	r3, #16
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	4413      	add	r3, r2
 800aa98:	3304      	adds	r3, #4
 800aa9a:	e00b      	b.n	800aab4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	3304      	adds	r3, #4
 800aab4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <USBD_StdEPReq+0x266>
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	2b80      	cmp	r3, #128	@ 0x80
 800aac0:	d103      	bne.n	800aaca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2200      	movs	r2, #0
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e00e      	b.n	800aae8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aaca:	7bbb      	ldrb	r3, [r7, #14]
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f002 f974 	bl	800cdbc <USBD_LL_IsStallEP>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2201      	movs	r2, #1
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	e002      	b.n	800aae8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2202      	movs	r2, #2
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fb92 	bl	800b218 <USBD_CtlSendData>
              break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fb23 	bl	800b144 <USBD_CtlError>
              break;
 800aafe:	bf00      	nop
          }
          break;
 800ab00:	e004      	b.n	800ab0c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fb1d 	bl	800b144 <USBD_CtlError>
          break;
 800ab0a:	bf00      	nop
      }
      break;
 800ab0c:	e004      	b.n	800ab18 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fb17 	bl	800b144 <USBD_CtlError>
      break;
 800ab16:	bf00      	nop
  }

  return ret;
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
	...

0800ab24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	885b      	ldrh	r3, [r3, #2]
 800ab3e:	0a1b      	lsrs	r3, r3, #8
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	3b01      	subs	r3, #1
 800ab44:	2b06      	cmp	r3, #6
 800ab46:	f200 8128 	bhi.w	800ad9a <USBD_GetDescriptor+0x276>
 800ab4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab50 <USBD_GetDescriptor+0x2c>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800ab6d 	.word	0x0800ab6d
 800ab54:	0800ab85 	.word	0x0800ab85
 800ab58:	0800abc5 	.word	0x0800abc5
 800ab5c:	0800ad9b 	.word	0x0800ad9b
 800ab60:	0800ad9b 	.word	0x0800ad9b
 800ab64:	0800ad3b 	.word	0x0800ad3b
 800ab68:	0800ad67 	.word	0x0800ad67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	7c12      	ldrb	r2, [r2, #16]
 800ab78:	f107 0108 	add.w	r1, r7, #8
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	4798      	blx	r3
 800ab80:	60f8      	str	r0, [r7, #12]
      break;
 800ab82:	e112      	b.n	800adaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	7c1b      	ldrb	r3, [r3, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10d      	bne.n	800aba8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab94:	f107 0208 	add.w	r2, r7, #8
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4798      	blx	r3
 800ab9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3301      	adds	r3, #1
 800aba2:	2202      	movs	r2, #2
 800aba4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aba6:	e100      	b.n	800adaa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb0:	f107 0208 	add.w	r2, r7, #8
 800abb4:	4610      	mov	r0, r2
 800abb6:	4798      	blx	r3
 800abb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3301      	adds	r3, #1
 800abbe:	2202      	movs	r2, #2
 800abc0:	701a      	strb	r2, [r3, #0]
      break;
 800abc2:	e0f2      	b.n	800adaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	885b      	ldrh	r3, [r3, #2]
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b05      	cmp	r3, #5
 800abcc:	f200 80ac 	bhi.w	800ad28 <USBD_GetDescriptor+0x204>
 800abd0:	a201      	add	r2, pc, #4	@ (adr r2, 800abd8 <USBD_GetDescriptor+0xb4>)
 800abd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd6:	bf00      	nop
 800abd8:	0800abf1 	.word	0x0800abf1
 800abdc:	0800ac25 	.word	0x0800ac25
 800abe0:	0800ac59 	.word	0x0800ac59
 800abe4:	0800ac8d 	.word	0x0800ac8d
 800abe8:	0800acc1 	.word	0x0800acc1
 800abec:	0800acf5 	.word	0x0800acf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac12:	e091      	b.n	800ad38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa94 	bl	800b144 <USBD_CtlError>
            err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
          break;
 800ac22:	e089      	b.n	800ad38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	7c12      	ldrb	r2, [r2, #16]
 800ac3c:	f107 0108 	add.w	r1, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac46:	e077      	b.n	800ad38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa7a 	bl	800b144 <USBD_CtlError>
            err++;
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	3301      	adds	r3, #1
 800ac54:	72fb      	strb	r3, [r7, #11]
          break;
 800ac56:	e06f      	b.n	800ad38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00b      	beq.n	800ac7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	7c12      	ldrb	r2, [r2, #16]
 800ac70:	f107 0108 	add.w	r1, r7, #8
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
 800ac78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac7a:	e05d      	b.n	800ad38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fa60 	bl	800b144 <USBD_CtlError>
            err++;
 800ac84:	7afb      	ldrb	r3, [r7, #11]
 800ac86:	3301      	adds	r3, #1
 800ac88:	72fb      	strb	r3, [r7, #11]
          break;
 800ac8a:	e055      	b.n	800ad38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00b      	beq.n	800acb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7c12      	ldrb	r2, [r2, #16]
 800aca4:	f107 0108 	add.w	r1, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acae:	e043      	b.n	800ad38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fa46 	bl	800b144 <USBD_CtlError>
            err++;
 800acb8:	7afb      	ldrb	r3, [r7, #11]
 800acba:	3301      	adds	r3, #1
 800acbc:	72fb      	strb	r3, [r7, #11]
          break;
 800acbe:	e03b      	b.n	800ad38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00b      	beq.n	800ace4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	7c12      	ldrb	r2, [r2, #16]
 800acd8:	f107 0108 	add.w	r1, r7, #8
 800acdc:	4610      	mov	r0, r2
 800acde:	4798      	blx	r3
 800ace0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ace2:	e029      	b.n	800ad38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa2c 	bl	800b144 <USBD_CtlError>
            err++;
 800acec:	7afb      	ldrb	r3, [r7, #11]
 800acee:	3301      	adds	r3, #1
 800acf0:	72fb      	strb	r3, [r7, #11]
          break;
 800acf2:	e021      	b.n	800ad38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00b      	beq.n	800ad18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	7c12      	ldrb	r2, [r2, #16]
 800ad0c:	f107 0108 	add.w	r1, r7, #8
 800ad10:	4610      	mov	r0, r2
 800ad12:	4798      	blx	r3
 800ad14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad16:	e00f      	b.n	800ad38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fa12 	bl	800b144 <USBD_CtlError>
            err++;
 800ad20:	7afb      	ldrb	r3, [r7, #11]
 800ad22:	3301      	adds	r3, #1
 800ad24:	72fb      	strb	r3, [r7, #11]
          break;
 800ad26:	e007      	b.n	800ad38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa0a 	bl	800b144 <USBD_CtlError>
          err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ad36:	e038      	b.n	800adaa <USBD_GetDescriptor+0x286>
 800ad38:	e037      	b.n	800adaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	7c1b      	ldrb	r3, [r3, #16]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d109      	bne.n	800ad56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad4a:	f107 0208 	add.w	r2, r7, #8
 800ad4e:	4610      	mov	r0, r2
 800ad50:	4798      	blx	r3
 800ad52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad54:	e029      	b.n	800adaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f9f3 	bl	800b144 <USBD_CtlError>
        err++;
 800ad5e:	7afb      	ldrb	r3, [r7, #11]
 800ad60:	3301      	adds	r3, #1
 800ad62:	72fb      	strb	r3, [r7, #11]
      break;
 800ad64:	e021      	b.n	800adaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	7c1b      	ldrb	r3, [r3, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10d      	bne.n	800ad8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad76:	f107 0208 	add.w	r2, r7, #8
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	4798      	blx	r3
 800ad7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3301      	adds	r3, #1
 800ad84:	2207      	movs	r2, #7
 800ad86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad88:	e00f      	b.n	800adaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f9d9 	bl	800b144 <USBD_CtlError>
        err++;
 800ad92:	7afb      	ldrb	r3, [r7, #11]
 800ad94:	3301      	adds	r3, #1
 800ad96:	72fb      	strb	r3, [r7, #11]
      break;
 800ad98:	e007      	b.n	800adaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f9d1 	bl	800b144 <USBD_CtlError>
      err++;
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	3301      	adds	r3, #1
 800ada6:	72fb      	strb	r3, [r7, #11]
      break;
 800ada8:	bf00      	nop
  }

  if (err != 0U)
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d11c      	bne.n	800adea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800adb0:	893b      	ldrh	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d011      	beq.n	800adda <USBD_GetDescriptor+0x2b6>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	88db      	ldrh	r3, [r3, #6]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00d      	beq.n	800adda <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	88da      	ldrh	r2, [r3, #6]
 800adc2:	893b      	ldrh	r3, [r7, #8]
 800adc4:	4293      	cmp	r3, r2
 800adc6:	bf28      	it	cs
 800adc8:	4613      	movcs	r3, r2
 800adca:	b29b      	uxth	r3, r3
 800adcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adce:	893b      	ldrh	r3, [r7, #8]
 800add0:	461a      	mov	r2, r3
 800add2:	68f9      	ldr	r1, [r7, #12]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fa1f 	bl	800b218 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	88db      	ldrh	r3, [r3, #6]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d104      	bne.n	800adec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa76 	bl	800b2d4 <USBD_CtlSendStatus>
 800ade8:	e000      	b.n	800adec <USBD_GetDescriptor+0x2c8>
    return;
 800adea:	bf00      	nop
    }
  }
}
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop

0800adf4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	889b      	ldrh	r3, [r3, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d130      	bne.n	800ae68 <USBD_SetAddress+0x74>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	88db      	ldrh	r3, [r3, #6]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d12c      	bne.n	800ae68 <USBD_SetAddress+0x74>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	885b      	ldrh	r3, [r3, #2]
 800ae12:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae14:	d828      	bhi.n	800ae68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	885b      	ldrh	r3, [r3, #2]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae28:	2b03      	cmp	r3, #3
 800ae2a:	d104      	bne.n	800ae36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f988 	bl	800b144 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae34:	e01d      	b.n	800ae72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7bfa      	ldrb	r2, [r7, #15]
 800ae3a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f001 ffe5 	bl	800ce12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fa43 	bl	800b2d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d004      	beq.n	800ae5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2202      	movs	r2, #2
 800ae58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5c:	e009      	b.n	800ae72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae66:	e004      	b.n	800ae72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f96a 	bl	800b144 <USBD_CtlError>
  }
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	885b      	ldrh	r3, [r3, #2]
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	4b41      	ldr	r3, [pc, #260]	@ (800af94 <USBD_SetConfig+0x118>)
 800ae8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae90:	4b40      	ldr	r3, [pc, #256]	@ (800af94 <USBD_SetConfig+0x118>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d904      	bls.n	800aea2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f952 	bl	800b144 <USBD_CtlError>
 800aea0:	e075      	b.n	800af8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d002      	beq.n	800aeb2 <USBD_SetConfig+0x36>
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d023      	beq.n	800aef8 <USBD_SetConfig+0x7c>
 800aeb0:	e062      	b.n	800af78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aeb2:	4b38      	ldr	r3, [pc, #224]	@ (800af94 <USBD_SetConfig+0x118>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d01a      	beq.n	800aef0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aeba:	4b36      	ldr	r3, [pc, #216]	@ (800af94 <USBD_SetConfig+0x118>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2203      	movs	r2, #3
 800aec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aecc:	4b31      	ldr	r3, [pc, #196]	@ (800af94 <USBD_SetConfig+0x118>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff f9e8 	bl	800a2a8 <USBD_SetClassConfig>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d104      	bne.n	800aee8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f92f 	bl	800b144 <USBD_CtlError>
            return;
 800aee6:	e052      	b.n	800af8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f9f3 	bl	800b2d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aeee:	e04e      	b.n	800af8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f9ef 	bl	800b2d4 <USBD_CtlSendStatus>
        break;
 800aef6:	e04a      	b.n	800af8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aef8:	4b26      	ldr	r3, [pc, #152]	@ (800af94 <USBD_SetConfig+0x118>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d112      	bne.n	800af26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800af08:	4b22      	ldr	r3, [pc, #136]	@ (800af94 <USBD_SetConfig+0x118>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	461a      	mov	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800af12:	4b20      	ldr	r3, [pc, #128]	@ (800af94 <USBD_SetConfig+0x118>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7ff f9e4 	bl	800a2e6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f9d8 	bl	800b2d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af24:	e033      	b.n	800af8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800af26:	4b1b      	ldr	r3, [pc, #108]	@ (800af94 <USBD_SetConfig+0x118>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	429a      	cmp	r2, r3
 800af32:	d01d      	beq.n	800af70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff f9d2 	bl	800a2e6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800af42:	4b14      	ldr	r3, [pc, #80]	@ (800af94 <USBD_SetConfig+0x118>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af4c:	4b11      	ldr	r3, [pc, #68]	@ (800af94 <USBD_SetConfig+0x118>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff f9a8 	bl	800a2a8 <USBD_SetClassConfig>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d104      	bne.n	800af68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f8ef 	bl	800b144 <USBD_CtlError>
            return;
 800af66:	e012      	b.n	800af8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f9b3 	bl	800b2d4 <USBD_CtlSendStatus>
        break;
 800af6e:	e00e      	b.n	800af8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f9af 	bl	800b2d4 <USBD_CtlSendStatus>
        break;
 800af76:	e00a      	b.n	800af8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f8e2 	bl	800b144 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800af80:	4b04      	ldr	r3, [pc, #16]	@ (800af94 <USBD_SetConfig+0x118>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff f9ad 	bl	800a2e6 <USBD_ClrClassConfig>
        break;
 800af8c:	bf00      	nop
    }
  }
}
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	2000066c 	.word	0x2000066c

0800af98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	88db      	ldrh	r3, [r3, #6]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d004      	beq.n	800afb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f8c9 	bl	800b144 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afb2:	e022      	b.n	800affa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afba:	2b02      	cmp	r3, #2
 800afbc:	dc02      	bgt.n	800afc4 <USBD_GetConfig+0x2c>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	dc03      	bgt.n	800afca <USBD_GetConfig+0x32>
 800afc2:	e015      	b.n	800aff0 <USBD_GetConfig+0x58>
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d00b      	beq.n	800afe0 <USBD_GetConfig+0x48>
 800afc8:	e012      	b.n	800aff0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3308      	adds	r3, #8
 800afd4:	2201      	movs	r2, #1
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f91d 	bl	800b218 <USBD_CtlSendData>
        break;
 800afde:	e00c      	b.n	800affa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3304      	adds	r3, #4
 800afe4:	2201      	movs	r2, #1
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f915 	bl	800b218 <USBD_CtlSendData>
        break;
 800afee:	e004      	b.n	800affa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f8a6 	bl	800b144 <USBD_CtlError>
        break;
 800aff8:	bf00      	nop
}
 800affa:	bf00      	nop
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b012:	3b01      	subs	r3, #1
 800b014:	2b02      	cmp	r3, #2
 800b016:	d81e      	bhi.n	800b056 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	88db      	ldrh	r3, [r3, #6]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d004      	beq.n	800b02a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f88e 	bl	800b144 <USBD_CtlError>
        break;
 800b028:	e01a      	b.n	800b060 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f043 0202 	orr.w	r2, r3, #2
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	330c      	adds	r3, #12
 800b04a:	2202      	movs	r2, #2
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f8e2 	bl	800b218 <USBD_CtlSendData>
      break;
 800b054:	e004      	b.n	800b060 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f873 	bl	800b144 <USBD_CtlError>
      break;
 800b05e:	bf00      	nop
  }
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	885b      	ldrh	r3, [r3, #2]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d106      	bne.n	800b088 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f926 	bl	800b2d4 <USBD_CtlSendStatus>
  }
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d80b      	bhi.n	800b0be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	885b      	ldrh	r3, [r3, #2]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d10c      	bne.n	800b0c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f90c 	bl	800b2d4 <USBD_CtlSendStatus>
      }
      break;
 800b0bc:	e004      	b.n	800b0c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f83f 	bl	800b144 <USBD_CtlError>
      break;
 800b0c6:	e000      	b.n	800b0ca <USBD_ClrFeature+0x3a>
      break;
 800b0c8:	bf00      	nop
  }
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	785a      	ldrb	r2, [r3, #1]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	3303      	adds	r3, #3
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	021b      	lsls	r3, r3, #8
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	4413      	add	r3, r2
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	3304      	adds	r3, #4
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	461a      	mov	r2, r3
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	3305      	adds	r3, #5
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	b29b      	uxth	r3, r3
 800b118:	4413      	add	r3, r2
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3306      	adds	r3, #6
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	3307      	adds	r3, #7
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	021b      	lsls	r3, r3, #8
 800b130:	b29b      	uxth	r3, r3
 800b132:	4413      	add	r3, r2
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	80da      	strh	r2, [r3, #6]

}
 800b13a:	bf00      	nop
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	bc80      	pop	{r7}
 800b142:	4770      	bx	lr

0800b144 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b14e:	2180      	movs	r1, #128	@ 0x80
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 fdf5 	bl	800cd40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b156:	2100      	movs	r1, #0
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 fdf1 	bl	800cd40 <USBD_LL_StallEP>
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b086      	sub	sp, #24
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d032      	beq.n	800b1e2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 f834 	bl	800b1ea <USBD_GetLen>
 800b182:	4603      	mov	r3, r0
 800b184:	3301      	adds	r3, #1
 800b186:	b29b      	uxth	r3, r3
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	75fa      	strb	r2, [r7, #23]
 800b196:	461a      	mov	r2, r3
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	4413      	add	r3, r2
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	7812      	ldrb	r2, [r2, #0]
 800b1a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	75fa      	strb	r2, [r7, #23]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	2203      	movs	r2, #3
 800b1b0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b1b2:	e012      	b.n	800b1da <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	60fa      	str	r2, [r7, #12]
 800b1ba:	7dfa      	ldrb	r2, [r7, #23]
 800b1bc:	1c51      	adds	r1, r2, #1
 800b1be:	75f9      	strb	r1, [r7, #23]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	440a      	add	r2, r1
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b1ca:	7dfb      	ldrb	r3, [r7, #23]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	75fa      	strb	r2, [r7, #23]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e8      	bne.n	800b1b4 <USBD_GetString+0x4e>
    }
  }
}
 800b1e2:	bf00      	nop
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b085      	sub	sp, #20
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b1f6:	e005      	b.n	800b204 <USBD_GetLen+0x1a>
  {
    len++;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3301      	adds	r3, #1
 800b202:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1f5      	bne.n	800b1f8 <USBD_GetLen+0xe>
  }

  return len;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	bc80      	pop	{r7}
 800b216:	4770      	bx	lr

0800b218 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	4613      	mov	r3, r2
 800b224:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2202      	movs	r2, #2
 800b22a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b22e:	88fa      	ldrh	r2, [r7, #6]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b234:	88fa      	ldrh	r2, [r7, #6]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b23a:	88fb      	ldrh	r3, [r7, #6]
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	2100      	movs	r1, #0
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f001 fe05 	bl	800ce50 <USBD_LL_Transmit>

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4613      	mov	r3, r2
 800b25c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b25e:	88fb      	ldrh	r3, [r7, #6]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	2100      	movs	r1, #0
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f001 fdf3 	bl	800ce50 <USBD_LL_Transmit>

  return USBD_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2203      	movs	r2, #3
 800b286:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b28a:	88fa      	ldrh	r2, [r7, #6]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b292:	88fa      	ldrh	r2, [r7, #6]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b29a:	88fb      	ldrh	r3, [r7, #6]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	2100      	movs	r1, #0
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f001 fdf8 	bl	800ce96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2be:	88fb      	ldrh	r3, [r7, #6]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f001 fde6 	bl	800ce96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2204      	movs	r2, #4
 800b2e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fdb0 	bl	800ce50 <USBD_LL_Transmit>

  return USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2205      	movs	r2, #5
 800b306:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b30a:	2300      	movs	r3, #0
 800b30c:	2200      	movs	r2, #0
 800b30e:	2100      	movs	r1, #0
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f001 fdc0 	bl	800ce96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b32e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b332:	2b84      	cmp	r3, #132	@ 0x84
 800b334:	d005      	beq.n	800b342 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b336:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4413      	add	r3, r2
 800b33e:	3303      	adds	r3, #3
 800b340:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b342:	68fb      	ldr	r3, [r7, #12]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	bc80      	pop	{r7}
 800b34c:	4770      	bx	lr

0800b34e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b352:	f000 faf7 	bl	800b944 <vTaskStartScheduler>
  
  return osOK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b35e:	b089      	sub	sp, #36	@ 0x24
 800b360:	af04      	add	r7, sp, #16
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d020      	beq.n	800b3b0 <osThreadCreate+0x54>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d01c      	beq.n	800b3b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685c      	ldr	r4, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691e      	ldr	r6, [r3, #16]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ffc9 	bl	800b320 <makeFreeRtosPriority>
 800b38e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b398:	9202      	str	r2, [sp, #8]
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	9100      	str	r1, [sp, #0]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	4632      	mov	r2, r6
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 f8e8 	bl	800b57a <xTaskCreateStatic>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	e01c      	b.n	800b3ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685c      	ldr	r4, [r3, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3bc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff ffab 	bl	800b320 <makeFreeRtosPriority>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	f107 030c 	add.w	r3, r7, #12
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	9200      	str	r2, [sp, #0]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	4629      	mov	r1, r5
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 f92d 	bl	800b63a <xTaskCreate>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d001      	beq.n	800b3ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e000      	b.n	800b3ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <osDelay+0x16>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	e000      	b.n	800b40c <osDelay+0x18>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 fa63 	bl	800b8d8 <vTaskDelay>
  
  return osOK;
 800b412:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f103 0208 	add.w	r2, r3, #8
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f103 0208 	add.w	r2, r3, #8
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f103 0208 	add.w	r2, r3, #8
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	bc80      	pop	{r7}
 800b458:	4770      	bx	lr

0800b45a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bc80      	pop	{r7}
 800b470:	4770      	bx	lr

0800b472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b472:	b480      	push	{r7}
 800b474:	b085      	sub	sp, #20
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
}
 800b4ae:	bf00      	nop
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bc80      	pop	{r7}
 800b4b6:	4770      	bx	lr

0800b4b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d103      	bne.n	800b4d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	60fb      	str	r3, [r7, #12]
 800b4d6:	e00c      	b.n	800b4f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	e002      	b.n	800b4e6 <vListInsert+0x2e>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d2f6      	bcs.n	800b4e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	601a      	str	r2, [r3, #0]
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	bc80      	pop	{r7}
 800b526:	4770      	bx	lr

0800b528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6892      	ldr	r2, [r2, #8]
 800b53e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	6852      	ldr	r2, [r2, #4]
 800b548:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	429a      	cmp	r2, r3
 800b552:	d103      	bne.n	800b55c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	689a      	ldr	r2, [r3, #8]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	1e5a      	subs	r2, r3, #1
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	bc80      	pop	{r7}
 800b578:	4770      	bx	lr

0800b57a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b08e      	sub	sp, #56	@ 0x38
 800b57e:	af04      	add	r7, sp, #16
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	607a      	str	r2, [r7, #4]
 800b586:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10b      	bne.n	800b5a6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10b      	bne.n	800b5c4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	61fb      	str	r3, [r7, #28]
}
 800b5be:	bf00      	nop
 800b5c0:	bf00      	nop
 800b5c2:	e7fd      	b.n	800b5c0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5c4:	23a0      	movs	r3, #160	@ 0xa0
 800b5c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2ba0      	cmp	r3, #160	@ 0xa0
 800b5cc:	d00b      	beq.n	800b5e6 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	61bb      	str	r3, [r7, #24]
}
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	e7fd      	b.n	800b5e2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d01e      	beq.n	800b62c <xTaskCreateStatic+0xb2>
 800b5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d01b      	beq.n	800b62c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5fc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	2202      	movs	r2, #2
 800b602:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b606:	2300      	movs	r3, #0
 800b608:	9303      	str	r3, [sp, #12]
 800b60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60c:	9302      	str	r3, [sp, #8]
 800b60e:	f107 0314 	add.w	r3, r7, #20
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	68b9      	ldr	r1, [r7, #8]
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 f850 	bl	800b6c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b624:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b626:	f000 f8ed 	bl	800b804 <prvAddNewTaskToReadyList>
 800b62a:	e001      	b.n	800b630 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b62c:	2300      	movs	r3, #0
 800b62e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b630:	697b      	ldr	r3, [r7, #20]
	}
 800b632:	4618      	mov	r0, r3
 800b634:	3728      	adds	r7, #40	@ 0x28
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b08c      	sub	sp, #48	@ 0x30
 800b63e:	af04      	add	r7, sp, #16
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	60b9      	str	r1, [r7, #8]
 800b644:	603b      	str	r3, [r7, #0]
 800b646:	4613      	mov	r3, r2
 800b648:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 febe 	bl	800c3d0 <pvPortMalloc>
 800b654:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00e      	beq.n	800b67a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b65c:	20a0      	movs	r0, #160	@ 0xa0
 800b65e:	f000 feb7 	bl	800c3d0 <pvPortMalloc>
 800b662:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	697a      	ldr	r2, [r7, #20]
 800b66e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b670:	e005      	b.n	800b67e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b672:	6978      	ldr	r0, [r7, #20]
 800b674:	f000 ff7a 	bl	800c56c <vPortFree>
 800b678:	e001      	b.n	800b67e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d017      	beq.n	800b6b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b68c:	88fa      	ldrh	r2, [r7, #6]
 800b68e:	2300      	movs	r3, #0
 800b690:	9303      	str	r3, [sp, #12]
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	9302      	str	r3, [sp, #8]
 800b696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	68b9      	ldr	r1, [r7, #8]
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 f80e 	bl	800b6c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6a8:	69f8      	ldr	r0, [r7, #28]
 800b6aa:	f000 f8ab 	bl	800b804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	61bb      	str	r3, [r7, #24]
 800b6b2:	e002      	b.n	800b6ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6ba:	69bb      	ldr	r3, [r7, #24]
	}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	f023 0307 	bic.w	r3, r3, #7
 800b6ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	f003 0307 	and.w	r3, r3, #7
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00b      	beq.n	800b70e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fa:	f383 8811 	msr	BASEPRI, r3
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	617b      	str	r3, [r7, #20]
}
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	e7fd      	b.n	800b70a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01f      	beq.n	800b754 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	e012      	b.n	800b740 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	4413      	add	r3, r2
 800b720:	7819      	ldrb	r1, [r3, #0]
 800b722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	4413      	add	r3, r2
 800b728:	3334      	adds	r3, #52	@ 0x34
 800b72a:	460a      	mov	r2, r1
 800b72c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	4413      	add	r3, r2
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d006      	beq.n	800b748 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	3301      	adds	r3, #1
 800b73e:	61fb      	str	r3, [r7, #28]
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	2b0f      	cmp	r3, #15
 800b744:	d9e9      	bls.n	800b71a <prvInitialiseNewTask+0x56>
 800b746:	e000      	b.n	800b74a <prvInitialiseNewTask+0x86>
			{
				break;
 800b748:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b752:	e003      	b.n	800b75c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75e:	2b06      	cmp	r3, #6
 800b760:	d901      	bls.n	800b766 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b762:	2306      	movs	r3, #6
 800b764:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b76a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b770:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b774:	2200      	movs	r2, #0
 800b776:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77a:	3304      	adds	r3, #4
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff fe6c 	bl	800b45a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b784:	3318      	adds	r3, #24
 800b786:	4618      	mov	r0, r3
 800b788:	f7ff fe67 	bl	800b45a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b794:	f1c3 0207 	rsb	r2, r3, #7
 800b798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b4:	334c      	adds	r3, #76	@ 0x4c
 800b7b6:	224c      	movs	r2, #76	@ 0x4c
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f003 faf6 	bl	800edac <memset>
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c2:	4a0d      	ldr	r2, [pc, #52]	@ (800b7f8 <prvInitialiseNewTask+0x134>)
 800b7c4:	651a      	str	r2, [r3, #80]	@ 0x50
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c8:	4a0c      	ldr	r2, [pc, #48]	@ (800b7fc <prvInitialiseNewTask+0x138>)
 800b7ca:	655a      	str	r2, [r3, #84]	@ 0x54
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b800 <prvInitialiseNewTask+0x13c>)
 800b7d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	68f9      	ldr	r1, [r7, #12]
 800b7d6:	69b8      	ldr	r0, [r7, #24]
 800b7d8:	f000 fc46 	bl	800c068 <pxPortInitialiseStack>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20002ef0 	.word	0x20002ef0
 800b7fc:	20002f58 	.word	0x20002f58
 800b800:	20002fc0 	.word	0x20002fc0

0800b804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b80c:	f000 fd1e 	bl	800c24c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b810:	4b2a      	ldr	r3, [pc, #168]	@ (800b8bc <prvAddNewTaskToReadyList+0xb8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3301      	adds	r3, #1
 800b816:	4a29      	ldr	r2, [pc, #164]	@ (800b8bc <prvAddNewTaskToReadyList+0xb8>)
 800b818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b81a:	4b29      	ldr	r3, [pc, #164]	@ (800b8c0 <prvAddNewTaskToReadyList+0xbc>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d109      	bne.n	800b836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b822:	4a27      	ldr	r2, [pc, #156]	@ (800b8c0 <prvAddNewTaskToReadyList+0xbc>)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b828:	4b24      	ldr	r3, [pc, #144]	@ (800b8bc <prvAddNewTaskToReadyList+0xb8>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d110      	bne.n	800b852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b830:	f000 fad2 	bl	800bdd8 <prvInitialiseTaskLists>
 800b834:	e00d      	b.n	800b852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b836:	4b23      	ldr	r3, [pc, #140]	@ (800b8c4 <prvAddNewTaskToReadyList+0xc0>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d109      	bne.n	800b852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b83e:	4b20      	ldr	r3, [pc, #128]	@ (800b8c0 <prvAddNewTaskToReadyList+0xbc>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	429a      	cmp	r2, r3
 800b84a:	d802      	bhi.n	800b852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b84c:	4a1c      	ldr	r2, [pc, #112]	@ (800b8c0 <prvAddNewTaskToReadyList+0xbc>)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b852:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c8 <prvAddNewTaskToReadyList+0xc4>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3301      	adds	r3, #1
 800b858:	4a1b      	ldr	r2, [pc, #108]	@ (800b8c8 <prvAddNewTaskToReadyList+0xc4>)
 800b85a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b860:	2201      	movs	r2, #1
 800b862:	409a      	lsls	r2, r3
 800b864:	4b19      	ldr	r3, [pc, #100]	@ (800b8cc <prvAddNewTaskToReadyList+0xc8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4313      	orrs	r3, r2
 800b86a:	4a18      	ldr	r2, [pc, #96]	@ (800b8cc <prvAddNewTaskToReadyList+0xc8>)
 800b86c:	6013      	str	r3, [r2, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b872:	4613      	mov	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4a15      	ldr	r2, [pc, #84]	@ (800b8d0 <prvAddNewTaskToReadyList+0xcc>)
 800b87c:	441a      	add	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3304      	adds	r3, #4
 800b882:	4619      	mov	r1, r3
 800b884:	4610      	mov	r0, r2
 800b886:	f7ff fdf4 	bl	800b472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b88a:	f000 fd0f 	bl	800c2ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b88e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c4 <prvAddNewTaskToReadyList+0xc0>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00e      	beq.n	800b8b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b896:	4b0a      	ldr	r3, [pc, #40]	@ (800b8c0 <prvAddNewTaskToReadyList+0xbc>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d207      	bcs.n	800b8b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d4 <prvAddNewTaskToReadyList+0xd0>)
 800b8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8b4:	bf00      	nop
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20000770 	.word	0x20000770
 800b8c0:	20000670 	.word	0x20000670
 800b8c4:	2000077c 	.word	0x2000077c
 800b8c8:	2000078c 	.word	0x2000078c
 800b8cc:	20000778 	.word	0x20000778
 800b8d0:	20000674 	.word	0x20000674
 800b8d4:	e000ed04 	.word	0xe000ed04

0800b8d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d018      	beq.n	800b91c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8ea:	4b14      	ldr	r3, [pc, #80]	@ (800b93c <vTaskDelay+0x64>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00b      	beq.n	800b90a <vTaskDelay+0x32>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	60bb      	str	r3, [r7, #8]
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop
 800b908:	e7fd      	b.n	800b906 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b90a:	f000 f885 	bl	800ba18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b90e:	2100      	movs	r1, #0
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fb43 	bl	800bf9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b916:	f000 f88d 	bl	800ba34 <xTaskResumeAll>
 800b91a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d107      	bne.n	800b932 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b922:	4b07      	ldr	r3, [pc, #28]	@ (800b940 <vTaskDelay+0x68>)
 800b924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20000798 	.word	0x20000798
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08a      	sub	sp, #40	@ 0x28
 800b948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b94a:	2300      	movs	r3, #0
 800b94c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b952:	463a      	mov	r2, r7
 800b954:	1d39      	adds	r1, r7, #4
 800b956:	f107 0308 	add.w	r3, r7, #8
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7f5 fd12 	bl	8001384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	9202      	str	r2, [sp, #8]
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	2300      	movs	r3, #0
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	2300      	movs	r3, #0
 800b970:	460a      	mov	r2, r1
 800b972:	4921      	ldr	r1, [pc, #132]	@ (800b9f8 <vTaskStartScheduler+0xb4>)
 800b974:	4821      	ldr	r0, [pc, #132]	@ (800b9fc <vTaskStartScheduler+0xb8>)
 800b976:	f7ff fe00 	bl	800b57a <xTaskCreateStatic>
 800b97a:	4603      	mov	r3, r0
 800b97c:	4a20      	ldr	r2, [pc, #128]	@ (800ba00 <vTaskStartScheduler+0xbc>)
 800b97e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b980:	4b1f      	ldr	r3, [pc, #124]	@ (800ba00 <vTaskStartScheduler+0xbc>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b988:	2301      	movs	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	e001      	b.n	800b992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d11b      	bne.n	800b9d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	613b      	str	r3, [r7, #16]
}
 800b9aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9ac:	4b15      	ldr	r3, [pc, #84]	@ (800ba04 <vTaskStartScheduler+0xc0>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	334c      	adds	r3, #76	@ 0x4c
 800b9b2:	4a15      	ldr	r2, [pc, #84]	@ (800ba08 <vTaskStartScheduler+0xc4>)
 800b9b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ba0c <vTaskStartScheduler+0xc8>)
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9be:	4b14      	ldr	r3, [pc, #80]	@ (800ba10 <vTaskStartScheduler+0xcc>)
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9c4:	4b13      	ldr	r3, [pc, #76]	@ (800ba14 <vTaskStartScheduler+0xd0>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9ca:	f000 fbcd 	bl	800c168 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9ce:	e00f      	b.n	800b9f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d6:	d10b      	bne.n	800b9f0 <vTaskStartScheduler+0xac>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	60fb      	str	r3, [r7, #12]
}
 800b9ea:	bf00      	nop
 800b9ec:	bf00      	nop
 800b9ee:	e7fd      	b.n	800b9ec <vTaskStartScheduler+0xa8>
}
 800b9f0:	bf00      	nop
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	0800f064 	.word	0x0800f064
 800b9fc:	0800bda9 	.word	0x0800bda9
 800ba00:	20000794 	.word	0x20000794
 800ba04:	20000670 	.word	0x20000670
 800ba08:	20000160 	.word	0x20000160
 800ba0c:	20000790 	.word	0x20000790
 800ba10:	2000077c 	.word	0x2000077c
 800ba14:	20000774 	.word	0x20000774

0800ba18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba1c:	4b04      	ldr	r3, [pc, #16]	@ (800ba30 <vTaskSuspendAll+0x18>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	4a03      	ldr	r2, [pc, #12]	@ (800ba30 <vTaskSuspendAll+0x18>)
 800ba24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba26:	bf00      	nop
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bc80      	pop	{r7}
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	20000798 	.word	0x20000798

0800ba34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba42:	4b42      	ldr	r3, [pc, #264]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <xTaskResumeAll+0x2e>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	603b      	str	r3, [r7, #0]
}
 800ba5c:	bf00      	nop
 800ba5e:	bf00      	nop
 800ba60:	e7fd      	b.n	800ba5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba62:	f000 fbf3 	bl	800c24c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba66:	4b39      	ldr	r3, [pc, #228]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	4a37      	ldr	r2, [pc, #220]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba70:	4b36      	ldr	r3, [pc, #216]	@ (800bb4c <xTaskResumeAll+0x118>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d161      	bne.n	800bb3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba78:	4b35      	ldr	r3, [pc, #212]	@ (800bb50 <xTaskResumeAll+0x11c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d05d      	beq.n	800bb3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba80:	e02e      	b.n	800bae0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba82:	4b34      	ldr	r3, [pc, #208]	@ (800bb54 <xTaskResumeAll+0x120>)
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3318      	adds	r3, #24
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7ff fd4a 	bl	800b528 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fd45 	bl	800b528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa2:	2201      	movs	r2, #1
 800baa4:	409a      	lsls	r2, r3
 800baa6:	4b2c      	ldr	r3, [pc, #176]	@ (800bb58 <xTaskResumeAll+0x124>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4313      	orrs	r3, r2
 800baac:	4a2a      	ldr	r2, [pc, #168]	@ (800bb58 <xTaskResumeAll+0x124>)
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4a27      	ldr	r2, [pc, #156]	@ (800bb5c <xTaskResumeAll+0x128>)
 800babe:	441a      	add	r2, r3
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	3304      	adds	r3, #4
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7ff fcd3 	bl	800b472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad0:	4b23      	ldr	r3, [pc, #140]	@ (800bb60 <xTaskResumeAll+0x12c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d302      	bcc.n	800bae0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bada:	4b22      	ldr	r3, [pc, #136]	@ (800bb64 <xTaskResumeAll+0x130>)
 800badc:	2201      	movs	r2, #1
 800bade:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bae0:	4b1c      	ldr	r3, [pc, #112]	@ (800bb54 <xTaskResumeAll+0x120>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1cc      	bne.n	800ba82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baee:	f000 fa17 	bl	800bf20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baf2:	4b1d      	ldr	r3, [pc, #116]	@ (800bb68 <xTaskResumeAll+0x134>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d010      	beq.n	800bb20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bafe:	f000 f837 	bl	800bb70 <xTaskIncrementTick>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb08:	4b16      	ldr	r3, [pc, #88]	@ (800bb64 <xTaskResumeAll+0x130>)
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1f1      	bne.n	800bafe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bb1a:	4b13      	ldr	r3, [pc, #76]	@ (800bb68 <xTaskResumeAll+0x134>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb20:	4b10      	ldr	r3, [pc, #64]	@ (800bb64 <xTaskResumeAll+0x130>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d009      	beq.n	800bb3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb2c:	4b0f      	ldr	r3, [pc, #60]	@ (800bb6c <xTaskResumeAll+0x138>)
 800bb2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb3c:	f000 fbb6 	bl	800c2ac <vPortExitCritical>

	return xAlreadyYielded;
 800bb40:	68bb      	ldr	r3, [r7, #8]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000798 	.word	0x20000798
 800bb50:	20000770 	.word	0x20000770
 800bb54:	20000730 	.word	0x20000730
 800bb58:	20000778 	.word	0x20000778
 800bb5c:	20000674 	.word	0x20000674
 800bb60:	20000670 	.word	0x20000670
 800bb64:	20000784 	.word	0x20000784
 800bb68:	20000780 	.word	0x20000780
 800bb6c:	e000ed04 	.word	0xe000ed04

0800bb70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb7a:	4b4f      	ldr	r3, [pc, #316]	@ (800bcb8 <xTaskIncrementTick+0x148>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f040 808f 	bne.w	800bca2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb84:	4b4d      	ldr	r3, [pc, #308]	@ (800bcbc <xTaskIncrementTick+0x14c>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb8c:	4a4b      	ldr	r2, [pc, #300]	@ (800bcbc <xTaskIncrementTick+0x14c>)
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d121      	bne.n	800bbdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb98:	4b49      	ldr	r3, [pc, #292]	@ (800bcc0 <xTaskIncrementTick+0x150>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00b      	beq.n	800bbba <xTaskIncrementTick+0x4a>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	603b      	str	r3, [r7, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop
 800bbb8:	e7fd      	b.n	800bbb6 <xTaskIncrementTick+0x46>
 800bbba:	4b41      	ldr	r3, [pc, #260]	@ (800bcc0 <xTaskIncrementTick+0x150>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	4b40      	ldr	r3, [pc, #256]	@ (800bcc4 <xTaskIncrementTick+0x154>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a3e      	ldr	r2, [pc, #248]	@ (800bcc0 <xTaskIncrementTick+0x150>)
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	4a3e      	ldr	r2, [pc, #248]	@ (800bcc4 <xTaskIncrementTick+0x154>)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	4b3e      	ldr	r3, [pc, #248]	@ (800bcc8 <xTaskIncrementTick+0x158>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	4a3c      	ldr	r2, [pc, #240]	@ (800bcc8 <xTaskIncrementTick+0x158>)
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	f000 f9a2 	bl	800bf20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbdc:	4b3b      	ldr	r3, [pc, #236]	@ (800bccc <xTaskIncrementTick+0x15c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d348      	bcc.n	800bc78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbe6:	4b36      	ldr	r3, [pc, #216]	@ (800bcc0 <xTaskIncrementTick+0x150>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d104      	bne.n	800bbfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf0:	4b36      	ldr	r3, [pc, #216]	@ (800bccc <xTaskIncrementTick+0x15c>)
 800bbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf6:	601a      	str	r2, [r3, #0]
					break;
 800bbf8:	e03e      	b.n	800bc78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbfa:	4b31      	ldr	r3, [pc, #196]	@ (800bcc0 <xTaskIncrementTick+0x150>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d203      	bcs.n	800bc1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc12:	4a2e      	ldr	r2, [pc, #184]	@ (800bccc <xTaskIncrementTick+0x15c>)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc18:	e02e      	b.n	800bc78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fc82 	bl	800b528 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d004      	beq.n	800bc36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	3318      	adds	r3, #24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff fc79 	bl	800b528 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	409a      	lsls	r2, r3
 800bc3e:	4b24      	ldr	r3, [pc, #144]	@ (800bcd0 <xTaskIncrementTick+0x160>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	4a22      	ldr	r2, [pc, #136]	@ (800bcd0 <xTaskIncrementTick+0x160>)
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4a1f      	ldr	r2, [pc, #124]	@ (800bcd4 <xTaskIncrementTick+0x164>)
 800bc56:	441a      	add	r2, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7ff fc07 	bl	800b472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc68:	4b1b      	ldr	r3, [pc, #108]	@ (800bcd8 <xTaskIncrementTick+0x168>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d3b9      	bcc.n	800bbe6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bc72:	2301      	movs	r3, #1
 800bc74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc76:	e7b6      	b.n	800bbe6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc78:	4b17      	ldr	r3, [pc, #92]	@ (800bcd8 <xTaskIncrementTick+0x168>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7e:	4915      	ldr	r1, [pc, #84]	@ (800bcd4 <xTaskIncrementTick+0x164>)
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	440b      	add	r3, r1
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d901      	bls.n	800bc94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc90:	2301      	movs	r3, #1
 800bc92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc94:	4b11      	ldr	r3, [pc, #68]	@ (800bcdc <xTaskIncrementTick+0x16c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	e004      	b.n	800bcac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bca2:	4b0f      	ldr	r3, [pc, #60]	@ (800bce0 <xTaskIncrementTick+0x170>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	4a0d      	ldr	r2, [pc, #52]	@ (800bce0 <xTaskIncrementTick+0x170>)
 800bcaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcac:	697b      	ldr	r3, [r7, #20]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20000798 	.word	0x20000798
 800bcbc:	20000774 	.word	0x20000774
 800bcc0:	20000728 	.word	0x20000728
 800bcc4:	2000072c 	.word	0x2000072c
 800bcc8:	20000788 	.word	0x20000788
 800bccc:	20000790 	.word	0x20000790
 800bcd0:	20000778 	.word	0x20000778
 800bcd4:	20000674 	.word	0x20000674
 800bcd8:	20000670 	.word	0x20000670
 800bcdc:	20000784 	.word	0x20000784
 800bce0:	20000780 	.word	0x20000780

0800bce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b087      	sub	sp, #28
 800bce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcea:	4b29      	ldr	r3, [pc, #164]	@ (800bd90 <vTaskSwitchContext+0xac>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcf2:	4b28      	ldr	r3, [pc, #160]	@ (800bd94 <vTaskSwitchContext+0xb0>)
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcf8:	e045      	b.n	800bd86 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800bcfa:	4b26      	ldr	r3, [pc, #152]	@ (800bd94 <vTaskSwitchContext+0xb0>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd00:	4b25      	ldr	r3, [pc, #148]	@ (800bd98 <vTaskSwitchContext+0xb4>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	fab3 f383 	clz	r3, r3
 800bd0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	f1c3 031f 	rsb	r3, r3, #31
 800bd14:	617b      	str	r3, [r7, #20]
 800bd16:	4921      	ldr	r1, [pc, #132]	@ (800bd9c <vTaskSwitchContext+0xb8>)
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	440b      	add	r3, r1
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10b      	bne.n	800bd42 <vTaskSwitchContext+0x5e>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	607b      	str	r3, [r7, #4]
}
 800bd3c:	bf00      	nop
 800bd3e:	bf00      	nop
 800bd40:	e7fd      	b.n	800bd3e <vTaskSwitchContext+0x5a>
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4a13      	ldr	r2, [pc, #76]	@ (800bd9c <vTaskSwitchContext+0xb8>)
 800bd4e:	4413      	add	r3, r2
 800bd50:	613b      	str	r3, [r7, #16]
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	605a      	str	r2, [r3, #4]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	3308      	adds	r3, #8
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d104      	bne.n	800bd72 <vTaskSwitchContext+0x8e>
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	685a      	ldr	r2, [r3, #4]
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	605a      	str	r2, [r3, #4]
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	4a09      	ldr	r2, [pc, #36]	@ (800bda0 <vTaskSwitchContext+0xbc>)
 800bd7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd7c:	4b08      	ldr	r3, [pc, #32]	@ (800bda0 <vTaskSwitchContext+0xbc>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	334c      	adds	r3, #76	@ 0x4c
 800bd82:	4a08      	ldr	r2, [pc, #32]	@ (800bda4 <vTaskSwitchContext+0xc0>)
 800bd84:	6013      	str	r3, [r2, #0]
}
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bc80      	pop	{r7}
 800bd8e:	4770      	bx	lr
 800bd90:	20000798 	.word	0x20000798
 800bd94:	20000784 	.word	0x20000784
 800bd98:	20000778 	.word	0x20000778
 800bd9c:	20000674 	.word	0x20000674
 800bda0:	20000670 	.word	0x20000670
 800bda4:	20000160 	.word	0x20000160

0800bda8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdb0:	f000 f852 	bl	800be58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdb4:	4b06      	ldr	r3, [pc, #24]	@ (800bdd0 <prvIdleTask+0x28>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d9f9      	bls.n	800bdb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdbc:	4b05      	ldr	r3, [pc, #20]	@ (800bdd4 <prvIdleTask+0x2c>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdcc:	e7f0      	b.n	800bdb0 <prvIdleTask+0x8>
 800bdce:	bf00      	nop
 800bdd0:	20000674 	.word	0x20000674
 800bdd4:	e000ed04 	.word	0xe000ed04

0800bdd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdde:	2300      	movs	r3, #0
 800bde0:	607b      	str	r3, [r7, #4]
 800bde2:	e00c      	b.n	800bdfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	4613      	mov	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4a12      	ldr	r2, [pc, #72]	@ (800be38 <prvInitialiseTaskLists+0x60>)
 800bdf0:	4413      	add	r3, r2
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7ff fb12 	bl	800b41c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	607b      	str	r3, [r7, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b06      	cmp	r3, #6
 800be02:	d9ef      	bls.n	800bde4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be04:	480d      	ldr	r0, [pc, #52]	@ (800be3c <prvInitialiseTaskLists+0x64>)
 800be06:	f7ff fb09 	bl	800b41c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be0a:	480d      	ldr	r0, [pc, #52]	@ (800be40 <prvInitialiseTaskLists+0x68>)
 800be0c:	f7ff fb06 	bl	800b41c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be10:	480c      	ldr	r0, [pc, #48]	@ (800be44 <prvInitialiseTaskLists+0x6c>)
 800be12:	f7ff fb03 	bl	800b41c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be16:	480c      	ldr	r0, [pc, #48]	@ (800be48 <prvInitialiseTaskLists+0x70>)
 800be18:	f7ff fb00 	bl	800b41c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be1c:	480b      	ldr	r0, [pc, #44]	@ (800be4c <prvInitialiseTaskLists+0x74>)
 800be1e:	f7ff fafd 	bl	800b41c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be22:	4b0b      	ldr	r3, [pc, #44]	@ (800be50 <prvInitialiseTaskLists+0x78>)
 800be24:	4a05      	ldr	r2, [pc, #20]	@ (800be3c <prvInitialiseTaskLists+0x64>)
 800be26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be28:	4b0a      	ldr	r3, [pc, #40]	@ (800be54 <prvInitialiseTaskLists+0x7c>)
 800be2a:	4a05      	ldr	r2, [pc, #20]	@ (800be40 <prvInitialiseTaskLists+0x68>)
 800be2c:	601a      	str	r2, [r3, #0]
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20000674 	.word	0x20000674
 800be3c:	20000700 	.word	0x20000700
 800be40:	20000714 	.word	0x20000714
 800be44:	20000730 	.word	0x20000730
 800be48:	20000744 	.word	0x20000744
 800be4c:	2000075c 	.word	0x2000075c
 800be50:	20000728 	.word	0x20000728
 800be54:	2000072c 	.word	0x2000072c

0800be58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be5e:	e019      	b.n	800be94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be60:	f000 f9f4 	bl	800c24c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be64:	4b10      	ldr	r3, [pc, #64]	@ (800bea8 <prvCheckTasksWaitingTermination+0x50>)
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	3304      	adds	r3, #4
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff fb59 	bl	800b528 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be76:	4b0d      	ldr	r3, [pc, #52]	@ (800beac <prvCheckTasksWaitingTermination+0x54>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	4a0b      	ldr	r2, [pc, #44]	@ (800beac <prvCheckTasksWaitingTermination+0x54>)
 800be7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be80:	4b0b      	ldr	r3, [pc, #44]	@ (800beb0 <prvCheckTasksWaitingTermination+0x58>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3b01      	subs	r3, #1
 800be86:	4a0a      	ldr	r2, [pc, #40]	@ (800beb0 <prvCheckTasksWaitingTermination+0x58>)
 800be88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be8a:	f000 fa0f 	bl	800c2ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f810 	bl	800beb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be94:	4b06      	ldr	r3, [pc, #24]	@ (800beb0 <prvCheckTasksWaitingTermination+0x58>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e1      	bne.n	800be60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20000744 	.word	0x20000744
 800beac:	20000770 	.word	0x20000770
 800beb0:	20000758 	.word	0x20000758

0800beb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	334c      	adds	r3, #76	@ 0x4c
 800bec0:	4618      	mov	r0, r3
 800bec2:	f002 ff7b 	bl	800edbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800becc:	2b00      	cmp	r3, #0
 800bece:	d108      	bne.n	800bee2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fb49 	bl	800c56c <vPortFree>
				vPortFree( pxTCB );
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fb46 	bl	800c56c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bee0:	e019      	b.n	800bf16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d103      	bne.n	800bef4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fb3d 	bl	800c56c <vPortFree>
	}
 800bef2:	e010      	b.n	800bf16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800befa:	2b02      	cmp	r3, #2
 800befc:	d00b      	beq.n	800bf16 <prvDeleteTCB+0x62>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	60fb      	str	r3, [r7, #12]
}
 800bf10:	bf00      	nop
 800bf12:	bf00      	nop
 800bf14:	e7fd      	b.n	800bf12 <prvDeleteTCB+0x5e>
	}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf26:	4b0c      	ldr	r3, [pc, #48]	@ (800bf58 <prvResetNextTaskUnblockTime+0x38>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d104      	bne.n	800bf3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf30:	4b0a      	ldr	r3, [pc, #40]	@ (800bf5c <prvResetNextTaskUnblockTime+0x3c>)
 800bf32:	f04f 32ff 	mov.w	r2, #4294967295
 800bf36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf38:	e008      	b.n	800bf4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf3a:	4b07      	ldr	r3, [pc, #28]	@ (800bf58 <prvResetNextTaskUnblockTime+0x38>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	4a04      	ldr	r2, [pc, #16]	@ (800bf5c <prvResetNextTaskUnblockTime+0x3c>)
 800bf4a:	6013      	str	r3, [r2, #0]
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bc80      	pop	{r7}
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	20000728 	.word	0x20000728
 800bf5c:	20000790 	.word	0x20000790

0800bf60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf66:	4b0b      	ldr	r3, [pc, #44]	@ (800bf94 <xTaskGetSchedulerState+0x34>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	e008      	b.n	800bf86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf74:	4b08      	ldr	r3, [pc, #32]	@ (800bf98 <xTaskGetSchedulerState+0x38>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	607b      	str	r3, [r7, #4]
 800bf80:	e001      	b.n	800bf86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf82:	2300      	movs	r3, #0
 800bf84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf86:	687b      	ldr	r3, [r7, #4]
	}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bc80      	pop	{r7}
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	2000077c 	.word	0x2000077c
 800bf98:	20000798 	.word	0x20000798

0800bf9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfa6:	4b29      	ldr	r3, [pc, #164]	@ (800c04c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfac:	4b28      	ldr	r3, [pc, #160]	@ (800c050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fab8 	bl	800b528 <uxListRemove>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10b      	bne.n	800bfd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bfbe:	4b24      	ldr	r3, [pc, #144]	@ (800c050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfca:	43da      	mvns	r2, r3
 800bfcc:	4b21      	ldr	r3, [pc, #132]	@ (800c054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	4a20      	ldr	r2, [pc, #128]	@ (800c054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfdc:	d10a      	bne.n	800bff4 <prvAddCurrentTaskToDelayedList+0x58>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d007      	beq.n	800bff4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfe4:	4b1a      	ldr	r3, [pc, #104]	@ (800c050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	4619      	mov	r1, r3
 800bfec:	481a      	ldr	r0, [pc, #104]	@ (800c058 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bfee:	f7ff fa40 	bl	800b472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bff2:	e026      	b.n	800c042 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4413      	add	r3, r2
 800bffa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bffc:	4b14      	ldr	r3, [pc, #80]	@ (800c050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d209      	bcs.n	800c020 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c00c:	4b13      	ldr	r3, [pc, #76]	@ (800c05c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	4b0f      	ldr	r3, [pc, #60]	@ (800c050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3304      	adds	r3, #4
 800c016:	4619      	mov	r1, r3
 800c018:	4610      	mov	r0, r2
 800c01a:	f7ff fa4d 	bl	800b4b8 <vListInsert>
}
 800c01e:	e010      	b.n	800c042 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c020:	4b0f      	ldr	r3, [pc, #60]	@ (800c060 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	4b0a      	ldr	r3, [pc, #40]	@ (800c050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3304      	adds	r3, #4
 800c02a:	4619      	mov	r1, r3
 800c02c:	4610      	mov	r0, r2
 800c02e:	f7ff fa43 	bl	800b4b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c032:	4b0c      	ldr	r3, [pc, #48]	@ (800c064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d202      	bcs.n	800c042 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c03c:	4a09      	ldr	r2, [pc, #36]	@ (800c064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	6013      	str	r3, [r2, #0]
}
 800c042:	bf00      	nop
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20000774 	.word	0x20000774
 800c050:	20000670 	.word	0x20000670
 800c054:	20000778 	.word	0x20000778
 800c058:	2000075c 	.word	0x2000075c
 800c05c:	2000072c 	.word	0x2000072c
 800c060:	20000728 	.word	0x20000728
 800c064:	20000790 	.word	0x20000790

0800c068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3b04      	subs	r3, #4
 800c078:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3b04      	subs	r3, #4
 800c086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f023 0201 	bic.w	r2, r3, #1
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3b04      	subs	r3, #4
 800c096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c098:	4a08      	ldr	r2, [pc, #32]	@ (800c0bc <pxPortInitialiseStack+0x54>)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3b14      	subs	r3, #20
 800c0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3b20      	subs	r3, #32
 800c0ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bc80      	pop	{r7}
 800c0ba:	4770      	bx	lr
 800c0bc:	0800c0c1 	.word	0x0800c0c1

0800c0c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0ca:	4b12      	ldr	r3, [pc, #72]	@ (800c114 <prvTaskExitError+0x54>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d00b      	beq.n	800c0ec <prvTaskExitError+0x2c>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	60fb      	str	r3, [r7, #12]
}
 800c0e6:	bf00      	nop
 800c0e8:	bf00      	nop
 800c0ea:	e7fd      	b.n	800c0e8 <prvTaskExitError+0x28>
	__asm volatile
 800c0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	60bb      	str	r3, [r7, #8]
}
 800c0fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c100:	bf00      	nop
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0fc      	beq.n	800c102 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c108:	bf00      	nop
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	bc80      	pop	{r7}
 800c112:	4770      	bx	lr
 800c114:	200000e0 	.word	0x200000e0
	...

0800c120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c120:	4b07      	ldr	r3, [pc, #28]	@ (800c140 <pxCurrentTCBConst2>)
 800c122:	6819      	ldr	r1, [r3, #0]
 800c124:	6808      	ldr	r0, [r1, #0]
 800c126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c12a:	f380 8809 	msr	PSP, r0
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f04f 0000 	mov.w	r0, #0
 800c136:	f380 8811 	msr	BASEPRI, r0
 800c13a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c13e:	4770      	bx	lr

0800c140 <pxCurrentTCBConst2>:
 800c140:	20000670 	.word	0x20000670
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop

0800c148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c148:	4806      	ldr	r0, [pc, #24]	@ (800c164 <prvPortStartFirstTask+0x1c>)
 800c14a:	6800      	ldr	r0, [r0, #0]
 800c14c:	6800      	ldr	r0, [r0, #0]
 800c14e:	f380 8808 	msr	MSP, r0
 800c152:	b662      	cpsie	i
 800c154:	b661      	cpsie	f
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	df00      	svc	0
 800c160:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c162:	bf00      	nop
 800c164:	e000ed08 	.word	0xe000ed08

0800c168 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c16e:	4b32      	ldr	r3, [pc, #200]	@ (800c238 <xPortStartScheduler+0xd0>)
 800c170:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	22ff      	movs	r2, #255	@ 0xff
 800c17e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	b2db      	uxtb	r3, r3
 800c186:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c190:	b2da      	uxtb	r2, r3
 800c192:	4b2a      	ldr	r3, [pc, #168]	@ (800c23c <xPortStartScheduler+0xd4>)
 800c194:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c196:	4b2a      	ldr	r3, [pc, #168]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c198:	2207      	movs	r2, #7
 800c19a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c19c:	e009      	b.n	800c1b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c19e:	4b28      	ldr	r3, [pc, #160]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	4a26      	ldr	r2, [pc, #152]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c1a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1a8:	78fb      	ldrb	r3, [r7, #3]
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1ba:	2b80      	cmp	r3, #128	@ 0x80
 800c1bc:	d0ef      	beq.n	800c19e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1be:	4b20      	ldr	r3, [pc, #128]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f1c3 0307 	rsb	r3, r3, #7
 800c1c6:	2b04      	cmp	r3, #4
 800c1c8:	d00b      	beq.n	800c1e2 <xPortStartScheduler+0x7a>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	60bb      	str	r3, [r7, #8]
}
 800c1dc:	bf00      	nop
 800c1de:	bf00      	nop
 800c1e0:	e7fd      	b.n	800c1de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1e2:	4b17      	ldr	r3, [pc, #92]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	021b      	lsls	r3, r3, #8
 800c1e8:	4a15      	ldr	r2, [pc, #84]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c1ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1ec:	4b14      	ldr	r3, [pc, #80]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c1f4:	4a12      	ldr	r2, [pc, #72]	@ (800c240 <xPortStartScheduler+0xd8>)
 800c1f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c200:	4b10      	ldr	r3, [pc, #64]	@ (800c244 <xPortStartScheduler+0xdc>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a0f      	ldr	r2, [pc, #60]	@ (800c244 <xPortStartScheduler+0xdc>)
 800c206:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c20a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c20c:	4b0d      	ldr	r3, [pc, #52]	@ (800c244 <xPortStartScheduler+0xdc>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a0c      	ldr	r2, [pc, #48]	@ (800c244 <xPortStartScheduler+0xdc>)
 800c212:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c218:	f000 f8b8 	bl	800c38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c21c:	4b0a      	ldr	r3, [pc, #40]	@ (800c248 <xPortStartScheduler+0xe0>)
 800c21e:	2200      	movs	r2, #0
 800c220:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c222:	f7ff ff91 	bl	800c148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c226:	f7ff fd5d 	bl	800bce4 <vTaskSwitchContext>
	prvTaskExitError();
 800c22a:	f7ff ff49 	bl	800c0c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	e000e400 	.word	0xe000e400
 800c23c:	2000079c 	.word	0x2000079c
 800c240:	200007a0 	.word	0x200007a0
 800c244:	e000ed20 	.word	0xe000ed20
 800c248:	200000e0 	.word	0x200000e0

0800c24c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	607b      	str	r3, [r7, #4]
}
 800c264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c266:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a4 <vPortEnterCritical+0x58>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3301      	adds	r3, #1
 800c26c:	4a0d      	ldr	r2, [pc, #52]	@ (800c2a4 <vPortEnterCritical+0x58>)
 800c26e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c270:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a4 <vPortEnterCritical+0x58>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d110      	bne.n	800c29a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c278:	4b0b      	ldr	r3, [pc, #44]	@ (800c2a8 <vPortEnterCritical+0x5c>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00b      	beq.n	800c29a <vPortEnterCritical+0x4e>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	603b      	str	r3, [r7, #0]
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	e7fd      	b.n	800c296 <vPortEnterCritical+0x4a>
	}
}
 800c29a:	bf00      	nop
 800c29c:	370c      	adds	r7, #12
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bc80      	pop	{r7}
 800c2a2:	4770      	bx	lr
 800c2a4:	200000e0 	.word	0x200000e0
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2b2:	4b12      	ldr	r3, [pc, #72]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <vPortExitCritical+0x26>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	607b      	str	r3, [r7, #4]
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	e7fd      	b.n	800c2ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	4a08      	ldr	r2, [pc, #32]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2dc:	4b07      	ldr	r3, [pc, #28]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d105      	bne.n	800c2f0 <vPortExitCritical+0x44>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bc80      	pop	{r7}
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	200000e0 	.word	0x200000e0

0800c300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c300:	f3ef 8009 	mrs	r0, PSP
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	4b0d      	ldr	r3, [pc, #52]	@ (800c340 <pxCurrentTCBConst>)
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c310:	6010      	str	r0, [r2, #0]
 800c312:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c316:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c31a:	f380 8811 	msr	BASEPRI, r0
 800c31e:	f7ff fce1 	bl	800bce4 <vTaskSwitchContext>
 800c322:	f04f 0000 	mov.w	r0, #0
 800c326:	f380 8811 	msr	BASEPRI, r0
 800c32a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c32e:	6819      	ldr	r1, [r3, #0]
 800c330:	6808      	ldr	r0, [r1, #0]
 800c332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c336:	f380 8809 	msr	PSP, r0
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	4770      	bx	lr

0800c340 <pxCurrentTCBConst>:
 800c340:	20000670 	.word	0x20000670
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop

0800c348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	607b      	str	r3, [r7, #4]
}
 800c360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c362:	f7ff fc05 	bl	800bb70 <xTaskIncrementTick>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d003      	beq.n	800c374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c36c:	4b06      	ldr	r3, [pc, #24]	@ (800c388 <xPortSysTickHandler+0x40>)
 800c36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	2300      	movs	r3, #0
 800c376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	f383 8811 	msr	BASEPRI, r3
}
 800c37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	e000ed04 	.word	0xe000ed04

0800c38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c38c:	b480      	push	{r7}
 800c38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c390:	4b0a      	ldr	r3, [pc, #40]	@ (800c3bc <vPortSetupTimerInterrupt+0x30>)
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c396:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c0 <vPortSetupTimerInterrupt+0x34>)
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c39c:	4b09      	ldr	r3, [pc, #36]	@ (800c3c4 <vPortSetupTimerInterrupt+0x38>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a09      	ldr	r2, [pc, #36]	@ (800c3c8 <vPortSetupTimerInterrupt+0x3c>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	099b      	lsrs	r3, r3, #6
 800c3a8:	4a08      	ldr	r2, [pc, #32]	@ (800c3cc <vPortSetupTimerInterrupt+0x40>)
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3ae:	4b03      	ldr	r3, [pc, #12]	@ (800c3bc <vPortSetupTimerInterrupt+0x30>)
 800c3b0:	2207      	movs	r2, #7
 800c3b2:	601a      	str	r2, [r3, #0]
}
 800c3b4:	bf00      	nop
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bc80      	pop	{r7}
 800c3ba:	4770      	bx	lr
 800c3bc:	e000e010 	.word	0xe000e010
 800c3c0:	e000e018 	.word	0xe000e018
 800c3c4:	20000000 	.word	0x20000000
 800c3c8:	10624dd3 	.word	0x10624dd3
 800c3cc:	e000e014 	.word	0xe000e014

0800c3d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08a      	sub	sp, #40	@ 0x28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3dc:	f7ff fb1c 	bl	800ba18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3e0:	4b5c      	ldr	r3, [pc, #368]	@ (800c554 <pvPortMalloc+0x184>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3e8:	f000 f924 	bl	800c634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3ec:	4b5a      	ldr	r3, [pc, #360]	@ (800c558 <pvPortMalloc+0x188>)
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f040 8095 	bne.w	800c524 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01e      	beq.n	800c43e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c400:	2208      	movs	r2, #8
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4413      	add	r3, r2
 800c406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f003 0307 	and.w	r3, r3, #7
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d015      	beq.n	800c43e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f023 0307 	bic.w	r3, r3, #7
 800c418:	3308      	adds	r3, #8
 800c41a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f003 0307 	and.w	r3, r3, #7
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00b      	beq.n	800c43e <pvPortMalloc+0x6e>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	617b      	str	r3, [r7, #20]
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	e7fd      	b.n	800c43a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d06f      	beq.n	800c524 <pvPortMalloc+0x154>
 800c444:	4b45      	ldr	r3, [pc, #276]	@ (800c55c <pvPortMalloc+0x18c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d86a      	bhi.n	800c524 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c44e:	4b44      	ldr	r3, [pc, #272]	@ (800c560 <pvPortMalloc+0x190>)
 800c450:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c452:	4b43      	ldr	r3, [pc, #268]	@ (800c560 <pvPortMalloc+0x190>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c458:	e004      	b.n	800c464 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d903      	bls.n	800c476 <pvPortMalloc+0xa6>
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1f1      	bne.n	800c45a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c476:	4b37      	ldr	r3, [pc, #220]	@ (800c554 <pvPortMalloc+0x184>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d051      	beq.n	800c524 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2208      	movs	r2, #8
 800c486:	4413      	add	r3, r2
 800c488:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	6a3b      	ldr	r3, [r7, #32]
 800c490:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c494:	685a      	ldr	r2, [r3, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	1ad2      	subs	r2, r2, r3
 800c49a:	2308      	movs	r3, #8
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d920      	bls.n	800c4e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	f003 0307 	and.w	r3, r3, #7
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <pvPortMalloc+0xfc>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	613b      	str	r3, [r7, #16]
}
 800c4c6:	bf00      	nop
 800c4c8:	bf00      	nop
 800c4ca:	e7fd      	b.n	800c4c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	1ad2      	subs	r2, r2, r3
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4de:	69b8      	ldr	r0, [r7, #24]
 800c4e0:	f000 f90a 	bl	800c6f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4e4:	4b1d      	ldr	r3, [pc, #116]	@ (800c55c <pvPortMalloc+0x18c>)
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	4a1b      	ldr	r2, [pc, #108]	@ (800c55c <pvPortMalloc+0x18c>)
 800c4f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4f2:	4b1a      	ldr	r3, [pc, #104]	@ (800c55c <pvPortMalloc+0x18c>)
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c564 <pvPortMalloc+0x194>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d203      	bcs.n	800c506 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4fe:	4b17      	ldr	r3, [pc, #92]	@ (800c55c <pvPortMalloc+0x18c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a18      	ldr	r2, [pc, #96]	@ (800c564 <pvPortMalloc+0x194>)
 800c504:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	4b13      	ldr	r3, [pc, #76]	@ (800c558 <pvPortMalloc+0x188>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	431a      	orrs	r2, r3
 800c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c512:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c51a:	4b13      	ldr	r3, [pc, #76]	@ (800c568 <pvPortMalloc+0x198>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	3301      	adds	r3, #1
 800c520:	4a11      	ldr	r2, [pc, #68]	@ (800c568 <pvPortMalloc+0x198>)
 800c522:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c524:	f7ff fa86 	bl	800ba34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	f003 0307 	and.w	r3, r3, #7
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00b      	beq.n	800c54a <pvPortMalloc+0x17a>
	__asm volatile
 800c532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	60fb      	str	r3, [r7, #12]
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop
 800c548:	e7fd      	b.n	800c546 <pvPortMalloc+0x176>
	return pvReturn;
 800c54a:	69fb      	ldr	r3, [r7, #28]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3728      	adds	r7, #40	@ 0x28
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	200023ac 	.word	0x200023ac
 800c558:	200023c0 	.word	0x200023c0
 800c55c:	200023b0 	.word	0x200023b0
 800c560:	200023a4 	.word	0x200023a4
 800c564:	200023b4 	.word	0x200023b4
 800c568:	200023b8 	.word	0x200023b8

0800c56c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d04f      	beq.n	800c61e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c57e:	2308      	movs	r3, #8
 800c580:	425b      	negs	r3, r3
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	4413      	add	r3, r2
 800c586:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	4b25      	ldr	r3, [pc, #148]	@ (800c628 <vPortFree+0xbc>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4013      	ands	r3, r2
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10b      	bne.n	800c5b2 <vPortFree+0x46>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	60fb      	str	r3, [r7, #12]
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	e7fd      	b.n	800c5ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00b      	beq.n	800c5d2 <vPortFree+0x66>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	60bb      	str	r3, [r7, #8]
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	e7fd      	b.n	800c5ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	4b14      	ldr	r3, [pc, #80]	@ (800c628 <vPortFree+0xbc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4013      	ands	r3, r2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d01e      	beq.n	800c61e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d11a      	bne.n	800c61e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c628 <vPortFree+0xbc>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	43db      	mvns	r3, r3
 800c5f2:	401a      	ands	r2, r3
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5f8:	f7ff fa0e 	bl	800ba18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	4b0a      	ldr	r3, [pc, #40]	@ (800c62c <vPortFree+0xc0>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4413      	add	r3, r2
 800c606:	4a09      	ldr	r2, [pc, #36]	@ (800c62c <vPortFree+0xc0>)
 800c608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c60a:	6938      	ldr	r0, [r7, #16]
 800c60c:	f000 f874 	bl	800c6f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c610:	4b07      	ldr	r3, [pc, #28]	@ (800c630 <vPortFree+0xc4>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	4a06      	ldr	r2, [pc, #24]	@ (800c630 <vPortFree+0xc4>)
 800c618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c61a:	f7ff fa0b 	bl	800ba34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c61e:	bf00      	nop
 800c620:	3718      	adds	r7, #24
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	200023c0 	.word	0x200023c0
 800c62c:	200023b0 	.word	0x200023b0
 800c630:	200023bc 	.word	0x200023bc

0800c634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c63a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c63e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c640:	4b27      	ldr	r3, [pc, #156]	@ (800c6e0 <prvHeapInit+0xac>)
 800c642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f003 0307 	and.w	r3, r3, #7
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00c      	beq.n	800c668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3307      	adds	r3, #7
 800c652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f023 0307 	bic.w	r3, r3, #7
 800c65a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	4a1f      	ldr	r2, [pc, #124]	@ (800c6e0 <prvHeapInit+0xac>)
 800c664:	4413      	add	r3, r2
 800c666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c66c:	4a1d      	ldr	r2, [pc, #116]	@ (800c6e4 <prvHeapInit+0xb0>)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c672:	4b1c      	ldr	r3, [pc, #112]	@ (800c6e4 <prvHeapInit+0xb0>)
 800c674:	2200      	movs	r2, #0
 800c676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	4413      	add	r3, r2
 800c67e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c680:	2208      	movs	r2, #8
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	1a9b      	subs	r3, r3, r2
 800c686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f023 0307 	bic.w	r3, r3, #7
 800c68e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4a15      	ldr	r2, [pc, #84]	@ (800c6e8 <prvHeapInit+0xb4>)
 800c694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c696:	4b14      	ldr	r3, [pc, #80]	@ (800c6e8 <prvHeapInit+0xb4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2200      	movs	r2, #0
 800c69c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c69e:	4b12      	ldr	r3, [pc, #72]	@ (800c6e8 <prvHeapInit+0xb4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e8 <prvHeapInit+0xb4>)
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6ec <prvHeapInit+0xb8>)
 800c6c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	4a09      	ldr	r2, [pc, #36]	@ (800c6f0 <prvHeapInit+0xbc>)
 800c6ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6cc:	4b09      	ldr	r3, [pc, #36]	@ (800c6f4 <prvHeapInit+0xc0>)
 800c6ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c6d2:	601a      	str	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bc80      	pop	{r7}
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	200007a4 	.word	0x200007a4
 800c6e4:	200023a4 	.word	0x200023a4
 800c6e8:	200023ac 	.word	0x200023ac
 800c6ec:	200023b4 	.word	0x200023b4
 800c6f0:	200023b0 	.word	0x200023b0
 800c6f4:	200023c0 	.word	0x200023c0

0800c6f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c700:	4b27      	ldr	r3, [pc, #156]	@ (800c7a0 <prvInsertBlockIntoFreeList+0xa8>)
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	e002      	b.n	800c70c <prvInsertBlockIntoFreeList+0x14>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	429a      	cmp	r2, r3
 800c714:	d8f7      	bhi.n	800c706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	4413      	add	r3, r2
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	429a      	cmp	r2, r3
 800c726:	d108      	bne.n	800c73a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	441a      	add	r2, r3
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	441a      	add	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d118      	bne.n	800c780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	4b14      	ldr	r3, [pc, #80]	@ (800c7a4 <prvInsertBlockIntoFreeList+0xac>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	429a      	cmp	r2, r3
 800c758:	d00d      	beq.n	800c776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	441a      	add	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	e008      	b.n	800c788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c776:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a4 <prvInsertBlockIntoFreeList+0xac>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	e003      	b.n	800c788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d002      	beq.n	800c796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c796:	bf00      	nop
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bc80      	pop	{r7}
 800c79e:	4770      	bx	lr
 800c7a0:	200023a4 	.word	0x200023a4
 800c7a4:	200023ac 	.word	0x200023ac

0800c7a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4912      	ldr	r1, [pc, #72]	@ (800c7f8 <MX_USB_DEVICE_Init+0x50>)
 800c7b0:	4812      	ldr	r0, [pc, #72]	@ (800c7fc <MX_USB_DEVICE_Init+0x54>)
 800c7b2:	f7fd fd1f 	bl	800a1f4 <USBD_Init>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c7bc:	f7f4 fff2 	bl	80017a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c7c0:	490f      	ldr	r1, [pc, #60]	@ (800c800 <MX_USB_DEVICE_Init+0x58>)
 800c7c2:	480e      	ldr	r0, [pc, #56]	@ (800c7fc <MX_USB_DEVICE_Init+0x54>)
 800c7c4:	f7fd fd41 	bl	800a24a <USBD_RegisterClass>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d001      	beq.n	800c7d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c7ce:	f7f4 ffe9 	bl	80017a4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c7d2:	490c      	ldr	r1, [pc, #48]	@ (800c804 <MX_USB_DEVICE_Init+0x5c>)
 800c7d4:	4809      	ldr	r0, [pc, #36]	@ (800c7fc <MX_USB_DEVICE_Init+0x54>)
 800c7d6:	f7fd fcf7 	bl	800a1c8 <USBD_CUSTOM_HID_RegisterInterface>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c7e0:	f7f4 ffe0 	bl	80017a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c7e4:	4805      	ldr	r0, [pc, #20]	@ (800c7fc <MX_USB_DEVICE_Init+0x54>)
 800c7e6:	f7fd fd49 	bl	800a27c <USBD_Start>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c7f0:	f7f4 ffd8 	bl	80017a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c7f4:	bf00      	nop
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20000110 	.word	0x20000110
 800c7fc:	200023c4 	.word	0x200023c4
 800c800:	2000000c 	.word	0x2000000c
 800c804:	20000100 	.word	0x20000100

0800c808 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c80c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c80e:	4618      	mov	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	bc80      	pop	{r7}
 800c814:	4770      	bx	lr

0800c816 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c816:	b480      	push	{r7}
 800c818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c81a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	46bd      	mov	sp, r7
 800c820:	bc80      	pop	{r7}
 800c822:	4770      	bx	lr

0800c824 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	4603      	mov	r3, r0
 800c82c:	460a      	mov	r2, r1
 800c82e:	71fb      	strb	r3, [r7, #7]
 800c830:	4613      	mov	r3, r2
 800c832:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800c834:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c836:	4618      	mov	r0, r3
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bc80      	pop	{r7}
 800c83e:	4770      	bx	lr

0800c840 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	4603      	mov	r3, r0
 800c848:	6039      	str	r1, [r7, #0]
 800c84a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2212      	movs	r2, #18
 800c850:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c852:	4b03      	ldr	r3, [pc, #12]	@ (800c860 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c854:	4618      	mov	r0, r3
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	bc80      	pop	{r7}
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	2000012c 	.word	0x2000012c

0800c864 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	6039      	str	r1, [r7, #0]
 800c86e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2204      	movs	r2, #4
 800c874:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c876:	4b03      	ldr	r3, [pc, #12]	@ (800c884 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c878:	4618      	mov	r0, r3
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bc80      	pop	{r7}
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	20000140 	.word	0x20000140

0800c888 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	6039      	str	r1, [r7, #0]
 800c892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c894:	79fb      	ldrb	r3, [r7, #7]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d105      	bne.n	800c8a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	4907      	ldr	r1, [pc, #28]	@ (800c8bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c89e:	4808      	ldr	r0, [pc, #32]	@ (800c8c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c8a0:	f7fe fc61 	bl	800b166 <USBD_GetString>
 800c8a4:	e004      	b.n	800c8b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	4904      	ldr	r1, [pc, #16]	@ (800c8bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c8aa:	4805      	ldr	r0, [pc, #20]	@ (800c8c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c8ac:	f7fe fc5b 	bl	800b166 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8b0:	4b02      	ldr	r3, [pc, #8]	@ (800c8bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20002688 	.word	0x20002688
 800c8c0:	0800f06c 	.word	0x0800f06c

0800c8c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	6039      	str	r1, [r7, #0]
 800c8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	4904      	ldr	r1, [pc, #16]	@ (800c8e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c8d4:	4804      	ldr	r0, [pc, #16]	@ (800c8e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c8d6:	f7fe fc46 	bl	800b166 <USBD_GetString>
  return USBD_StrDesc;
 800c8da:	4b02      	ldr	r3, [pc, #8]	@ (800c8e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	20002688 	.word	0x20002688
 800c8e8:	0800f07c 	.word	0x0800f07c

0800c8ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	6039      	str	r1, [r7, #0]
 800c8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	221a      	movs	r2, #26
 800c8fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8fe:	f000 f843 	bl	800c988 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c902:	4b02      	ldr	r3, [pc, #8]	@ (800c90c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20000144 	.word	0x20000144

0800c910 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	4603      	mov	r3, r0
 800c918:	6039      	str	r1, [r7, #0]
 800c91a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c91c:	79fb      	ldrb	r3, [r7, #7]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d105      	bne.n	800c92e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	4907      	ldr	r1, [pc, #28]	@ (800c944 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c926:	4808      	ldr	r0, [pc, #32]	@ (800c948 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c928:	f7fe fc1d 	bl	800b166 <USBD_GetString>
 800c92c:	e004      	b.n	800c938 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	4904      	ldr	r1, [pc, #16]	@ (800c944 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c932:	4805      	ldr	r0, [pc, #20]	@ (800c948 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c934:	f7fe fc17 	bl	800b166 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c938:	4b02      	ldr	r3, [pc, #8]	@ (800c944 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	20002688 	.word	0x20002688
 800c948:	0800f084 	.word	0x0800f084

0800c94c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	4603      	mov	r3, r0
 800c954:	6039      	str	r1, [r7, #0]
 800c956:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d105      	bne.n	800c96a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	4907      	ldr	r1, [pc, #28]	@ (800c980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c962:	4808      	ldr	r0, [pc, #32]	@ (800c984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c964:	f7fe fbff 	bl	800b166 <USBD_GetString>
 800c968:	e004      	b.n	800c974 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	4904      	ldr	r1, [pc, #16]	@ (800c980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c96e:	4805      	ldr	r0, [pc, #20]	@ (800c984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c970:	f7fe fbf9 	bl	800b166 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c974:	4b02      	ldr	r3, [pc, #8]	@ (800c980 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20002688 	.word	0x20002688
 800c984:	0800f098 	.word	0x0800f098

0800c988 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c98e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9cc <Get_SerialNum+0x44>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c994:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d0 <Get_SerialNum+0x48>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c99a:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d4 <Get_SerialNum+0x4c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d009      	beq.n	800c9c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9ae:	2208      	movs	r2, #8
 800c9b0:	4909      	ldr	r1, [pc, #36]	@ (800c9d8 <Get_SerialNum+0x50>)
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f000 f814 	bl	800c9e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c9b8:	2204      	movs	r2, #4
 800c9ba:	4908      	ldr	r1, [pc, #32]	@ (800c9dc <Get_SerialNum+0x54>)
 800c9bc:	68b8      	ldr	r0, [r7, #8]
 800c9be:	f000 f80f 	bl	800c9e0 <IntToUnicode>
  }
}
 800c9c2:	bf00      	nop
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	1ffff7e8 	.word	0x1ffff7e8
 800c9d0:	1ffff7ec 	.word	0x1ffff7ec
 800c9d4:	1ffff7f0 	.word	0x1ffff7f0
 800c9d8:	20000146 	.word	0x20000146
 800c9dc:	20000156 	.word	0x20000156

0800c9e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	75fb      	strb	r3, [r7, #23]
 800c9f6:	e027      	b.n	800ca48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	0f1b      	lsrs	r3, r3, #28
 800c9fc:	2b09      	cmp	r3, #9
 800c9fe:	d80b      	bhi.n	800ca18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	0f1b      	lsrs	r3, r3, #28
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	440b      	add	r3, r1
 800ca10:	3230      	adds	r2, #48	@ 0x30
 800ca12:	b2d2      	uxtb	r2, r2
 800ca14:	701a      	strb	r2, [r3, #0]
 800ca16:	e00a      	b.n	800ca2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	0f1b      	lsrs	r3, r3, #28
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	4619      	mov	r1, r3
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	440b      	add	r3, r1
 800ca28:	3237      	adds	r2, #55	@ 0x37
 800ca2a:	b2d2      	uxtb	r2, r2
 800ca2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	011b      	lsls	r3, r3, #4
 800ca32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	3301      	adds	r3, #1
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	2200      	movs	r2, #0
 800ca40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	3301      	adds	r3, #1
 800ca46:	75fb      	strb	r3, [r7, #23]
 800ca48:	7dfa      	ldrb	r2, [r7, #23]
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d3d3      	bcc.n	800c9f8 <IntToUnicode+0x18>
  }
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	371c      	adds	r7, #28
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bc80      	pop	{r7}
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a0d      	ldr	r2, [pc, #52]	@ (800caa0 <HAL_PCD_MspInit+0x44>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d113      	bne.n	800ca96 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	@ (800caa4 <HAL_PCD_MspInit+0x48>)
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	4a0c      	ldr	r2, [pc, #48]	@ (800caa4 <HAL_PCD_MspInit+0x48>)
 800ca74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca78:	61d3      	str	r3, [r2, #28]
 800ca7a:	4b0a      	ldr	r3, [pc, #40]	@ (800caa4 <HAL_PCD_MspInit+0x48>)
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800ca86:	2200      	movs	r2, #0
 800ca88:	2105      	movs	r1, #5
 800ca8a:	2014      	movs	r0, #20
 800ca8c:	f7f5 ff1f 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ca90:	2014      	movs	r0, #20
 800ca92:	f7f5 ff38 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca96:	bf00      	nop
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	40005c00 	.word	0x40005c00
 800caa4:	40021000 	.word	0x40021000

0800caa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cabc:	4619      	mov	r1, r3
 800cabe:	4610      	mov	r0, r2
 800cac0:	f7fd fc24 	bl	800a30c <USBD_LL_SetupStage>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cade:	78fa      	ldrb	r2, [r7, #3]
 800cae0:	6879      	ldr	r1, [r7, #4]
 800cae2:	4613      	mov	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4413      	add	r3, r2
 800cae8:	00db      	lsls	r3, r3, #3
 800caea:	440b      	add	r3, r1
 800caec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	78fb      	ldrb	r3, [r7, #3]
 800caf4:	4619      	mov	r1, r3
 800caf6:	f7fd fc56 	bl	800a3a6 <USBD_LL_DataOutStage>
}
 800cafa:	bf00      	nop
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cb14:	78fa      	ldrb	r2, [r7, #3]
 800cb16:	6879      	ldr	r1, [r7, #4]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	00db      	lsls	r3, r3, #3
 800cb20:	440b      	add	r3, r1
 800cb22:	3324      	adds	r3, #36	@ 0x24
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	78fb      	ldrb	r3, [r7, #3]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f7fd fcad 	bl	800a488 <USBD_LL_DataInStage>
}
 800cb2e:	bf00      	nop
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fd fdbd 	bl	800a6c4 <USBD_LL_SOF>
}
 800cb4a:	bf00      	nop
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b084      	sub	sp, #16
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	799b      	ldrb	r3, [r3, #6]
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d001      	beq.n	800cb6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb66:	f7f4 fe1d 	bl	80017a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb70:	7bfa      	ldrb	r2, [r7, #15]
 800cb72:	4611      	mov	r1, r2
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fd fd6d 	bl	800a654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fd fd26 	bl	800a5d2 <USBD_LL_Reset>
}
 800cb86:	bf00      	nop
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
	...

0800cb90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fd fd67 	bl	800a672 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	7a9b      	ldrb	r3, [r3, #10]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbac:	4b04      	ldr	r3, [pc, #16]	@ (800cbc0 <HAL_PCD_SuspendCallback+0x30>)
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	4a03      	ldr	r2, [pc, #12]	@ (800cbc0 <HAL_PCD_SuspendCallback+0x30>)
 800cbb2:	f043 0306 	orr.w	r3, r3, #6
 800cbb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	e000ed00 	.word	0xe000ed00

0800cbc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fd fd61 	bl	800a69a <USBD_LL_Resume>
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cbe8:	4a23      	ldr	r2, [pc, #140]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a21      	ldr	r2, [pc, #132]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cbf4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cbf8:	4b1f      	ldr	r3, [pc, #124]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cbfa:	4a20      	ldr	r2, [pc, #128]	@ (800cc7c <USBD_LL_Init+0x9c>)
 800cbfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbfe:	4b1e      	ldr	r3, [pc, #120]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cc00:	2208      	movs	r2, #8
 800cc02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc04:	4b1c      	ldr	r3, [pc, #112]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cc06:	2202      	movs	r2, #2
 800cc08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc0a:	4b1b      	ldr	r3, [pc, #108]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc10:	4b19      	ldr	r3, [pc, #100]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc16:	4b18      	ldr	r3, [pc, #96]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc1c:	4816      	ldr	r0, [pc, #88]	@ (800cc78 <USBD_LL_Init+0x98>)
 800cc1e:	f7f6 f9e5 	bl	8002fec <HAL_PCD_Init>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d001      	beq.n	800cc2c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cc28:	f7f4 fdbc 	bl	80017a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc32:	2318      	movs	r3, #24
 800cc34:	2200      	movs	r2, #0
 800cc36:	2100      	movs	r1, #0
 800cc38:	f7f7 fedf 	bl	80049fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc42:	2358      	movs	r3, #88	@ 0x58
 800cc44:	2200      	movs	r2, #0
 800cc46:	2180      	movs	r1, #128	@ 0x80
 800cc48:	f7f7 fed7 	bl	80049fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc52:	2398      	movs	r3, #152	@ 0x98
 800cc54:	2200      	movs	r2, #0
 800cc56:	2181      	movs	r1, #129	@ 0x81
 800cc58:	f7f7 fecf 	bl	80049fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc62:	23d8      	movs	r3, #216	@ 0xd8
 800cc64:	2200      	movs	r2, #0
 800cc66:	2101      	movs	r1, #1
 800cc68:	f7f7 fec7 	bl	80049fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	20002888 	.word	0x20002888
 800cc7c:	40005c00 	.word	0x40005c00

0800cc80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7f6 fa9e 	bl	80031d8 <HAL_PCD_Start>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 f93a 	bl	800cf1c <USBD_Get_USB_Status>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	70fb      	strb	r3, [r7, #3]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70bb      	strb	r3, [r7, #2]
 800cccc:	4613      	mov	r3, r2
 800ccce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ccde:	78bb      	ldrb	r3, [r7, #2]
 800cce0:	883a      	ldrh	r2, [r7, #0]
 800cce2:	78f9      	ldrb	r1, [r7, #3]
 800cce4:	f7f6 fbf2 	bl	80034cc <HAL_PCD_EP_Open>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 f914 	bl	800cf1c <USBD_Get_USB_Status>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd1c:	78fa      	ldrb	r2, [r7, #3]
 800cd1e:	4611      	mov	r1, r2
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7f6 fc30 	bl	8003586 <HAL_PCD_EP_Close>
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f8f5 	bl	800cf1c <USBD_Get_USB_Status>
 800cd32:	4603      	mov	r3, r0
 800cd34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd5a:	78fa      	ldrb	r2, [r7, #3]
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7f6 fcc1 	bl	80036e6 <HAL_PCD_EP_SetStall>
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 f8d6 	bl	800cf1c <USBD_Get_USB_Status>
 800cd70:	4603      	mov	r3, r0
 800cd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd98:	78fa      	ldrb	r2, [r7, #3]
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f6 fd02 	bl	80037a6 <HAL_PCD_EP_ClrStall>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f8b7 	bl	800cf1c <USBD_Get_USB_Status>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	da0b      	bge.n	800cdf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdd8:	78fb      	ldrb	r3, [r7, #3]
 800cdda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	4613      	mov	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	440b      	add	r3, r1
 800cdea:	3312      	adds	r3, #18
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	e00b      	b.n	800ce08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdf6:	68f9      	ldr	r1, [r7, #12]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4413      	add	r3, r2
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	440b      	add	r3, r1
 800ce02:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ce06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bc80      	pop	{r7}
 800ce10:	4770      	bx	lr

0800ce12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce2c:	78fa      	ldrb	r2, [r7, #3]
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f6 fb27 	bl	8003484 <HAL_PCD_SetAddress>
 800ce36:	4603      	mov	r3, r0
 800ce38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 f86d 	bl	800cf1c <USBD_Get_USB_Status>
 800ce42:	4603      	mov	r3, r0
 800ce44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	607a      	str	r2, [r7, #4]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	72fb      	strb	r3, [r7, #11]
 800ce60:	4613      	mov	r3, r2
 800ce62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce72:	893b      	ldrh	r3, [r7, #8]
 800ce74:	7af9      	ldrb	r1, [r7, #11]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	f7f6 fbfe 	bl	8003678 <HAL_PCD_EP_Transmit>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 f84a 	bl	800cf1c <USBD_Get_USB_Status>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3718      	adds	r7, #24
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b086      	sub	sp, #24
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	60f8      	str	r0, [r7, #12]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	461a      	mov	r2, r3
 800cea2:	460b      	mov	r3, r1
 800cea4:	72fb      	strb	r3, [r7, #11]
 800cea6:	4613      	mov	r3, r2
 800cea8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ceb8:	893b      	ldrh	r3, [r7, #8]
 800ceba:	7af9      	ldrb	r1, [r7, #11]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	f7f6 fbaa 	bl	8003616 <HAL_PCD_EP_Receive>
 800cec2:	4603      	mov	r3, r0
 800cec4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 f827 	bl	800cf1c <USBD_Get_USB_Status>
 800cece:	4603      	mov	r3, r0
 800ced0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ced2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cee4:	4b02      	ldr	r3, [pc, #8]	@ (800cef0 <USBD_static_malloc+0x14>)
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bc80      	pop	{r7}
 800ceee:	4770      	bx	lr
 800cef0:	20002b60 	.word	0x20002b60

0800cef4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]

}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bc80      	pop	{r7}
 800cf04:	4770      	bx	lr

0800cf06 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	460b      	mov	r3, r1
 800cf10:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cf12:	bf00      	nop
 800cf14:	370c      	adds	r7, #12
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bc80      	pop	{r7}
 800cf1a:	4770      	bx	lr

0800cf1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	d817      	bhi.n	800cf60 <USBD_Get_USB_Status+0x44>
 800cf30:	a201      	add	r2, pc, #4	@ (adr r2, 800cf38 <USBD_Get_USB_Status+0x1c>)
 800cf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf36:	bf00      	nop
 800cf38:	0800cf49 	.word	0x0800cf49
 800cf3c:	0800cf4f 	.word	0x0800cf4f
 800cf40:	0800cf55 	.word	0x0800cf55
 800cf44:	0800cf5b 	.word	0x0800cf5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4c:	e00b      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf4e:	2302      	movs	r3, #2
 800cf50:	73fb      	strb	r3, [r7, #15]
    break;
 800cf52:	e008      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf54:	2301      	movs	r3, #1
 800cf56:	73fb      	strb	r3, [r7, #15]
    break;
 800cf58:	e005      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf5a:	2302      	movs	r3, #2
 800cf5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5e:	e002      	b.n	800cf66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf60:	2302      	movs	r3, #2
 800cf62:	73fb      	strb	r3, [r7, #15]
    break;
 800cf64:	bf00      	nop
  }
  return usb_status;
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bc80      	pop	{r7}
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop

0800cf74 <get_CRC8_check_sum>:
  * @param[in]      ucCRC8: init CRC8
  * @retval         calculated crc8
  */

uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b087      	sub	sp, #28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 800cf82:	e00a      	b.n	800cf9a <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	1c5a      	adds	r2, r3, #1
 800cf88:	60fa      	str	r2, [r7, #12]
 800cf8a:	781a      	ldrb	r2, [r3, #0]
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	4053      	eors	r3, r2
 800cf90:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	4a06      	ldr	r2, [pc, #24]	@ (800cfb0 <get_CRC8_check_sum+0x3c>)
 800cf96:	5cd3      	ldrb	r3, [r2, r3]
 800cf98:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	1e5a      	subs	r2, r3, #1
 800cf9e:	60ba      	str	r2, [r7, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1ef      	bne.n	800cf84 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	371c      	adds	r7, #28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bc80      	pop	{r7}
 800cfae:	4770      	bx	lr
 800cfb0:	0800f0dc 	.word	0x0800f0dc

0800cfb4 <verify_CRC8_check_sum>:
  * @param[in]      dw_length:stream length = data + checksum
  * @retval         true of false
  */

uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <verify_CRC8_check_sum+0x1a>
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d801      	bhi.n	800cfd2 <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e013      	b.n	800cffa <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	22ff      	movs	r2, #255	@ 0xff
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7ff ffca 	bl	800cf74 <get_CRC8_check_sum>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	4413      	add	r3, r2
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	7bfa      	ldrb	r2, [r7, #15]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	bf0c      	ite	eq
 800cff4:	2301      	moveq	r3, #1
 800cff6:	2300      	movne	r3, #0
 800cff8:	b2db      	uxtb	r3, r3
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
	...

0800d004 <get_CRC16_check_sum>:
  * @param[in]      wCRC: init CRC16
  * @retval         calculated crc16
  */

uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 800d004:	b480      	push	{r7}
 800d006:	b087      	sub	sp, #28
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	4613      	mov	r3, r2
 800d010:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d113      	bne.n	800d040 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 800d018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d01c:	e016      	b.n	800d04c <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	60fa      	str	r2, [r7, #12]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 800d028:	88fb      	ldrh	r3, [r7, #6]
 800d02a:	0a1b      	lsrs	r3, r3, #8
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	88f9      	ldrh	r1, [r7, #6]
 800d030:	7dfb      	ldrb	r3, [r7, #23]
 800d032:	404b      	eors	r3, r1
 800d034:	b2db      	uxtb	r3, r3
 800d036:	4908      	ldr	r1, [pc, #32]	@ (800d058 <get_CRC16_check_sum+0x54>)
 800d038:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d03c:	4053      	eors	r3, r2
 800d03e:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	1e5a      	subs	r2, r3, #1
 800d044:	60ba      	str	r2, [r7, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1e9      	bne.n	800d01e <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 800d04a:	88fb      	ldrh	r3, [r7, #6]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	371c      	adds	r7, #28
 800d050:	46bd      	mov	sp, r7
 800d052:	bc80      	pop	{r7}
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	0800f1dc 	.word	0x0800f1dc

0800d05c <verify_CRC16_check_sum>:
  * @param[in]      dw_length:stream length = data + checksum
  * @retval         true of false
  */

uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <verify_CRC16_check_sum+0x1a>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2b02      	cmp	r3, #2
 800d074:	d801      	bhi.n	800d07a <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 800d076:	2300      	movs	r3, #0
 800d078:	e020      	b.n	800d0bc <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	3b02      	subs	r3, #2
 800d07e:	4a11      	ldr	r2, [pc, #68]	@ (800d0c4 <verify_CRC16_check_sum+0x68>)
 800d080:	8812      	ldrh	r2, [r2, #0]
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff ffbd 	bl	800d004 <get_CRC16_check_sum>
 800d08a:	4603      	mov	r3, r0
 800d08c:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 800d08e:	89fb      	ldrh	r3, [r7, #14]
 800d090:	b2db      	uxtb	r3, r3
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	3a02      	subs	r2, #2
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	440a      	add	r2, r1
 800d09a:	7812      	ldrb	r2, [r2, #0]
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d10c      	bne.n	800d0ba <verify_CRC16_check_sum+0x5e>
 800d0a0:	89fb      	ldrh	r3, [r7, #14]
 800d0a2:	0a1b      	lsrs	r3, r3, #8
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	3a01      	subs	r2, #1
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	440a      	add	r2, r1
 800d0b0:	7812      	ldrb	r2, [r2, #0]
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d101      	bne.n	800d0ba <verify_CRC16_check_sum+0x5e>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e000      	b.n	800d0bc <verify_CRC16_check_sum+0x60>
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	2000015e 	.word	0x2000015e

0800d0c8 <writeSector>:
#define BIT4	0x10
#define BIT6	0x40

/********************* Flash WriteSector **********************************/
int  writeSector(uint32_t Address,void * values, uint16_t size)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	80fb      	strh	r3, [r7, #6]
    uint16_t *AddressPtr;
    uint16_t *valuePtr;

    AddressPtr 	= (uint16_t *) Address;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	617b      	str	r3, [r7, #20]
    valuePtr		= (uint16_t *) values;
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	613b      	str	r3, [r7, #16]
    size 				= size / 2;  // incoming value is expressed in bytes, not 16 bit words
 800d0de:	88fb      	ldrh	r3, [r7, #6]
 800d0e0:	085b      	lsrs	r3, r3, #1
 800d0e2:	80fb      	strh	r3, [r7, #6]

    while(size)
 800d0e4:	e037      	b.n	800d156 <writeSector+0x8e>
    {
        // unlock the flash
        // Key 1 : 0x45670123
        // Key 2 : 0xCDEF89AB
        FLASH->KEYR = 0x45670123;
 800d0e6:	4b20      	ldr	r3, [pc, #128]	@ (800d168 <writeSector+0xa0>)
 800d0e8:	4a20      	ldr	r2, [pc, #128]	@ (800d16c <writeSector+0xa4>)
 800d0ea:	605a      	str	r2, [r3, #4]
        FLASH->KEYR = 0xCDEF89AB;
 800d0ec:	4b1e      	ldr	r3, [pc, #120]	@ (800d168 <writeSector+0xa0>)
 800d0ee:	4a20      	ldr	r2, [pc, #128]	@ (800d170 <writeSector+0xa8>)
 800d0f0:	605a      	str	r2, [r3, #4]
        FLASH->CR &= ~BIT1; // ensure PER is low
 800d0f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d168 <writeSector+0xa0>)
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	4a1c      	ldr	r2, [pc, #112]	@ (800d168 <writeSector+0xa0>)
 800d0f8:	f023 0302 	bic.w	r3, r3, #2
 800d0fc:	6113      	str	r3, [r2, #16]
        FLASH->CR |= BIT0;  // set the PG bit
 800d0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d168 <writeSector+0xa0>)
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	4a19      	ldr	r2, [pc, #100]	@ (800d168 <writeSector+0xa0>)
 800d104:	f043 0301 	orr.w	r3, r3, #1
 800d108:	6113      	str	r3, [r2, #16]
        *(AddressPtr) = *(valuePtr);
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	881a      	ldrh	r2, [r3, #0]
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	801a      	strh	r2, [r3, #0]
        while(FLASH->SR & BIT0); // wait while busy
 800d112:	bf00      	nop
 800d114:	4b14      	ldr	r3, [pc, #80]	@ (800d168 <writeSector+0xa0>)
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1f9      	bne.n	800d114 <writeSector+0x4c>
        if (FLASH->SR & BIT2)	return -1; // flash not erased to begin with
 800d120:	4b11      	ldr	r3, [pc, #68]	@ (800d168 <writeSector+0xa0>)
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	f003 0304 	and.w	r3, r3, #4
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <writeSector+0x6a>
 800d12c:	f04f 33ff 	mov.w	r3, #4294967295
 800d130:	e015      	b.n	800d15e <writeSector+0x96>
        if (FLASH->SR & BIT4)	return -2; // write protect error
 800d132:	4b0d      	ldr	r3, [pc, #52]	@ (800d168 <writeSector+0xa0>)
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	f003 0310 	and.w	r3, r3, #16
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <writeSector+0x7c>
 800d13e:	f06f 0301 	mvn.w	r3, #1
 800d142:	e00c      	b.n	800d15e <writeSector+0x96>
        AddressPtr++;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	3302      	adds	r3, #2
 800d148:	617b      	str	r3, [r7, #20]
        valuePtr++;
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	3302      	adds	r3, #2
 800d14e:	613b      	str	r3, [r7, #16]
        size--;
 800d150:	88fb      	ldrh	r3, [r7, #6]
 800d152:	3b01      	subs	r3, #1
 800d154:	80fb      	strh	r3, [r7, #6]
    while(size)
 800d156:	88fb      	ldrh	r3, [r7, #6]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1c4      	bne.n	800d0e6 <writeSector+0x1e>
    }
    return 0;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	371c      	adds	r7, #28
 800d162:	46bd      	mov	sp, r7
 800d164:	bc80      	pop	{r7}
 800d166:	4770      	bx	lr
 800d168:	40022000 	.word	0x40022000
 800d16c:	45670123 	.word	0x45670123
 800d170:	cdef89ab 	.word	0xcdef89ab

0800d174 <eraseSector>:

/********************* Flash eraseSector **********************************/
void eraseSector(uint32_t SectorStartAddress)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
    FLASH->KEYR = 0x45670123;
 800d17c:	4b13      	ldr	r3, [pc, #76]	@ (800d1cc <eraseSector+0x58>)
 800d17e:	4a14      	ldr	r2, [pc, #80]	@ (800d1d0 <eraseSector+0x5c>)
 800d180:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 800d182:	4b12      	ldr	r3, [pc, #72]	@ (800d1cc <eraseSector+0x58>)
 800d184:	4a13      	ldr	r2, [pc, #76]	@ (800d1d4 <eraseSector+0x60>)
 800d186:	605a      	str	r2, [r3, #4]
    FLASH->CR &= ~BIT0;  // Ensure PG bit is low
 800d188:	4b10      	ldr	r3, [pc, #64]	@ (800d1cc <eraseSector+0x58>)
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	4a0f      	ldr	r2, [pc, #60]	@ (800d1cc <eraseSector+0x58>)
 800d18e:	f023 0301 	bic.w	r3, r3, #1
 800d192:	6113      	str	r3, [r2, #16]
    FLASH->CR |= BIT1; // set the PER bit
 800d194:	4b0d      	ldr	r3, [pc, #52]	@ (800d1cc <eraseSector+0x58>)
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	4a0c      	ldr	r2, [pc, #48]	@ (800d1cc <eraseSector+0x58>)
 800d19a:	f043 0302 	orr.w	r3, r3, #2
 800d19e:	6113      	str	r3, [r2, #16]
    FLASH->AR = SectorStartAddress;
 800d1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d1cc <eraseSector+0x58>)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6153      	str	r3, [r2, #20]
    FLASH->CR |= BIT6; // set the start bit
 800d1a6:	4b09      	ldr	r3, [pc, #36]	@ (800d1cc <eraseSector+0x58>)
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	4a08      	ldr	r2, [pc, #32]	@ (800d1cc <eraseSector+0x58>)
 800d1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1b0:	6113      	str	r3, [r2, #16]
    while(FLASH->SR & BIT0); // wait while busy
 800d1b2:	bf00      	nop
 800d1b4:	4b05      	ldr	r3, [pc, #20]	@ (800d1cc <eraseSector+0x58>)
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	f003 0301 	and.w	r3, r3, #1
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1f9      	bne.n	800d1b4 <eraseSector+0x40>
}
 800d1c0:	bf00      	nop
 800d1c2:	bf00      	nop
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bc80      	pop	{r7}
 800d1ca:	4770      	bx	lr
 800d1cc:	40022000 	.word	0x40022000
 800d1d0:	45670123 	.word	0x45670123
 800d1d4:	cdef89ab 	.word	0xcdef89ab

0800d1d8 <readSector>:
/********************* Flash readSector **********************************/
void readSector(uint32_t SectorStartAddress, void * values, uint16_t size)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b087      	sub	sp, #28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	80fb      	strh	r3, [r7, #6]
    uint16_t 			*AddressPtr;
    uint16_t 			*valuePtr;
    AddressPtr 	= (uint16_t *) SectorStartAddress;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	617b      	str	r3, [r7, #20]
    valuePtr		= (uint16_t *) values;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	613b      	str	r3, [r7, #16]
    size 				=  size/2; // incoming value is expressed in bytes, not 16 bit words
 800d1ee:	88fb      	ldrh	r3, [r7, #6]
 800d1f0:	085b      	lsrs	r3, r3, #1
 800d1f2:	80fb      	strh	r3, [r7, #6]

    while(size)
 800d1f4:	e00c      	b.n	800d210 <readSector+0x38>
    {
        *((uint16_t *)valuePtr)=*((uint16_t *)AddressPtr);
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	881a      	ldrh	r2, [r3, #0]
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	801a      	strh	r2, [r3, #0]
        valuePtr++;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	3302      	adds	r3, #2
 800d202:	613b      	str	r3, [r7, #16]
        AddressPtr++;
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	3302      	adds	r3, #2
 800d208:	617b      	str	r3, [r7, #20]
        size--;
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	80fb      	strh	r3, [r7, #6]
    while(size)
 800d210:	88fb      	ldrh	r3, [r7, #6]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1ef      	bne.n	800d1f6 <readSector+0x1e>
    }
}
 800d216:	bf00      	nop
 800d218:	bf00      	nop
 800d21a:	371c      	adds	r7, #28
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bc80      	pop	{r7}
 800d220:	4770      	bx	lr
	...

0800d224 <Init_param_PID>:

static void Init_param_PID(Flashdef *fl)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
    fl->data_buffer[0] = &PID.mode;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a20      	ldr	r2, [pc, #128]	@ (800d2b0 <Init_param_PID+0x8c>)
 800d230:	601a      	str	r2, [r3, #0]
    fl->data_buffer[1] = &PID.ID;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a1f      	ldr	r2, [pc, #124]	@ (800d2b4 <Init_param_PID+0x90>)
 800d236:	605a      	str	r2, [r3, #4]
    fl->data_buffer[2] = (uint8_t*)&PID.PPR;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a1f      	ldr	r2, [pc, #124]	@ (800d2b8 <Init_param_PID+0x94>)
 800d23c:	609a      	str	r2, [r3, #8]
    fl->data_buffer[3] = (uint8_t*)&PID.PPR + 1;
 800d23e:	4a1f      	ldr	r2, [pc, #124]	@ (800d2bc <Init_param_PID+0x98>)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	60da      	str	r2, [r3, #12]
    fl->data_buffer[4] = (uint8_t*)&PID.RPM;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a1e      	ldr	r2, [pc, #120]	@ (800d2c0 <Init_param_PID+0x9c>)
 800d248:	611a      	str	r2, [r3, #16]
    fl->data_buffer[5] = (uint8_t*)&PID.RPM + 1;
 800d24a:	4a1e      	ldr	r2, [pc, #120]	@ (800d2c4 <Init_param_PID+0xa0>)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	615a      	str	r2, [r3, #20]
//    fl->data_buffer[6] = (uint8_t*)&PID.Delta_T;
//    fl->data_buffer[7] = (uint8_t*)&PID.Delta_T + 1;
//    fl->data_buffer[8] = (uint8_t*)&PID.Delta_T + 2;
//    fl->data_buffer[9] = (uint8_t*)&PID.Delta_T + 3;
    fl->data_buffer[10] = (uint8_t*)&PID.Kp_def;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a1d      	ldr	r2, [pc, #116]	@ (800d2c8 <Init_param_PID+0xa4>)
 800d254:	629a      	str	r2, [r3, #40]	@ 0x28
    fl->data_buffer[11] = (uint8_t*)&PID.Kp_def + 1;
 800d256:	4a1d      	ldr	r2, [pc, #116]	@ (800d2cc <Init_param_PID+0xa8>)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	62da      	str	r2, [r3, #44]	@ 0x2c
    fl->data_buffer[12] = (uint8_t*)&PID.Kp_def + 2;
 800d25c:	4a1c      	ldr	r2, [pc, #112]	@ (800d2d0 <Init_param_PID+0xac>)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	631a      	str	r2, [r3, #48]	@ 0x30
    fl->data_buffer[13] = (uint8_t*)&PID.Kp_def + 3;
 800d262:	4a1c      	ldr	r2, [pc, #112]	@ (800d2d4 <Init_param_PID+0xb0>)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	635a      	str	r2, [r3, #52]	@ 0x34
    fl->data_buffer[14] = (uint8_t*)&PID.Ki_def;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a1b      	ldr	r2, [pc, #108]	@ (800d2d8 <Init_param_PID+0xb4>)
 800d26c:	639a      	str	r2, [r3, #56]	@ 0x38
    fl->data_buffer[15] = (uint8_t*)&PID.Ki_def + 1;
 800d26e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2dc <Init_param_PID+0xb8>)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	63da      	str	r2, [r3, #60]	@ 0x3c
    fl->data_buffer[16] = (uint8_t*)&PID.Ki_def + 2;
 800d274:	4a1a      	ldr	r2, [pc, #104]	@ (800d2e0 <Init_param_PID+0xbc>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	641a      	str	r2, [r3, #64]	@ 0x40
    fl->data_buffer[17] = (uint8_t*)&PID.Ki_def + 3;
 800d27a:	4a1a      	ldr	r2, [pc, #104]	@ (800d2e4 <Init_param_PID+0xc0>)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	645a      	str	r2, [r3, #68]	@ 0x44
    fl->data_buffer[18] = (uint8_t*)&PID.Kd_def;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a19      	ldr	r2, [pc, #100]	@ (800d2e8 <Init_param_PID+0xc4>)
 800d284:	649a      	str	r2, [r3, #72]	@ 0x48
    fl->data_buffer[19] = (uint8_t*)&PID.Kd_def + 1;
 800d286:	4a19      	ldr	r2, [pc, #100]	@ (800d2ec <Init_param_PID+0xc8>)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	64da      	str	r2, [r3, #76]	@ 0x4c
    fl->data_buffer[20] = (uint8_t*)&PID.Kd_def + 2;
 800d28c:	4a18      	ldr	r2, [pc, #96]	@ (800d2f0 <Init_param_PID+0xcc>)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	651a      	str	r2, [r3, #80]	@ 0x50
    fl->data_buffer[21] = (uint8_t*)&PID.Kd_def + 3;
 800d292:	4a18      	ldr	r2, [pc, #96]	@ (800d2f4 <Init_param_PID+0xd0>)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	655a      	str	r2, [r3, #84]	@ 0x54
    fl->data_buffer[22] = (uint8_t*)&PID.ptlCtrl;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a17      	ldr	r2, [pc, #92]	@ (800d2f8 <Init_param_PID+0xd4>)
 800d29c:	659a      	str	r2, [r3, #88]	@ 0x58
    fl->data_buffer[23] = (uint8_t*)&PID.scalefactor;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a16      	ldr	r2, [pc, #88]	@ (800d2fc <Init_param_PID+0xd8>)
 800d2a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bc80      	pop	{r7}
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	20002c9d 	.word	0x20002c9d
 800d2b4:	20002c9f 	.word	0x20002c9f
 800d2b8:	20002cda 	.word	0x20002cda
 800d2bc:	20002cdb 	.word	0x20002cdb
 800d2c0:	20002cd8 	.word	0x20002cd8
 800d2c4:	20002cd9 	.word	0x20002cd9
 800d2c8:	20002cf8 	.word	0x20002cf8
 800d2cc:	20002cf9 	.word	0x20002cf9
 800d2d0:	20002cfa 	.word	0x20002cfa
 800d2d4:	20002cfb 	.word	0x20002cfb
 800d2d8:	20002cfc 	.word	0x20002cfc
 800d2dc:	20002cfd 	.word	0x20002cfd
 800d2e0:	20002cfe 	.word	0x20002cfe
 800d2e4:	20002cff 	.word	0x20002cff
 800d2e8:	20002d00 	.word	0x20002d00
 800d2ec:	20002d01 	.word	0x20002d01
 800d2f0:	20002d02 	.word	0x20002d02
 800d2f4:	20002d03 	.word	0x20002d03
 800d2f8:	20002c9e 	.word	0x20002c9e
 800d2fc:	20002cd6 	.word	0x20002cd6

0800d300 <Write_param_PID>:

static void Write_param_PID(Flashdef *fl)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
    uint32_t addr_save = (PID.mode == PID_Position) ?
 800d308:	4b20      	ldr	r3, [pc, #128]	@ (800d38c <Write_param_PID+0x8c>)
 800d30a:	7c5b      	ldrb	r3, [r3, #17]
                         SAVE_PID_Position_Addr : SAVE_PID_Speed_Addr;
 800d30c:	2b09      	cmp	r3, #9
 800d30e:	d101      	bne.n	800d314 <Write_param_PID+0x14>
 800d310:	4b1f      	ldr	r3, [pc, #124]	@ (800d390 <Write_param_PID+0x90>)
 800d312:	e000      	b.n	800d316 <Write_param_PID+0x16>
 800d314:	4b1f      	ldr	r3, [pc, #124]	@ (800d394 <Write_param_PID+0x94>)
    uint32_t addr_save = (PID.mode == PID_Position) ?
 800d316:	60bb      	str	r3, [r7, #8]
    fl->data_wr[0] = *fl->data_buffer[0];
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	781a      	ldrb	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    fl->data_wr[1] = *fl->data_buffer[1];
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	781a      	ldrb	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    eraseSector(SAVE_PID_Init);
 800d330:	4819      	ldr	r0, [pc, #100]	@ (800d398 <Write_param_PID+0x98>)
 800d332:	f7ff ff1f 	bl	800d174 <eraseSector>
    writeSector(SAVE_PID_Init,fl->data_wr,2);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	3380      	adds	r3, #128	@ 0x80
 800d33a:	2202      	movs	r2, #2
 800d33c:	4619      	mov	r1, r3
 800d33e:	4816      	ldr	r0, [pc, #88]	@ (800d398 <Write_param_PID+0x98>)
 800d340:	f7ff fec2 	bl	800d0c8 <writeSector>
    for(uint8_t i = 2; i < DATA_SIZE_FL - 2; i++)
 800d344:	2302      	movs	r3, #2
 800d346:	73fb      	strb	r3, [r7, #15]
 800d348:	e00d      	b.n	800d366 <Write_param_PID+0x66>
        fl->data_wr[i] = *fl->data_buffer[i];
 800d34a:	7bfa      	ldrb	r2, [r7, #15]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	7811      	ldrb	r1, [r2, #0]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	4413      	add	r3, r2
 800d35a:	460a      	mov	r2, r1
 800d35c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    for(uint8_t i = 2; i < DATA_SIZE_FL - 2; i++)
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	3301      	adds	r3, #1
 800d364:	73fb      	strb	r3, [r7, #15]
 800d366:	7bfb      	ldrb	r3, [r7, #15]
 800d368:	2b1d      	cmp	r3, #29
 800d36a:	d9ee      	bls.n	800d34a <Write_param_PID+0x4a>
    eraseSector(addr_save);
 800d36c:	68b8      	ldr	r0, [r7, #8]
 800d36e:	f7ff ff01 	bl	800d174 <eraseSector>
    writeSector(addr_save,(fl->data_wr + 2),DATA_SIZE_FL-2);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	3380      	adds	r3, #128	@ 0x80
 800d376:	3302      	adds	r3, #2
 800d378:	221e      	movs	r2, #30
 800d37a:	4619      	mov	r1, r3
 800d37c:	68b8      	ldr	r0, [r7, #8]
 800d37e:	f7ff fea3 	bl	800d0c8 <writeSector>
}
 800d382:	bf00      	nop
 800d384:	3710      	adds	r7, #16
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	20002c8c 	.word	0x20002c8c
 800d390:	0801f400 	.word	0x0801f400
 800d394:	0801fc00 	.word	0x0801fc00
 800d398:	0801f800 	.word	0x0801f800

0800d39c <Read_param_PID>:
static void Read_param_PID(Flashdef *fl)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
    readSector(SAVE_PID_Init,fl->data_rd,2);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	33a0      	adds	r3, #160	@ 0xa0
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	482e      	ldr	r0, [pc, #184]	@ (800d468 <Read_param_PID+0xcc>)
 800d3ae:	f7ff ff13 	bl	800d1d8 <readSector>

    PID.mode    = *(uint8_t*)fl->data_rd;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 800d3b8:	4b2c      	ldr	r3, [pc, #176]	@ (800d46c <Read_param_PID+0xd0>)
 800d3ba:	745a      	strb	r2, [r3, #17]
    PID.ID      = *(uint8_t*)(fl->data_rd + 1);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 20a1 	ldrb.w	r2, [r3, #161]	@ 0xa1
 800d3c2:	4b2a      	ldr	r3, [pc, #168]	@ (800d46c <Read_param_PID+0xd0>)
 800d3c4:	74da      	strb	r2, [r3, #19]

    if(PID.mode == 0xFF || PID.ID == 0xFF)
 800d3c6:	4b29      	ldr	r3, [pc, #164]	@ (800d46c <Read_param_PID+0xd0>)
 800d3c8:	7c5b      	ldrb	r3, [r3, #17]
 800d3ca:	2bff      	cmp	r3, #255	@ 0xff
 800d3cc:	d003      	beq.n	800d3d6 <Read_param_PID+0x3a>
 800d3ce:	4b27      	ldr	r3, [pc, #156]	@ (800d46c <Read_param_PID+0xd0>)
 800d3d0:	7cdb      	ldrb	r3, [r3, #19]
 800d3d2:	2bff      	cmp	r3, #255	@ 0xff
 800d3d4:	d106      	bne.n	800d3e4 <Read_param_PID+0x48>
    {
        PID.mode = None_PID;
 800d3d6:	4b25      	ldr	r3, [pc, #148]	@ (800d46c <Read_param_PID+0xd0>)
 800d3d8:	2205      	movs	r2, #5
 800d3da:	745a      	strb	r2, [r3, #17]
        PID.ID   = 0;
 800d3dc:	4b23      	ldr	r3, [pc, #140]	@ (800d46c <Read_param_PID+0xd0>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	74da      	strb	r2, [r3, #19]
        return;
 800d3e2:	e03e      	b.n	800d462 <Read_param_PID+0xc6>
    }

    uint32_t addr_save = (PID.mode == PID_Position) ?
 800d3e4:	4b21      	ldr	r3, [pc, #132]	@ (800d46c <Read_param_PID+0xd0>)
 800d3e6:	7c5b      	ldrb	r3, [r3, #17]
                         SAVE_PID_Position_Addr : SAVE_PID_Speed_Addr;
 800d3e8:	2b09      	cmp	r3, #9
 800d3ea:	d101      	bne.n	800d3f0 <Read_param_PID+0x54>
 800d3ec:	4b20      	ldr	r3, [pc, #128]	@ (800d470 <Read_param_PID+0xd4>)
 800d3ee:	e000      	b.n	800d3f2 <Read_param_PID+0x56>
 800d3f0:	4b20      	ldr	r3, [pc, #128]	@ (800d474 <Read_param_PID+0xd8>)
    uint32_t addr_save = (PID.mode == PID_Position) ?
 800d3f2:	60fb      	str	r3, [r7, #12]

    readSector(addr_save,(uint16_t*)(fl->data_rd + 2),DATA_SIZE_FL-2);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	33a0      	adds	r3, #160	@ 0xa0
 800d3f8:	3302      	adds	r3, #2
 800d3fa:	221e      	movs	r2, #30
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff feea 	bl	800d1d8 <readSector>

    PID.PPR     = *(uint16_t *)(fl->data_rd + 2);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	33a0      	adds	r3, #160	@ 0xa0
 800d408:	3302      	adds	r3, #2
 800d40a:	881a      	ldrh	r2, [r3, #0]
 800d40c:	4b17      	ldr	r3, [pc, #92]	@ (800d46c <Read_param_PID+0xd0>)
 800d40e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    PID.RPM     = *(uint16_t *)(fl->data_rd + 4);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	33a0      	adds	r3, #160	@ 0xa0
 800d416:	3304      	adds	r3, #4
 800d418:	881a      	ldrh	r2, [r3, #0]
 800d41a:	4b14      	ldr	r3, [pc, #80]	@ (800d46c <Read_param_PID+0xd0>)
 800d41c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    PID.ptlCtrl = *(uint8_t *)(fl->data_rd + 22);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 20b6 	ldrb.w	r2, [r3, #182]	@ 0xb6
 800d426:	4b11      	ldr	r3, [pc, #68]	@ (800d46c <Read_param_PID+0xd0>)
 800d428:	749a      	strb	r2, [r3, #18]
    if(PID.mode == PID_Position)
 800d42a:	4b10      	ldr	r3, [pc, #64]	@ (800d46c <Read_param_PID+0xd0>)
 800d42c:	7c5b      	ldrb	r3, [r3, #17]
 800d42e:	2b09      	cmp	r3, #9
 800d430:	d117      	bne.n	800d462 <Read_param_PID+0xc6>
    {
        PID.Kp_def  = *(float *)(fl->data_rd + 10);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	33a0      	adds	r3, #160	@ 0xa0
 800d436:	330a      	adds	r3, #10
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a0c      	ldr	r2, [pc, #48]	@ (800d46c <Read_param_PID+0xd0>)
 800d43c:	66d3      	str	r3, [r2, #108]	@ 0x6c
        PID.Ki_def  = *(float *)(fl->data_rd + 14);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	33a0      	adds	r3, #160	@ 0xa0
 800d442:	330e      	adds	r3, #14
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a09      	ldr	r2, [pc, #36]	@ (800d46c <Read_param_PID+0xd0>)
 800d448:	6713      	str	r3, [r2, #112]	@ 0x70
        PID.Kd_def  = *(float *)(fl->data_rd + 18);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	33a0      	adds	r3, #160	@ 0xa0
 800d44e:	3312      	adds	r3, #18
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a06      	ldr	r2, [pc, #24]	@ (800d46c <Read_param_PID+0xd0>)
 800d454:	6753      	str	r3, [r2, #116]	@ 0x74
        PID.scalefactor = *(uint8_t*)(fl->data_rd + 23);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 20b7 	ldrb.w	r2, [r3, #183]	@ 0xb7
 800d45c:	4b03      	ldr	r3, [pc, #12]	@ (800d46c <Read_param_PID+0xd0>)
 800d45e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    }
}
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	0801f800 	.word	0x0801f800
 800d46c:	20002c8c 	.word	0x20002c8c
 800d470:	0801f400 	.word	0x0801f400
 800d474:	0801fc00 	.word	0x0801fc00

0800d478 <Change_mode_PID>:

static void Change_mode_PID(Flashdef *fl, PID_typedef *pid)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
    uint32_t addr_save = (PID.mode == PID_Position) ?
 800d482:	4b1c      	ldr	r3, [pc, #112]	@ (800d4f4 <Change_mode_PID+0x7c>)
 800d484:	7c5b      	ldrb	r3, [r3, #17]
                         SAVE_PID_Position_Addr : SAVE_PID_Speed_Addr;
 800d486:	2b09      	cmp	r3, #9
 800d488:	d101      	bne.n	800d48e <Change_mode_PID+0x16>
 800d48a:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f8 <Change_mode_PID+0x80>)
 800d48c:	e000      	b.n	800d490 <Change_mode_PID+0x18>
 800d48e:	4b1b      	ldr	r3, [pc, #108]	@ (800d4fc <Change_mode_PID+0x84>)
    uint32_t addr_save = (PID.mode == PID_Position) ?
 800d490:	60fb      	str	r3, [r7, #12]

    readSector(addr_save,(uint16_t*)(fl->data_rd + 2),DATA_SIZE_FL-2);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	33a0      	adds	r3, #160	@ 0xa0
 800d496:	3302      	adds	r3, #2
 800d498:	221e      	movs	r2, #30
 800d49a:	4619      	mov	r1, r3
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7ff fe9b 	bl	800d1d8 <readSector>

    PID.PPR     = *(uint16_t *)(fl->data_rd + 2);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	33a0      	adds	r3, #160	@ 0xa0
 800d4a6:	3302      	adds	r3, #2
 800d4a8:	881a      	ldrh	r2, [r3, #0]
 800d4aa:	4b12      	ldr	r3, [pc, #72]	@ (800d4f4 <Change_mode_PID+0x7c>)
 800d4ac:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    PID.RPM     = *(uint16_t *)(fl->data_rd + 4);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	33a0      	adds	r3, #160	@ 0xa0
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	881a      	ldrh	r2, [r3, #0]
 800d4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d4f4 <Change_mode_PID+0x7c>)
 800d4ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if(PID.mode == PID_Position)
 800d4be:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f4 <Change_mode_PID+0x7c>)
 800d4c0:	7c5b      	ldrb	r3, [r3, #17]
 800d4c2:	2b09      	cmp	r3, #9
 800d4c4:	d111      	bne.n	800d4ea <Change_mode_PID+0x72>
    {
        PID.Kp_def  = *(float *)(fl->data_rd + 10);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	33a0      	adds	r3, #160	@ 0xa0
 800d4ca:	330a      	adds	r3, #10
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a09      	ldr	r2, [pc, #36]	@ (800d4f4 <Change_mode_PID+0x7c>)
 800d4d0:	66d3      	str	r3, [r2, #108]	@ 0x6c
        PID.Ki_def  = *(float *)(fl->data_rd + 14);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	33a0      	adds	r3, #160	@ 0xa0
 800d4d6:	330e      	adds	r3, #14
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a06      	ldr	r2, [pc, #24]	@ (800d4f4 <Change_mode_PID+0x7c>)
 800d4dc:	6713      	str	r3, [r2, #112]	@ 0x70
        PID.Kd_def  = *(float *)(fl->data_rd + 18);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	33a0      	adds	r3, #160	@ 0xa0
 800d4e2:	3312      	adds	r3, #18
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a03      	ldr	r2, [pc, #12]	@ (800d4f4 <Change_mode_PID+0x7c>)
 800d4e8:	6753      	str	r3, [r2, #116]	@ 0x74
    }
}
 800d4ea:	bf00      	nop
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20002c8c 	.word	0x20002c8c
 800d4f8:	0801f400 	.word	0x0801f400
 800d4fc:	0801fc00 	.word	0x0801fc00

0800d500 <Flash_data_init>:

void Flash_data_init(Flashdef *fl)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
    fl->f_init_param  = Init_param_PID;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a0a      	ldr	r2, [pc, #40]	@ (800d534 <Flash_data_init+0x34>)
 800d50c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    fl->f_write_param = Write_param_PID;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a09      	ldr	r2, [pc, #36]	@ (800d538 <Flash_data_init+0x38>)
 800d514:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    fl->f_read_param  = Read_param_PID;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a08      	ldr	r2, [pc, #32]	@ (800d53c <Flash_data_init+0x3c>)
 800d51c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    fl->f_change_mode = Change_mode_PID;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a07      	ldr	r2, [pc, #28]	@ (800d540 <Flash_data_init+0x40>)
 800d524:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bc80      	pop	{r7}
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	0800d225 	.word	0x0800d225
 800d538:	0800d301 	.word	0x0800d301
 800d53c:	0800d39d 	.word	0x0800d39d
 800d540:	0800d479 	.word	0x0800d479

0800d544 <Update_Encoder>:
extern PID_typedef PID;

volatile uint16_t cntPID = 0;

void Update_Encoder(PID_typedef *pid)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
    pid->curr_En = TIM2->CNT;
 800d54c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d552:	b29a      	uxth	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	835a      	strh	r2, [r3, #26]

    if(pid->curr_En == pid->prev_En)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	8b5b      	ldrh	r3, [r3, #26]
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	8b9b      	ldrh	r3, [r3, #28]
 800d562:	b29b      	uxth	r3, r3
 800d564:	429a      	cmp	r2, r3
 800d566:	d103      	bne.n	800d570 <Update_Encoder+0x2c>
    {
        pid->delta_EnC = 0;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	831a      	strh	r2, [r3, #24]
 800d56e:	e050      	b.n	800d612 <Update_Encoder+0xce>
    }
    else if(pid->curr_En > pid->prev_En)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	8b5b      	ldrh	r3, [r3, #26]
 800d574:	b29a      	uxth	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	8b9b      	ldrh	r3, [r3, #28]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d924      	bls.n	800d5ca <Update_Encoder+0x86>
    {
        if(TIM2->CR1 & TIM_CR1_DIR)/*__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)*/
 800d580:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0310 	and.w	r3, r3, #16
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d011      	beq.n	800d5b2 <Update_Encoder+0x6e>
        {
            pid->delta_EnC = -(int16_t)(pid->prev_En + (TIM2->ARR - pid->curr_En));
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	8b5b      	ldrh	r3, [r3, #26]
 800d592:	b29a      	uxth	r2, r3
 800d594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	8b9b      	ldrh	r3, [r3, #28]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	b21a      	sxth	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	831a      	strh	r2, [r3, #24]
 800d5b0:	e02f      	b.n	800d612 <Update_Encoder+0xce>
        }
        else
        {
            pid->delta_EnC = (int16_t)(pid->curr_En - pid->prev_En);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	8b5b      	ldrh	r3, [r3, #26]
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	8b9b      	ldrh	r3, [r3, #28]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	b21a      	sxth	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	831a      	strh	r2, [r3, #24]
 800d5c8:	e023      	b.n	800d612 <Update_Encoder+0xce>
        }
    }
    else
    {
        if(TIM2->CR1 & TIM_CR1_DIR)
 800d5ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f003 0310 	and.w	r3, r3, #16
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00b      	beq.n	800d5f0 <Update_Encoder+0xac>
        {
            pid->delta_EnC = (int16_t)(pid->curr_En - pid->prev_En);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	8b5b      	ldrh	r3, [r3, #26]
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	8b9b      	ldrh	r3, [r3, #28]
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	b21a      	sxth	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	831a      	strh	r2, [r3, #24]
 800d5ee:	e010      	b.n	800d612 <Update_Encoder+0xce>
        }
        else
        {
            pid->delta_EnC = (int16_t)(pid->curr_En + (TIM2->ARR - pid->prev_En));
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	8b5b      	ldrh	r3, [r3, #26]
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5fc:	b299      	uxth	r1, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	8b9b      	ldrh	r3, [r3, #28]
 800d602:	b29b      	uxth	r3, r3
 800d604:	1acb      	subs	r3, r1, r3
 800d606:	b29b      	uxth	r3, r3
 800d608:	4413      	add	r3, r2
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	b21a      	sxth	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	831a      	strh	r2, [r3, #24]
        }
    }
    pid->EnC_now += ((int32_t)(pid->delta_EnC));
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	8b1b      	ldrh	r3, [r3, #24]
 800d616:	b21b      	sxth	r3, r3
 800d618:	461a      	mov	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d61e:	441a      	add	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	63da      	str	r2, [r3, #60]	@ 0x3c
    pid->Speed = (float)(((float)pid->delta_EnC)/pid->pulsetoRound);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	8b1b      	ldrh	r3, [r3, #24]
 800d628:	b21b      	sxth	r3, r3
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f3 fb18 	bl	8000c60 <__aeabi_i2f>
 800d630:	4602      	mov	r2, r0
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d636:	4619      	mov	r1, r3
 800d638:	4610      	mov	r0, r2
 800d63a:	f7f3 fc19 	bl	8000e70 <__aeabi_fdiv>
 800d63e:	4603      	mov	r3, r0
 800d640:	461a      	mov	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->prev_En = pid->curr_En;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	8b5b      	ldrh	r3, [r3, #26]
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	839a      	strh	r2, [r3, #28]
}
 800d650:	bf00      	nop
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM4)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a3d      	ldr	r2, [pc, #244]	@ (800d75c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d102      	bne.n	800d670 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        PID.enablePID = 1;
 800d66a:	4b3d      	ldr	r3, [pc, #244]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d66c:	2201      	movs	r2, #1
 800d66e:	755a      	strb	r2, [r3, #21]
    }
    if(htim->Instance == TIM3)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a3b      	ldr	r2, [pc, #236]	@ (800d764 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d16a      	bne.n	800d750 <HAL_TIM_PeriodElapsedCallback+0xf8>
    {
        if(PID.ptlCtrl != PWM_mode && PID.mode == PID_Position)
 800d67a:	4b39      	ldr	r3, [pc, #228]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d67c:	7c9b      	ldrb	r3, [r3, #18]
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d066      	beq.n	800d750 <HAL_TIM_PeriodElapsedCallback+0xf8>
 800d682:	4b37      	ldr	r3, [pc, #220]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d684:	7c5b      	ldrb	r3, [r3, #17]
 800d686:	2b09      	cmp	r3, #9
 800d688:	d162      	bne.n	800d750 <HAL_TIM_PeriodElapsedCallback+0xf8>
        {
            if(PID.modePos == Normal)
 800d68a:	4b35      	ldr	r3, [pc, #212]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d68c:	7d9b      	ldrb	r3, [r3, #22]
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	2b00      	cmp	r3, #0
 800d692:	d13e      	bne.n	800d712 <HAL_TIM_PeriodElapsedCallback+0xba>
            {
                cntPID++;
 800d694:	4b34      	ldr	r3, [pc, #208]	@ (800d768 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800d696:	881b      	ldrh	r3, [r3, #0]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	3301      	adds	r3, #1
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	4b32      	ldr	r3, [pc, #200]	@ (800d768 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800d6a0:	801a      	strh	r2, [r3, #0]
                if(cntPID >= PID.Time_step)
 800d6a2:	4b2f      	ldr	r3, [pc, #188]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800d768 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800d6ac:	881b      	ldrh	r3, [r3, #0]
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d84d      	bhi.n	800d750 <HAL_TIM_PeriodElapsedCallback+0xf8>
                {
                    if( PID.Value_Set > PID.targetPos * PID.scalefactor)
 800d6b4:	4b2a      	ldr	r3, [pc, #168]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6b6:	6a1a      	ldr	r2, [r3, #32]
 800d6b8:	4b29      	ldr	r3, [pc, #164]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6bc:	4928      	ldr	r1, [pc, #160]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6be:	f891 104a 	ldrb.w	r1, [r1, #74]	@ 0x4a
 800d6c2:	fb01 f303 	mul.w	r3, r1, r3
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	dd05      	ble.n	800d6d6 <HAL_TIM_PeriodElapsedCallback+0x7e>
                        PID.Value_Set--;
 800d6ca:	4b25      	ldr	r3, [pc, #148]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6cc:	6a1b      	ldr	r3, [r3, #32]
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	4a23      	ldr	r2, [pc, #140]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6d2:	6213      	str	r3, [r2, #32]
 800d6d4:	e019      	b.n	800d70a <HAL_TIM_PeriodElapsedCallback+0xb2>
                    else if(PID.Value_Set < PID.targetPos * PID.scalefactor)
 800d6d6:	4b22      	ldr	r3, [pc, #136]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6d8:	6a1a      	ldr	r2, [r3, #32]
 800d6da:	4b21      	ldr	r3, [pc, #132]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6de:	4920      	ldr	r1, [pc, #128]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6e0:	f891 104a 	ldrb.w	r1, [r1, #74]	@ 0x4a
 800d6e4:	fb01 f303 	mul.w	r3, r1, r3
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	da05      	bge.n	800d6f8 <HAL_TIM_PeriodElapsedCallback+0xa0>
                        PID.Value_Set++;
 800d6ec:	4b1c      	ldr	r3, [pc, #112]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	4a1b      	ldr	r2, [pc, #108]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6f4:	6213      	str	r3, [r2, #32]
 800d6f6:	e008      	b.n	800d70a <HAL_TIM_PeriodElapsedCallback+0xb2>
                    else
                        PID.Value_Set = PID.targetPos * PID.scalefactor;
 800d6f8:	4b19      	ldr	r3, [pc, #100]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6fc:	4a18      	ldr	r2, [pc, #96]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d6fe:	f892 204a 	ldrb.w	r2, [r2, #74]	@ 0x4a
 800d702:	fb02 f303 	mul.w	r3, r2, r3
 800d706:	4a16      	ldr	r2, [pc, #88]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d708:	6213      	str	r3, [r2, #32]

                    cntPID = 0;
 800d70a:	4b17      	ldr	r3, [pc, #92]	@ (800d768 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	801a      	strh	r2, [r3, #0]
            }
            else
                cntPID = 0;
        }
    }
}
 800d710:	e01e      	b.n	800d750 <HAL_TIM_PeriodElapsedCallback+0xf8>
            else if(PID.modePos == ReStart)
 800d712:	4b13      	ldr	r3, [pc, #76]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d714:	7d9b      	ldrb	r3, [r3, #22]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d116      	bne.n	800d74a <HAL_TIM_PeriodElapsedCallback+0xf2>
                PID.EnC_now = 0;
 800d71c:	4b10      	ldr	r3, [pc, #64]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d71e:	2200      	movs	r2, #0
 800d720:	63da      	str	r2, [r3, #60]	@ 0x3c
                PID.Value_Set = PID.targetPos = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	4a0e      	ldr	r2, [pc, #56]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d726:	6453      	str	r3, [r2, #68]	@ 0x44
 800d728:	4a0d      	ldr	r2, [pc, #52]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d72a:	6213      	str	r3, [r2, #32]
                TIM2->CNT = 0;
 800d72c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d730:	2200      	movs	r2, #0
 800d732:	625a      	str	r2, [r3, #36]	@ 0x24
                PID.prev_En = PID.curr_En = 0;
 800d734:	2100      	movs	r1, #0
 800d736:	4b0a      	ldr	r3, [pc, #40]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d738:	460a      	mov	r2, r1
 800d73a:	835a      	strh	r2, [r3, #26]
 800d73c:	4b08      	ldr	r3, [pc, #32]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d73e:	460a      	mov	r2, r1
 800d740:	839a      	strh	r2, [r3, #28]
                PID.modePos = Normal;
 800d742:	4b07      	ldr	r3, [pc, #28]	@ (800d760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800d744:	2200      	movs	r2, #0
 800d746:	759a      	strb	r2, [r3, #22]
}
 800d748:	e002      	b.n	800d750 <HAL_TIM_PeriodElapsedCallback+0xf8>
                cntPID = 0;
 800d74a:	4b07      	ldr	r3, [pc, #28]	@ (800d768 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	801a      	strh	r2, [r3, #0]
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	bc80      	pop	{r7}
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	40000800 	.word	0x40000800
 800d760:	20002c8c 	.word	0x20002c8c
 800d764:	40000400 	.word	0x40000400
 800d768:	20002c88 	.word	0x20002c88

0800d76c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a0b      	ldr	r2, [pc, #44]	@ (800d7a8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d10e      	bne.n	800d79c <HAL_TIM_IC_CaptureCallback+0x30>
    {
        (PID.Dir == 0) ? PID.Value_Set++ : PID.Value_Set--;
 800d77e:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ac <HAL_TIM_IC_CaptureCallback+0x40>)
 800d780:	7d1b      	ldrb	r3, [r3, #20]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d105      	bne.n	800d792 <HAL_TIM_IC_CaptureCallback+0x26>
 800d786:	4b09      	ldr	r3, [pc, #36]	@ (800d7ac <HAL_TIM_IC_CaptureCallback+0x40>)
 800d788:	6a1b      	ldr	r3, [r3, #32]
 800d78a:	3301      	adds	r3, #1
 800d78c:	4a07      	ldr	r2, [pc, #28]	@ (800d7ac <HAL_TIM_IC_CaptureCallback+0x40>)
 800d78e:	6213      	str	r3, [r2, #32]
    }
}
 800d790:	e004      	b.n	800d79c <HAL_TIM_IC_CaptureCallback+0x30>
        (PID.Dir == 0) ? PID.Value_Set++ : PID.Value_Set--;
 800d792:	4b06      	ldr	r3, [pc, #24]	@ (800d7ac <HAL_TIM_IC_CaptureCallback+0x40>)
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	3b01      	subs	r3, #1
 800d798:	4a04      	ldr	r2, [pc, #16]	@ (800d7ac <HAL_TIM_IC_CaptureCallback+0x40>)
 800d79a:	6213      	str	r3, [r2, #32]
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bc80      	pop	{r7}
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	40000400 	.word	0x40000400
 800d7ac:	20002c8c 	.word	0x20002c8c

0800d7b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	80fb      	strh	r3, [r7, #6]

}
 800d7ba:	bf00      	nop
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bc80      	pop	{r7}
 800d7c2:	4770      	bx	lr

0800d7c4 <reverse>:
static void reverse(uint8_t* start, uint8_t* end) {
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
    while (start < end - 1) {
 800d7ce:	e011      	b.n	800d7f4 <reverse+0x30>
        uint8_t temp = *start;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	73fb      	strb	r3, [r7, #15]
        *start = *(end - 1);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	701a      	strb	r2, [r3, #0]
        *(end - 1) = temp;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	7bfa      	ldrb	r2, [r7, #15]
 800d7e6:	701a      	strb	r2, [r3, #0]
        start++;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	607b      	str	r3, [r7, #4]
        end--;
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	603b      	str	r3, [r7, #0]
    while (start < end - 1) {
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d3e8      	bcc.n	800d7d0 <reverse+0xc>
    }
}
 800d7fe:	bf00      	nop
 800d800:	bf00      	nop
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	bc80      	pop	{r7}
 800d808:	4770      	bx	lr

0800d80a <sort_data>:
static void sort_data(uint8_t* data, int length,uint8_t isHeader) {
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b086      	sub	sp, #24
 800d80e:	af00      	add	r7, sp, #0
 800d810:	60f8      	str	r0, [r7, #12]
 800d812:	60b9      	str	r1, [r7, #8]
 800d814:	4613      	mov	r3, r2
 800d816:	71fb      	strb	r3, [r7, #7]
    uint8_t* header = data;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	617b      	str	r3, [r7, #20]
    uint8_t* end = data + length;
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	613b      	str	r3, [r7, #16]

    while (header < end && *header != isHeader) {
 800d824:	e002      	b.n	800d82c <sort_data+0x22>
        header++;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	3301      	adds	r3, #1
 800d82a:	617b      	str	r3, [r7, #20]
    while (header < end && *header != isHeader) {
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	429a      	cmp	r2, r3
 800d832:	d204      	bcs.n	800d83e <sort_data+0x34>
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	79fa      	ldrb	r2, [r7, #7]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d1f3      	bne.n	800d826 <sort_data+0x1c>
    }

    if (header != data && header != end) {
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	429a      	cmp	r2, r3
 800d844:	d00f      	beq.n	800d866 <sort_data+0x5c>
 800d846:	697a      	ldr	r2, [r7, #20]
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d00b      	beq.n	800d866 <sort_data+0x5c>
        reverse(data, header);
 800d84e:	6979      	ldr	r1, [r7, #20]
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff ffb7 	bl	800d7c4 <reverse>
        reverse(header, end);
 800d856:	6939      	ldr	r1, [r7, #16]
 800d858:	6978      	ldr	r0, [r7, #20]
 800d85a:	f7ff ffb3 	bl	800d7c4 <reverse>
        reverse(data, end);
 800d85e:	6939      	ldr	r1, [r7, #16]
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f7ff ffaf 	bl	800d7c4 <reverse>
    }
}
 800d866:	bf00      	nop
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <revData_process>:

//Header(1 byte) + Data(2 byte) + crc8
//Header(1 byte) + Data(1 byte(ID,Dir) + 2 byte(Speed) + 2 byte (Pulse)) + 1 byte Mode + crc16
static void revData_process(PID_typedef *pid)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
    if(pid->mode == PID_Position)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	7c5b      	ldrb	r3, [r3, #17]
 800d87c:	2b09      	cmp	r3, #9
 800d87e:	d15f      	bne.n	800d940 <revData_process+0xd0>
    {
        sort_data(PID.rev_UART.rxData,PID.mode,0xEE);
 800d880:	4b50      	ldr	r3, [pc, #320]	@ (800d9c4 <revData_process+0x154>)
 800d882:	7c5b      	ldrb	r3, [r3, #17]
 800d884:	22ee      	movs	r2, #238	@ 0xee
 800d886:	4619      	mov	r1, r3
 800d888:	484e      	ldr	r0, [pc, #312]	@ (800d9c4 <revData_process+0x154>)
 800d88a:	f7ff ffbe 	bl	800d80a <sort_data>
        bool data_verify = verify_CRC16_check_sum(pid->rev_UART.rxData,pid->mode);
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7c5b      	ldrb	r3, [r3, #17]
 800d894:	4619      	mov	r1, r3
 800d896:	4610      	mov	r0, r2
 800d898:	f7ff fbe0 	bl	800d05c <verify_CRC16_check_sum>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bf14      	ite	ne
 800d8a2:	2301      	movne	r3, #1
 800d8a4:	2300      	moveq	r3, #0
 800d8a6:	73fb      	strb	r3, [r7, #15]
        if(data_verify == false)
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	f083 0301 	eor.w	r3, r3, #1
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d178      	bne.n	800d9a6 <revData_process+0x136>
            return;
        if(pid->rev_UART.rxData[0] == 0xEF || pid->rev_UART.rxData[0] == 0xEE)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	2bef      	cmp	r3, #239	@ 0xef
 800d8ba:	d003      	beq.n	800d8c4 <revData_process+0x54>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2bee      	cmp	r3, #238	@ 0xee
 800d8c2:	d172      	bne.n	800d9aa <revData_process+0x13a>
        {
            pid->rev_UART.isCorrectData = ((pid->rev_UART.rxData[1] & 0x7f) == pid->ID) ? true : false;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	785b      	ldrb	r3, [r3, #1]
 800d8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	7cd2      	ldrb	r2, [r2, #19]
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	bf0c      	ite	eq
 800d8d4:	2301      	moveq	r3, #1
 800d8d6:	2300      	movne	r3, #0
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	461a      	mov	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	741a      	strb	r2, [r3, #16]
            if(pid->rev_UART.isCorrectData == false)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7c1b      	ldrb	r3, [r3, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d062      	beq.n	800d9ae <revData_process+0x13e>
                return;
            //Normal Control
            pid->Dir = (pid->rev_UART.rxData[1] >> 7);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	09db      	lsrs	r3, r3, #7
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	751a      	strb	r2, [r3, #20]
            pid->Time_step = (pid->rev_UART.rxData[2] << 8) | pid->rev_UART.rxData[3];
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	789b      	ldrb	r3, [r3, #2]
 800d8f8:	021b      	lsls	r3, r3, #8
 800d8fa:	b21a      	sxth	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	78db      	ldrb	r3, [r3, #3]
 800d900:	b21b      	sxth	r3, r3
 800d902:	4313      	orrs	r3, r2
 800d904:	b21b      	sxth	r3, r3
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pid->targetPos = (int32_t)(pid->rev_UART.rxData[4] << 8) | pid->rev_UART.rxData[5];
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	791b      	ldrb	r3, [r3, #4]
 800d912:	021b      	lsls	r3, r3, #8
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	7952      	ldrb	r2, [r2, #5]
 800d918:	431a      	orrs	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	645a      	str	r2, [r3, #68]	@ 0x44
            pid->targetPos = (pid->Dir == 1) ? pid->targetPos : -pid->targetPos;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7d1b      	ldrb	r3, [r3, #20]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d102      	bne.n	800d92c <revData_process+0xbc>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d92a:	e002      	b.n	800d932 <revData_process+0xc2>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d930:	425b      	negs	r3, r3
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	6453      	str	r3, [r2, #68]	@ 0x44
            pid->modePos = pid->rev_UART.rxData[6];
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	799a      	ldrb	r2, [r3, #6]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	759a      	strb	r2, [r3, #22]
        }
        return;
 800d93e:	e034      	b.n	800d9aa <revData_process+0x13a>
    }
    else
    {
        sort_data(PID.rev_UART.rxData,PID.mode,0xFE);
 800d940:	4b20      	ldr	r3, [pc, #128]	@ (800d9c4 <revData_process+0x154>)
 800d942:	7c5b      	ldrb	r3, [r3, #17]
 800d944:	22fe      	movs	r2, #254	@ 0xfe
 800d946:	4619      	mov	r1, r3
 800d948:	481e      	ldr	r0, [pc, #120]	@ (800d9c4 <revData_process+0x154>)
 800d94a:	f7ff ff5e 	bl	800d80a <sort_data>
        if(pid->rev_UART.rxData[0] != 0xFE)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	2bfe      	cmp	r3, #254	@ 0xfe
 800d954:	d12d      	bne.n	800d9b2 <revData_process+0x142>
            return;

        if(verify_CRC8_check_sum(pid->rev_UART.rxData,pid->mode) == false)
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	7c5b      	ldrb	r3, [r3, #17]
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f7ff fb28 	bl	800cfb4 <verify_CRC8_check_sum>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d025      	beq.n	800d9b6 <revData_process+0x146>
            return;

        pid->rev_UART.isCorrectData = ((pid->rev_UART.rxData[1] & 0x7f) == pid->ID) ? true : false;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	785b      	ldrb	r3, [r3, #1]
 800d96e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	7cd2      	ldrb	r2, [r2, #19]
 800d976:	4293      	cmp	r3, r2
 800d978:	bf0c      	ite	eq
 800d97a:	2301      	moveq	r3, #1
 800d97c:	2300      	movne	r3, #0
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	461a      	mov	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	741a      	strb	r2, [r3, #16]

        if(pid->rev_UART.isCorrectData == false)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	7c1b      	ldrb	r3, [r3, #16]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d015      	beq.n	800d9ba <revData_process+0x14a>
            return;

        pid->Dir = (pid->rev_UART.rxData[1] >> 7);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	785b      	ldrb	r3, [r3, #1]
 800d992:	09db      	lsrs	r3, r3, #7
 800d994:	b2da      	uxtb	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	751a      	strb	r2, [r3, #20]
        pid->Value_Set = (int32_t)pid->rev_UART.rxData[2];
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	789b      	ldrb	r3, [r3, #2]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	621a      	str	r2, [r3, #32]
        return;
 800d9a4:	e00a      	b.n	800d9bc <revData_process+0x14c>
            return;
 800d9a6:	bf00      	nop
 800d9a8:	e008      	b.n	800d9bc <revData_process+0x14c>
        return;
 800d9aa:	bf00      	nop
 800d9ac:	e006      	b.n	800d9bc <revData_process+0x14c>
                return;
 800d9ae:	bf00      	nop
 800d9b0:	e004      	b.n	800d9bc <revData_process+0x14c>
            return;
 800d9b2:	bf00      	nop
 800d9b4:	e002      	b.n	800d9bc <revData_process+0x14c>
            return;
 800d9b6:	bf00      	nop
 800d9b8:	e000      	b.n	800d9bc <revData_process+0x14c>
            return;
 800d9ba:	bf00      	nop
    }
}
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20002c8c 	.word	0x20002c8c

0800d9c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a08      	ldr	r2, [pc, #32]	@ (800d9f8 <HAL_UART_RxCpltCallback+0x30>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d109      	bne.n	800d9ee <HAL_UART_RxCpltCallback+0x26>
    {
        revData_process(&PID);
 800d9da:	4808      	ldr	r0, [pc, #32]	@ (800d9fc <HAL_UART_RxCpltCallback+0x34>)
 800d9dc:	f7ff ff48 	bl	800d870 <revData_process>
        HAL_UART_Receive_IT(huart,PID.rev_UART.rxData,PID.mode);
 800d9e0:	4b06      	ldr	r3, [pc, #24]	@ (800d9fc <HAL_UART_RxCpltCallback+0x34>)
 800d9e2:	7c5b      	ldrb	r3, [r3, #17]
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	4905      	ldr	r1, [pc, #20]	@ (800d9fc <HAL_UART_RxCpltCallback+0x34>)
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7f9 f8ea 	bl	8006bc2 <HAL_UART_Receive_IT>
    }
}
 800d9ee:	bf00      	nop
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	40013800 	.word	0x40013800
 800d9fc:	20002c8c 	.word	0x20002c8c

0800da00 <PID_param_init>:
extern TIM_HandleTypeDef htim4;
extern UART_HandleTypeDef huart1;
PID_typedef PID;

static void PID_param_init(PID_typedef *pid)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
//    pid->ptlCtrl = UARTCOM;

    pid->enablePID = 0;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	755a      	strb	r2, [r3, #21]

    pid->modePos = Normal;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	759a      	strb	r2, [r3, #22]

    pid->Motor_Duty = 0;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

    pid->scalefactor = (pid->scalefactor == 0) ? 1 : pid->scalefactor;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800da22:	2b00      	cmp	r3, #0
 800da24:	d003      	beq.n	800da2e <PID_param_init+0x2e>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 800da2c:	e000      	b.n	800da30 <PID_param_init+0x30>
 800da2e:	2201      	movs	r2, #1
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    /* POSITION : SPEED */
    pid->Delta_T = (pid->mode == PID_Position) ? 0.000005f : (pid->PPR >= 100) ? 0.00625f : 0.0125f;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7c5b      	ldrb	r3, [r3, #17]
 800da3a:	2b09      	cmp	r3, #9
 800da3c:	d008      	beq.n	800da50 <PID_param_init+0x50>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800da44:	2b63      	cmp	r3, #99	@ 0x63
 800da46:	d901      	bls.n	800da4c <PID_param_init+0x4c>
 800da48:	4b9f      	ldr	r3, [pc, #636]	@ (800dcc8 <PID_param_init+0x2c8>)
 800da4a:	e002      	b.n	800da52 <PID_param_init+0x52>
 800da4c:	4b9f      	ldr	r3, [pc, #636]	@ (800dccc <PID_param_init+0x2cc>)
 800da4e:	e000      	b.n	800da52 <PID_param_init+0x52>
 800da50:	4b9f      	ldr	r3, [pc, #636]	@ (800dcd0 <PID_param_init+0x2d0>)
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	6353      	str	r3, [r2, #52]	@ 0x34
    pid->pulsetoRound = (float)(pid->PPR * 4 * pid->Delta_T);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f3 f8fe 	bl	8000c60 <__aeabi_i2f>
 800da64:	4602      	mov	r2, r0
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da6a:	4619      	mov	r1, r3
 800da6c:	4610      	mov	r0, r2
 800da6e:	f7f3 f94b 	bl	8000d08 <__aeabi_fmul>
 800da72:	4603      	mov	r3, r0
 800da74:	461a      	mov	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->Dir 	= 0;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	751a      	strb	r2, [r3, #20]
    pid->V_set 	= 0;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f04f 0200 	mov.w	r2, #0
 800da86:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->V_now  = 0;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pid->Speed = 0.0f;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f04f 0200 	mov.w	r2, #0
 800da96:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->delta_EnC = 0;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	831a      	strh	r2, [r3, #24]

    pid->Time_step = 0;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pid->targetPos = 0;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	645a      	str	r2, [r3, #68]	@ 0x44

    pid->P_Pos = pid->P_Sped = 0.0f;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f04f 0200 	mov.w	r2, #0
 800dab2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    pid->I_Pos = pid->I_Sped = 0.0f;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f04f 0200 	mov.w	r2, #0
 800dac8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pid->D_Pos = pid->D_Sped = 0.0f;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f04f 0200 	mov.w	r2, #0
 800dade:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    pid->E_Pos  = pid->E_Sped  = 0.0f;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f04f 0200 	mov.w	r2, #0
 800daf4:	659a      	str	r2, [r3, #88]	@ 0x58
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	655a      	str	r2, [r3, #84]	@ 0x54
    pid->E1_Pos = pid->E1_Sped = 0.0f;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f04f 0200 	mov.w	r2, #0
 800db04:	661a      	str	r2, [r3, #96]	@ 0x60
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    pid->E2_Pos = pid->E2_Sped = 0.0f;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f04f 0200 	mov.w	r2, #0
 800db14:	669a      	str	r2, [r3, #104]	@ 0x68
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	665a      	str	r2, [r3, #100]	@ 0x64

    pid->Output_Pos     = pid->Output_Sped = 0.0f;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f04f 0200 	mov.w	r2, #0
 800db24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    pid->sumOutput_Pos = pid->lastOutput_Sped = 0.0f;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f04f 0200 	mov.w	r2, #0
 800db3a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

    pid->curr_En = 0;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	835a      	strh	r2, [r3, #26]
    pid->prev_En = 0;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	839a      	strh	r2, [r3, #28]

    pid->EnC_now = 0;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pid->EnC_set = 0;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	639a      	str	r2, [r3, #56]	@ 0x38

    if(pid->mode == PID_Position)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	7c5b      	ldrb	r3, [r3, #17]
 800db66:	2b09      	cmp	r3, #9
 800db68:	d124      	bne.n	800dbb4 <PID_param_init+0x1b4>
    {
        pid->RPM = 0;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        pid->PPR = 1;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
        pid->Kp_Pos = pid->Kp_def;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	679a      	str	r2, [r3, #120]	@ 0x78
        pid->Ki_Pos = pid->Ki_def;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	67da      	str	r2, [r3, #124]	@ 0x7c
        pid->Kd_Pos = pid->Kd_def;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        pid->Kp_Sped = 0;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f04f 0200 	mov.w	r2, #0
 800db9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        pid->Ki_Sped = 0;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f04f 0200 	mov.w	r2, #0
 800dba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        pid->Kd_Sped = 0;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f04f 0200 	mov.w	r2, #0
 800dbae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800dbb2:	e058      	b.n	800dc66 <PID_param_init+0x266>
    }
    else if(pid->mode == PID_Speed)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	7c5b      	ldrb	r3, [r3, #17]
 800dbb8:	2b04      	cmp	r3, #4
 800dbba:	d154      	bne.n	800dc66 <PID_param_init+0x266>
    {
        pid->Kp_Pos = (pid->PPR >= 100) ? 1.5f:15.0f;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800dbc2:	2b63      	cmp	r3, #99	@ 0x63
 800dbc4:	d902      	bls.n	800dbcc <PID_param_init+0x1cc>
 800dbc6:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800dbca:	e000      	b.n	800dbce <PID_param_init+0x1ce>
 800dbcc:	4a41      	ldr	r2, [pc, #260]	@ (800dcd4 <PID_param_init+0x2d4>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	679a      	str	r2, [r3, #120]	@ 0x78
//        pid->Ki_Pos = 0.00001f;
//        pid->Kd_Pos = 0.00003f;
        pid->Ki_Pos = (pid->PPR >= 100) ? 0.0001f:0.0001f;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a40      	ldr	r2, [pc, #256]	@ (800dcd8 <PID_param_init+0x2d8>)
 800dbd6:	67da      	str	r2, [r3, #124]	@ 0x7c
        pid->Kd_Pos = (pid->PPR >= 100) ? 0.0005f:0.005f;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800dbde:	2b63      	cmp	r3, #99	@ 0x63
 800dbe0:	d901      	bls.n	800dbe6 <PID_param_init+0x1e6>
 800dbe2:	4a3e      	ldr	r2, [pc, #248]	@ (800dcdc <PID_param_init+0x2dc>)
 800dbe4:	e000      	b.n	800dbe8 <PID_param_init+0x1e8>
 800dbe6:	4a3e      	ldr	r2, [pc, #248]	@ (800dce0 <PID_param_init+0x2e0>)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

//        pid->Kp_def = (pid->PPR >= 100) ? 50.0f:10.0f;
//        pid->Ki_def = (pid->PPR >= 100) ? 2000.0f:400.0f;
//        pid->Kd_def = (pid->PPR >= 100) ? 0.01f:0.001f;
        pid->Kp_def = (pid->PPR >= 100) ? 5.0f:((pid->PPR <= 13) ? 5.0f : 2.0f);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800dbf4:	2b63      	cmp	r3, #99	@ 0x63
 800dbf6:	d809      	bhi.n	800dc0c <PID_param_init+0x20c>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800dbfe:	2b0d      	cmp	r3, #13
 800dc00:	d801      	bhi.n	800dc06 <PID_param_init+0x206>
 800dc02:	4b38      	ldr	r3, [pc, #224]	@ (800dce4 <PID_param_init+0x2e4>)
 800dc04:	e003      	b.n	800dc0e <PID_param_init+0x20e>
 800dc06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dc0a:	e000      	b.n	800dc0e <PID_param_init+0x20e>
 800dc0c:	4b35      	ldr	r3, [pc, #212]	@ (800dce4 <PID_param_init+0x2e4>)
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	66d3      	str	r3, [r2, #108]	@ 0x6c
        pid->Ki_def = (pid->PPR >= 100) ? 0.005f:0.05f;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800dc18:	2b63      	cmp	r3, #99	@ 0x63
 800dc1a:	d901      	bls.n	800dc20 <PID_param_init+0x220>
 800dc1c:	4a30      	ldr	r2, [pc, #192]	@ (800dce0 <PID_param_init+0x2e0>)
 800dc1e:	e000      	b.n	800dc22 <PID_param_init+0x222>
 800dc20:	4a31      	ldr	r2, [pc, #196]	@ (800dce8 <PID_param_init+0x2e8>)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	671a      	str	r2, [r3, #112]	@ 0x70
        pid->Kd_def = (pid->PPR >= 100) ? 0.08f:((pid->PPR <= 13) ? 0.08f : 0.03f);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800dc2c:	2b63      	cmp	r3, #99	@ 0x63
 800dc2e:	d808      	bhi.n	800dc42 <PID_param_init+0x242>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800dc36:	2b0d      	cmp	r3, #13
 800dc38:	d801      	bhi.n	800dc3e <PID_param_init+0x23e>
 800dc3a:	4b2c      	ldr	r3, [pc, #176]	@ (800dcec <PID_param_init+0x2ec>)
 800dc3c:	e002      	b.n	800dc44 <PID_param_init+0x244>
 800dc3e:	4b2c      	ldr	r3, [pc, #176]	@ (800dcf0 <PID_param_init+0x2f0>)
 800dc40:	e000      	b.n	800dc44 <PID_param_init+0x244>
 800dc42:	4b2a      	ldr	r3, [pc, #168]	@ (800dcec <PID_param_init+0x2ec>)
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	6753      	str	r3, [r2, #116]	@ 0x74
        pid->Kp_Sped = pid->Kp_def;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        pid->Ki_Sped = pid->Ki_def;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        pid->Kd_Sped = pid->Kd_def;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    pid->rev_UART.isCorrectData = 0;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	741a      	strb	r2, [r3, #16]
//    pid->rev_UART.rxData[0] = 0;
//    pid->rev_UART.rxData[1] = 0;
//    pid->rev_UART.rxData[2] = 0;
//    pid->rev_UART.rxData[3] = 0;

    (pid->ptlCtrl == PWM_mode) ? 
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7c9b      	ldrb	r3, [r3, #18]
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1):
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d104      	bne.n	800dc7e <PID_param_init+0x27e>
 800dc74:	2100      	movs	r1, #0
 800dc76:	481f      	ldr	r0, [pc, #124]	@ (800dcf4 <PID_param_init+0x2f4>)
 800dc78:	f7f7 fe7a 	bl	8005970 <HAL_TIM_IC_Start_IT>
 800dc7c:	e002      	b.n	800dc84 <PID_param_init+0x284>
    HAL_TIM_Base_Start_IT(&htim3),HAL_UART_Receive_IT(&huart1,PID.rev_UART.rxData,PID.mode);
 800dc7e:	481d      	ldr	r0, [pc, #116]	@ (800dcf4 <PID_param_init+0x2f4>)
 800dc80:	f7f7 fc98 	bl	80055b4 <HAL_TIM_Base_Start_IT>
 800dc84:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf8 <PID_param_init+0x2f8>)
 800dc86:	7c5b      	ldrb	r3, [r3, #17]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	491b      	ldr	r1, [pc, #108]	@ (800dcf8 <PID_param_init+0x2f8>)
 800dc8c:	481b      	ldr	r0, [pc, #108]	@ (800dcfc <PID_param_init+0x2fc>)
 800dc8e:	f7f8 ff98 	bl	8006bc2 <HAL_UART_Receive_IT>
    
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800dc92:	2100      	movs	r1, #0
 800dc94:	481a      	ldr	r0, [pc, #104]	@ (800dd00 <PID_param_init+0x300>)
 800dc96:	f7f7 fd65 	bl	8005764 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800dc9a:	2104      	movs	r1, #4
 800dc9c:	4818      	ldr	r0, [pc, #96]	@ (800dd00 <PID_param_init+0x300>)
 800dc9e:	f7f7 fd61 	bl	8005764 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 800dca2:	213c      	movs	r1, #60	@ 0x3c
 800dca4:	4817      	ldr	r0, [pc, #92]	@ (800dd04 <PID_param_init+0x304>)
 800dca6:	f7f8 f811 	bl	8005ccc <HAL_TIM_Encoder_Start>
    PID_Motor_Ctrl(PID.Motor_Duty);
 800dcaa:	4b13      	ldr	r3, [pc, #76]	@ (800dcf8 <PID_param_init+0x2f8>)
 800dcac:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	db2b      	blt.n	800dd0c <PID_param_init+0x30c>
 800dcb4:	4b14      	ldr	r3, [pc, #80]	@ (800dd08 <PID_param_init+0x308>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	635a      	str	r2, [r3, #52]	@ 0x34
 800dcba:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf8 <PID_param_init+0x2f8>)
 800dcbc:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800dcc0:	4b11      	ldr	r3, [pc, #68]	@ (800dd08 <PID_param_init+0x308>)
 800dcc2:	639a      	str	r2, [r3, #56]	@ 0x38
 800dcc4:	e02b      	b.n	800dd1e <PID_param_init+0x31e>
 800dcc6:	bf00      	nop
 800dcc8:	3bcccccd 	.word	0x3bcccccd
 800dccc:	3c4ccccd 	.word	0x3c4ccccd
 800dcd0:	36a7c5ac 	.word	0x36a7c5ac
 800dcd4:	41700000 	.word	0x41700000
 800dcd8:	38d1b717 	.word	0x38d1b717
 800dcdc:	3a03126f 	.word	0x3a03126f
 800dce0:	3ba3d70a 	.word	0x3ba3d70a
 800dce4:	40a00000 	.word	0x40a00000
 800dce8:	3d4ccccd 	.word	0x3d4ccccd
 800dcec:	3da3d70a 	.word	0x3da3d70a
 800dcf0:	3cf5c28f 	.word	0x3cf5c28f
 800dcf4:	20000590 	.word	0x20000590
 800dcf8:	20002c8c 	.word	0x20002c8c
 800dcfc:	20000620 	.word	0x20000620
 800dd00:	20000500 	.word	0x20000500
 800dd04:	20000548 	.word	0x20000548
 800dd08:	40012c00 	.word	0x40012c00
 800dd0c:	4b08      	ldr	r3, [pc, #32]	@ (800dd30 <PID_param_init+0x330>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd12:	4b08      	ldr	r3, [pc, #32]	@ (800dd34 <PID_param_init+0x334>)
 800dd14:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800dd18:	425a      	negs	r2, r3
 800dd1a:	4b05      	ldr	r3, [pc, #20]	@ (800dd30 <PID_param_init+0x330>)
 800dd1c:	635a      	str	r2, [r3, #52]	@ 0x34
    MX_TIM4_Init();
 800dd1e:	f7f3 ff61 	bl	8001be4 <MX_TIM4_Init>
    HAL_TIM_Base_Start_IT(&htim4);
 800dd22:	4805      	ldr	r0, [pc, #20]	@ (800dd38 <PID_param_init+0x338>)
 800dd24:	f7f7 fc46 	bl	80055b4 <HAL_TIM_Base_Start_IT>
}
 800dd28:	bf00      	nop
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	40012c00 	.word	0x40012c00
 800dd34:	20002c8c 	.word	0x20002c8c
 800dd38:	200005d8 	.word	0x200005d8

0800dd3c <PID_set>:
//    }
//}


static void PID_set(PID_typedef *pid, float Kp, float Ki, float Kd)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
 800dd48:	603b      	str	r3, [r7, #0]
    if(pid->mode == PID_Position)
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	7c5b      	ldrb	r3, [r3, #17]
 800dd4e:	2b09      	cmp	r3, #9
 800dd50:	d118      	bne.n	800dd84 <PID_set+0x48>
    {
        pid->Kp_Pos = Kp;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	68ba      	ldr	r2, [r7, #8]
 800dd56:	679a      	str	r2, [r3, #120]	@ 0x78
        pid->Ki_Pos = Ki*pid->Delta_T;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7f2 ffd2 	bl	8000d08 <__aeabi_fmul>
 800dd64:	4603      	mov	r3, r0
 800dd66:	461a      	mov	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	67da      	str	r2, [r3, #124]	@ 0x7c
        pid->Kd_Pos = Kd/pid->Delta_T;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd70:	4619      	mov	r1, r3
 800dd72:	6838      	ldr	r0, [r7, #0]
 800dd74:	f7f3 f87c 	bl	8000e70 <__aeabi_fdiv>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    {
        pid->Kp_Sped = Kp;
        pid->Ki_Sped = Ki*pid->Delta_T;
        pid->Kd_Sped = Kd/pid->Delta_T;
    }
}
 800dd82:	e019      	b.n	800ddb8 <PID_set+0x7c>
        pid->Kp_Sped = Kp;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        pid->Ki_Sped = Ki*pid->Delta_T;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd90:	6879      	ldr	r1, [r7, #4]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f2 ffb8 	bl	8000d08 <__aeabi_fmul>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        pid->Kd_Sped = Kd/pid->Delta_T;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dda6:	4619      	mov	r1, r3
 800dda8:	6838      	ldr	r0, [r7, #0]
 800ddaa:	f7f3 f861 	bl	8000e70 <__aeabi_fdiv>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
}
 800ddb8:	bf00      	nop
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <PID_Calulate>:

static void PID_Calulate(PID_typedef *pid)
{
 800ddc0:	b5b0      	push	{r4, r5, r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]

    if(pid->mode == PID_Speed)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	7c5b      	ldrb	r3, [r3, #17]
 800ddcc:	2b04      	cmp	r3, #4
 800ddce:	f040 83a3 	bne.w	800e518 <PID_Calulate+0x758>
    {
        static uint8_t first_Lock = 0;

        if(pid->Value_Set != 0U)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 833f 	beq.w	800e45a <PID_Calulate+0x69a>
        {
            // RPS to 0-250
            pid->V_now = fabs((pid->Speed * Speed_scale) / pid->RPM);// 0 - 250
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dde0:	4980      	ldr	r1, [pc, #512]	@ (800dfe4 <PID_Calulate+0x224>)
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7f2 ff90 	bl	8000d08 <__aeabi_fmul>
 800dde8:	4603      	mov	r3, r0
 800ddea:	461c      	mov	r4, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7f2 ff34 	bl	8000c60 <__aeabi_i2f>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f7f3 f837 	bl	8000e70 <__aeabi_fdiv>
 800de02:	4603      	mov	r3, r0
 800de04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de08:	4618      	mov	r0, r3
 800de0a:	f7f3 f969 	bl	80010e0 <__aeabi_f2uiz>
 800de0e:	4603      	mov	r3, r0
 800de10:	b2da      	uxtb	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

            // if speed sets from 1 to 3 than lock mode
            if(pid->Value_Set < 4U)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a1b      	ldr	r3, [r3, #32]
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d871      	bhi.n	800df04 <PID_Calulate+0x144>
            {
                pid->V_set = 0U;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f04f 0200 	mov.w	r2, #0
 800de26:	625a      	str	r2, [r3, #36]	@ 0x24
//                LocK_process(pid,*Value_Set);
                if(first_Lock == 0 && fabs(pid->Speed) == 0.0f)
 800de28:	4b6f      	ldr	r3, [pc, #444]	@ (800dfe8 <PID_Calulate+0x228>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f040 80fb 	bne.w	800e028 <PID_Calulate+0x268>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de3a:	f04f 0100 	mov.w	r1, #0
 800de3e:	4618      	mov	r0, r3
 800de40:	f7f3 f8f6 	bl	8001030 <__aeabi_fcmpeq>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 80ee 	beq.w	800e028 <PID_Calulate+0x268>
                {
                    pid->Delta_T = 0.001f;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a67      	ldr	r2, [pc, #412]	@ (800dfec <PID_Calulate+0x22c>)
 800de50:	635a      	str	r2, [r3, #52]	@ 0x34
                    TIM4->ARR = 1000-1;
 800de52:	4b67      	ldr	r3, [pc, #412]	@ (800dff0 <PID_Calulate+0x230>)
 800de54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800de58:	62da      	str	r2, [r3, #44]	@ 0x2c
                    //Reset Data
                    pid->P_Sped = pid->I_Sped = pid->D_Sped = 0.0f;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f04f 0200 	mov.w	r2, #0
 800de60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    pid->Output_Sped = 0.0f;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f04f 0200 	mov.w	r2, #0
 800de82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                    pid->lastOutput_Sped = pid->Output_Sped;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                    // None Lock
                    pid->Motor_Duty = (int16_t)pid->Output_Pos;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f3 f8fb 	bl	8001094 <__aeabi_f2iz>
 800de9e:	4603      	mov	r3, r0
 800dea0:	b21a      	sxth	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
                    PID_Motor_Ctrl(pid->Motor_Duty);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800deae:	2b00      	cmp	r3, #0
 800deb0:	db08      	blt.n	800dec4 <PID_Calulate+0x104>
 800deb2:	4b50      	ldr	r3, [pc, #320]	@ (800dff4 <PID_Calulate+0x234>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	635a      	str	r2, [r3, #52]	@ 0x34
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800debe:	4b4d      	ldr	r3, [pc, #308]	@ (800dff4 <PID_Calulate+0x234>)
 800dec0:	639a      	str	r2, [r3, #56]	@ 0x38
 800dec2:	e008      	b.n	800ded6 <PID_Calulate+0x116>
 800dec4:	4b4b      	ldr	r3, [pc, #300]	@ (800dff4 <PID_Calulate+0x234>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	639a      	str	r2, [r3, #56]	@ 0x38
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800ded0:	425a      	negs	r2, r3
 800ded2:	4b48      	ldr	r3, [pc, #288]	@ (800dff4 <PID_Calulate+0x234>)
 800ded4:	635a      	str	r2, [r3, #52]	@ 0x34
                    first_Lock = 1;
 800ded6:	4b44      	ldr	r3, [pc, #272]	@ (800dfe8 <PID_Calulate+0x228>)
 800ded8:	2201      	movs	r2, #1
 800deda:	701a      	strb	r2, [r3, #0]

                    TIM2->CNT = 0;
 800dedc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dee0:	2200      	movs	r2, #0
 800dee2:	625a      	str	r2, [r3, #36]	@ 0x24
                    pid->delta_EnC = 0;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	831a      	strh	r2, [r3, #24]
                    pid->curr_En = 0;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	835a      	strh	r2, [r3, #26]
                    pid->prev_En = 0;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	839a      	strh	r2, [r3, #28]
                    pid->EnC_now = 0;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	63da      	str	r2, [r3, #60]	@ 0x3c
                    pid->EnC_set = 0;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	639a      	str	r2, [r3, #56]	@ 0x38
 800df02:	e091      	b.n	800e028 <PID_Calulate+0x268>
                }
            }
            else
            {
                if(first_Lock == 1)
 800df04:	4b38      	ldr	r3, [pc, #224]	@ (800dfe8 <PID_Calulate+0x228>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d14e      	bne.n	800dfaa <PID_Calulate+0x1ea>
                {
                    if(pid->PPR >= 100)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800df12:	2b63      	cmp	r3, #99	@ 0x63
 800df14:	d907      	bls.n	800df26 <PID_Calulate+0x166>
                    {
                        pid->Delta_T = 0.00625f;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4a37      	ldr	r2, [pc, #220]	@ (800dff8 <PID_Calulate+0x238>)
 800df1a:	635a      	str	r2, [r3, #52]	@ 0x34
                        TIM4->ARR = ARR_SET-1;
 800df1c:	4b34      	ldr	r3, [pc, #208]	@ (800dff0 <PID_Calulate+0x230>)
 800df1e:	f641 0269 	movw	r2, #6249	@ 0x1869
 800df22:	62da      	str	r2, [r3, #44]	@ 0x2c
 800df24:	e006      	b.n	800df34 <PID_Calulate+0x174>
                    }
                    else
                    {
                        pid->Delta_T = 0.0125f;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a34      	ldr	r2, [pc, #208]	@ (800dffc <PID_Calulate+0x23c>)
 800df2a:	635a      	str	r2, [r3, #52]	@ 0x34
                        TIM4->ARR = 12500-1;
 800df2c:	4b30      	ldr	r3, [pc, #192]	@ (800dff0 <PID_Calulate+0x230>)
 800df2e:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 800df32:	62da      	str	r2, [r3, #44]	@ 0x2c
                    }
                    pid->P_Pos = pid->I_Pos = pid->D_Pos = 0.0f;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f04f 0200 	mov.w	r2, #0
 800df3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                    pid->Output_Pos = 0.0f;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f04f 0200 	mov.w	r2, #0
 800df5c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                    // None Lock
                    pid->Motor_Duty = (int16_t)pid->Output_Sped;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800df66:	4618      	mov	r0, r3
 800df68:	f7f3 f894 	bl	8001094 <__aeabi_f2iz>
 800df6c:	4603      	mov	r3, r0
 800df6e:	b21a      	sxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
                    PID_Motor_Ctrl(pid->Motor_Duty);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	db08      	blt.n	800df92 <PID_Calulate+0x1d2>
 800df80:	4b1c      	ldr	r3, [pc, #112]	@ (800dff4 <PID_Calulate+0x234>)
 800df82:	2200      	movs	r2, #0
 800df84:	635a      	str	r2, [r3, #52]	@ 0x34
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800df8c:	4b19      	ldr	r3, [pc, #100]	@ (800dff4 <PID_Calulate+0x234>)
 800df8e:	639a      	str	r2, [r3, #56]	@ 0x38
 800df90:	e008      	b.n	800dfa4 <PID_Calulate+0x1e4>
 800df92:	4b18      	ldr	r3, [pc, #96]	@ (800dff4 <PID_Calulate+0x234>)
 800df94:	2200      	movs	r2, #0
 800df96:	639a      	str	r2, [r3, #56]	@ 0x38
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800df9e:	425a      	negs	r2, r3
 800dfa0:	4b14      	ldr	r3, [pc, #80]	@ (800dff4 <PID_Calulate+0x234>)
 800dfa2:	635a      	str	r2, [r3, #52]	@ 0x34
                    first_Lock = 0;
 800dfa4:	4b10      	ldr	r3, [pc, #64]	@ (800dfe8 <PID_Calulate+0x228>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	701a      	strb	r2, [r3, #0]
                }
                if(pid->Value_Set > 250) pid->Value_Set = 250;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6a1b      	ldr	r3, [r3, #32]
 800dfae:	2bfa      	cmp	r3, #250	@ 0xfa
 800dfb0:	dd02      	ble.n	800dfb8 <PID_Calulate+0x1f8>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	22fa      	movs	r2, #250	@ 0xfa
 800dfb6:	621a      	str	r2, [r3, #32]
                // 0-250 to RPS
                pid->V_set = (pid->Dir == 0U)  ? (float)(pid->Value_Set * pid->RPM)/Speed_scale : -((float)(pid->Value_Set * pid->RPM)/Speed_scale);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7d1b      	ldrb	r3, [r3, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d11f      	bne.n	800e000 <PID_Calulate+0x240>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800dfca:	fb02 f303 	mul.w	r3, r2, r3
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7f2 fe46 	bl	8000c60 <__aeabi_i2f>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	4903      	ldr	r1, [pc, #12]	@ (800dfe4 <PID_Calulate+0x224>)
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7f2 ff49 	bl	8000e70 <__aeabi_fdiv>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	e020      	b.n	800e024 <PID_Calulate+0x264>
 800dfe2:	bf00      	nop
 800dfe4:	466a6000 	.word	0x466a6000
 800dfe8:	20002d50 	.word	0x20002d50
 800dfec:	3a83126f 	.word	0x3a83126f
 800dff0:	40000800 	.word	0x40000800
 800dff4:	40012c00 	.word	0x40012c00
 800dff8:	3bcccccd 	.word	0x3bcccccd
 800dffc:	3c4ccccd 	.word	0x3c4ccccd
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a1b      	ldr	r3, [r3, #32]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800e00a:	fb02 f303 	mul.w	r3, r2, r3
 800e00e:	4618      	mov	r0, r3
 800e010:	f7f2 fe26 	bl	8000c60 <__aeabi_i2f>
 800e014:	4603      	mov	r3, r0
 800e016:	498a      	ldr	r1, [pc, #552]	@ (800e240 <PID_Calulate+0x480>)
 800e018:	4618      	mov	r0, r3
 800e01a:	f7f2 ff29 	bl	8000e70 <__aeabi_fdiv>
 800e01e:	4603      	mov	r3, r0
 800e020:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	6253      	str	r3, [r2, #36]	@ 0x24
            }

            if(first_Lock == 0)
 800e028:	4b86      	ldr	r3, [pc, #536]	@ (800e244 <PID_Calulate+0x484>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f040 80e9 	bne.w	800e204 <PID_Calulate+0x444>
            {
                // Get Erorr
                pid->E_Sped = (pid->V_set - pid->Speed);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03a:	4619      	mov	r1, r3
 800e03c:	4610      	mov	r0, r2
 800e03e:	f7f2 fd59 	bl	8000af4 <__aeabi_fsub>
 800e042:	4603      	mov	r3, r0
 800e044:	461a      	mov	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	659a      	str	r2, [r3, #88]	@ 0x58

                pid->P_Sped = pid->Kp_Sped * pid->E_Sped;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e054:	4619      	mov	r1, r3
 800e056:	4610      	mov	r0, r2
 800e058:	f7f2 fe56 	bl	8000d08 <__aeabi_fmul>
 800e05c:	4603      	mov	r3, r0
 800e05e:	461a      	mov	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                pid->I_Sped += pid->Ki_Sped * pid->E_Sped * pid->Delta_T;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e076:	4619      	mov	r1, r3
 800e078:	4610      	mov	r0, r2
 800e07a:	f7f2 fe45 	bl	8000d08 <__aeabi_fmul>
 800e07e:	4603      	mov	r3, r0
 800e080:	461a      	mov	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e086:	4619      	mov	r1, r3
 800e088:	4610      	mov	r0, r2
 800e08a:	f7f2 fe3d 	bl	8000d08 <__aeabi_fmul>
 800e08e:	4603      	mov	r3, r0
 800e090:	4619      	mov	r1, r3
 800e092:	4620      	mov	r0, r4
 800e094:	f7f2 fd30 	bl	8000af8 <__addsf3>
 800e098:	4603      	mov	r3, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                pid->D_Sped = pid->Kd_Sped * (pid->E_Sped - pid->E1_Sped)/pid->Delta_T;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4610      	mov	r0, r2
 800e0b4:	f7f2 fd1e 	bl	8000af4 <__aeabi_fsub>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f7f2 fe23 	bl	8000d08 <__aeabi_fmul>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	f7f2 fecf 	bl	8000e70 <__aeabi_fdiv>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

                LimitMax(pid->I_Sped,maxOuput);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e0e2:	4959      	ldr	r1, [pc, #356]	@ (800e248 <PID_Calulate+0x488>)
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7f2 ffcb 	bl	8001080 <__aeabi_fcmpgt>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d004      	beq.n	800e0fa <PID_Calulate+0x33a>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4a55      	ldr	r2, [pc, #340]	@ (800e248 <PID_Calulate+0x488>)
 800e0f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e0f8:	e00d      	b.n	800e116 <PID_Calulate+0x356>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e100:	4952      	ldr	r1, [pc, #328]	@ (800e24c <PID_Calulate+0x48c>)
 800e102:	4618      	mov	r0, r3
 800e104:	f7f2 ff9e 	bl	8001044 <__aeabi_fcmplt>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d003      	beq.n	800e116 <PID_Calulate+0x356>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4a4e      	ldr	r2, [pc, #312]	@ (800e24c <PID_Calulate+0x48c>)
 800e112:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                // Calculate Ouput
                pid->Output_Sped = pid->lastOutput_Sped
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
                                   + pid->P_Sped + pid->I_Sped + pid->D_Sped;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e122:	4619      	mov	r1, r3
 800e124:	4610      	mov	r0, r2
 800e126:	f7f2 fce7 	bl	8000af8 <__addsf3>
 800e12a:	4603      	mov	r3, r0
 800e12c:	461a      	mov	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e134:	4619      	mov	r1, r3
 800e136:	4610      	mov	r0, r2
 800e138:	f7f2 fcde 	bl	8000af8 <__addsf3>
 800e13c:	4603      	mov	r3, r0
 800e13e:	461a      	mov	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e146:	4619      	mov	r1, r3
 800e148:	4610      	mov	r0, r2
 800e14a:	f7f2 fcd5 	bl	8000af8 <__addsf3>
 800e14e:	4603      	mov	r3, r0
 800e150:	461a      	mov	r2, r3
                pid->Output_Sped = pid->lastOutput_Sped
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

                //Litmit Ouput
                LimitMax(pid->Output_Sped,maxOuput);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e15e:	493a      	ldr	r1, [pc, #232]	@ (800e248 <PID_Calulate+0x488>)
 800e160:	4618      	mov	r0, r3
 800e162:	f7f2 ff8d 	bl	8001080 <__aeabi_fcmpgt>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d004      	beq.n	800e176 <PID_Calulate+0x3b6>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a36      	ldr	r2, [pc, #216]	@ (800e248 <PID_Calulate+0x488>)
 800e170:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800e174:	e00d      	b.n	800e192 <PID_Calulate+0x3d2>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e17c:	4933      	ldr	r1, [pc, #204]	@ (800e24c <PID_Calulate+0x48c>)
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f2 ff60 	bl	8001044 <__aeabi_fcmplt>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <PID_Calulate+0x3d2>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4a2f      	ldr	r2, [pc, #188]	@ (800e24c <PID_Calulate+0x48c>)
 800e18e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

                // Update feedback
                pid->lastOutput_Sped = pid->Output_Sped;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                pid->E1_Sped = pid->E_Sped;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	661a      	str	r2, [r3, #96]	@ 0x60

                // Output
                pid->Motor_Duty = (int16_t)round(pid->Output_Sped);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7f2 f933 	bl	8000418 <__aeabi_f2d>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f000 fedd 	bl	800ef78 <round>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	f7f2 fc19 	bl	80009fc <__aeabi_d2iz>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	b21a      	sxth	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

                PID_Motor_Ctrl(pid->Motor_Duty);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	db08      	blt.n	800e1f0 <PID_Calulate+0x430>
 800e1de:	4b1c      	ldr	r3, [pc, #112]	@ (800e250 <PID_Calulate+0x490>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	635a      	str	r2, [r3, #52]	@ 0x34
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800e1ea:	4b19      	ldr	r3, [pc, #100]	@ (800e250 <PID_Calulate+0x490>)
 800e1ec:	639a      	str	r2, [r3, #56]	@ 0x38

        pid->Motor_Duty = (pid->Dir == 0) ? ((int16_t)pid->Value_Set * Duty_scale) : -((int16_t)pid->Value_Set * Duty_scale);
        LimitMax(pid->Motor_Duty, maxOuput);
        PID_Motor_Ctrl(pid->Motor_Duty);
    }
}
 800e1ee:	e35b      	b.n	800e8a8 <PID_Calulate+0xae8>
                PID_Motor_Ctrl(pid->Motor_Duty);
 800e1f0:	4b17      	ldr	r3, [pc, #92]	@ (800e250 <PID_Calulate+0x490>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	639a      	str	r2, [r3, #56]	@ 0x38
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e1fc:	425a      	negs	r2, r3
 800e1fe:	4b14      	ldr	r3, [pc, #80]	@ (800e250 <PID_Calulate+0x490>)
 800e200:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800e202:	e351      	b.n	800e8a8 <PID_Calulate+0xae8>
            else if(first_Lock == 1)
 800e204:	4b0f      	ldr	r3, [pc, #60]	@ (800e244 <PID_Calulate+0x484>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	f040 834d 	bne.w	800e8a8 <PID_Calulate+0xae8>
                if(pid->PPR >= 100)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800e214:	2b63      	cmp	r3, #99	@ 0x63
 800e216:	d921      	bls.n	800e25c <PID_Calulate+0x49c>
                    pid->Kp_Pos = (float)(1.6f - (float)pid->Value_Set/10);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6a1b      	ldr	r3, [r3, #32]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f2 fd1f 	bl	8000c60 <__aeabi_i2f>
 800e222:	4603      	mov	r3, r0
 800e224:	490b      	ldr	r1, [pc, #44]	@ (800e254 <PID_Calulate+0x494>)
 800e226:	4618      	mov	r0, r3
 800e228:	f7f2 fe22 	bl	8000e70 <__aeabi_fdiv>
 800e22c:	4603      	mov	r3, r0
 800e22e:	4619      	mov	r1, r3
 800e230:	4809      	ldr	r0, [pc, #36]	@ (800e258 <PID_Calulate+0x498>)
 800e232:	f7f2 fc5f 	bl	8000af4 <__aeabi_fsub>
 800e236:	4603      	mov	r3, r0
 800e238:	461a      	mov	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	679a      	str	r2, [r3, #120]	@ 0x78
 800e23e:	e01c      	b.n	800e27a <PID_Calulate+0x4ba>
 800e240:	466a6000 	.word	0x466a6000
 800e244:	20002d50 	.word	0x20002d50
 800e248:	4478c000 	.word	0x4478c000
 800e24c:	c478c000 	.word	0xc478c000
 800e250:	40012c00 	.word	0x40012c00
 800e254:	41200000 	.word	0x41200000
 800e258:	3fcccccd 	.word	0x3fcccccd
                    pid->Kp_Pos = (float)(16.0f - pid->Value_Set);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a1b      	ldr	r3, [r3, #32]
 800e260:	4618      	mov	r0, r3
 800e262:	f7f2 fcfd 	bl	8000c60 <__aeabi_i2f>
 800e266:	4603      	mov	r3, r0
 800e268:	4619      	mov	r1, r3
 800e26a:	f04f 4083 	mov.w	r0, #1098907648	@ 0x41800000
 800e26e:	f7f2 fc41 	bl	8000af4 <__aeabi_fsub>
 800e272:	4603      	mov	r3, r0
 800e274:	461a      	mov	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	679a      	str	r2, [r3, #120]	@ 0x78
                pid->E_Sped = pid->V_set - pid->Speed;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e282:	4619      	mov	r1, r3
 800e284:	4610      	mov	r0, r2
 800e286:	f7f2 fc35 	bl	8000af4 <__aeabi_fsub>
 800e28a:	4603      	mov	r3, r0
 800e28c:	461a      	mov	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	659a      	str	r2, [r3, #88]	@ 0x58
                pid->E_Pos = (pid->EnC_set - pid->EnC_now);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7f2 fcdf 	bl	8000c60 <__aeabi_i2f>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	655a      	str	r2, [r3, #84]	@ 0x54
                pid->P_Pos = pid->Kp_Pos * pid->E_Pos;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	f7f2 fd28 	bl	8000d08 <__aeabi_fmul>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                pid->I_Pos += pid->Ki_Pos * pid->E_Pos * pid->Delta_T;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7f2 fd18 	bl	8000d08 <__aeabi_fmul>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	461a      	mov	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f7f2 fd10 	bl	8000d08 <__aeabi_fmul>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f7f2 fc03 	bl	8000af8 <__addsf3>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
                LimitMax(pid->I_Pos,maxOuput);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e302:	4993      	ldr	r1, [pc, #588]	@ (800e550 <PID_Calulate+0x790>)
 800e304:	4618      	mov	r0, r3
 800e306:	f7f2 febb 	bl	8001080 <__aeabi_fcmpgt>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d004      	beq.n	800e31a <PID_Calulate+0x55a>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a8f      	ldr	r2, [pc, #572]	@ (800e550 <PID_Calulate+0x790>)
 800e314:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800e318:	e00d      	b.n	800e336 <PID_Calulate+0x576>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e320:	498c      	ldr	r1, [pc, #560]	@ (800e554 <PID_Calulate+0x794>)
 800e322:	4618      	mov	r0, r3
 800e324:	f7f2 fe8e 	bl	8001044 <__aeabi_fcmplt>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d003      	beq.n	800e336 <PID_Calulate+0x576>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a88      	ldr	r2, [pc, #544]	@ (800e554 <PID_Calulate+0x794>)
 800e332:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
                pid->D_Pos = -(pid->Kd_Pos * (pid->EnC_now - pid->lastEnC) / pid->Delta_T);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	4618      	mov	r0, r3
 800e348:	f7f2 fc8a 	bl	8000c60 <__aeabi_i2f>
 800e34c:	4603      	mov	r3, r0
 800e34e:	4619      	mov	r1, r3
 800e350:	4620      	mov	r0, r4
 800e352:	f7f2 fcd9 	bl	8000d08 <__aeabi_fmul>
 800e356:	4603      	mov	r3, r0
 800e358:	461a      	mov	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e35e:	4619      	mov	r1, r3
 800e360:	4610      	mov	r0, r2
 800e362:	f7f2 fd85 	bl	8000e70 <__aeabi_fdiv>
 800e366:	4603      	mov	r3, r0
 800e368:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                pid->Output_Pos = pid->P_Pos + pid->I_Pos + pid->D_Pos;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e37e:	4619      	mov	r1, r3
 800e380:	4610      	mov	r0, r2
 800e382:	f7f2 fbb9 	bl	8000af8 <__addsf3>
 800e386:	4603      	mov	r3, r0
 800e388:	461a      	mov	r2, r3
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e390:	4619      	mov	r1, r3
 800e392:	4610      	mov	r0, r2
 800e394:	f7f2 fbb0 	bl	8000af8 <__addsf3>
 800e398:	4603      	mov	r3, r0
 800e39a:	461a      	mov	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                LimitMax(pid->Output_Pos,(maxOuput+5)/1.2);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7f2 f835 	bl	8000418 <__aeabi_f2d>
 800e3ae:	a364      	add	r3, pc, #400	@ (adr r3, 800e540 <PID_Calulate+0x780>)
 800e3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b4:	f7f2 fb18 	bl	80009e8 <__aeabi_dcmpgt>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d004      	beq.n	800e3c8 <PID_Calulate+0x608>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a65      	ldr	r2, [pc, #404]	@ (800e558 <PID_Calulate+0x798>)
 800e3c2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800e3c6:	e011      	b.n	800e3ec <PID_Calulate+0x62c>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7f2 f822 	bl	8000418 <__aeabi_f2d>
 800e3d4:	a35c      	add	r3, pc, #368	@ (adr r3, 800e548 <PID_Calulate+0x788>)
 800e3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3da:	f7f2 fae7 	bl	80009ac <__aeabi_dcmplt>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d003      	beq.n	800e3ec <PID_Calulate+0x62c>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a5d      	ldr	r2, [pc, #372]	@ (800e55c <PID_Calulate+0x79c>)
 800e3e8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                pid->lastEnC = pid->EnC_now;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	641a      	str	r2, [r3, #64]	@ 0x40
                pid->E1_Pos = pid->E_Pos;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	65da      	str	r2, [r3, #92]	@ 0x5c
                pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e402:	4618      	mov	r0, r3
 800e404:	f7f2 f808 	bl	8000418 <__aeabi_f2d>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4610      	mov	r0, r2
 800e40e:	4619      	mov	r1, r3
 800e410:	f000 fdb2 	bl	800ef78 <round>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4610      	mov	r0, r2
 800e41a:	4619      	mov	r1, r3
 800e41c:	f7f2 faee 	bl	80009fc <__aeabi_d2iz>
 800e420:	4603      	mov	r3, r0
 800e422:	b21a      	sxth	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
                PID_Motor_Ctrl(pid->Motor_Duty);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e430:	2b00      	cmp	r3, #0
 800e432:	db08      	blt.n	800e446 <PID_Calulate+0x686>
 800e434:	4b4a      	ldr	r3, [pc, #296]	@ (800e560 <PID_Calulate+0x7a0>)
 800e436:	2200      	movs	r2, #0
 800e438:	635a      	str	r2, [r3, #52]	@ 0x34
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800e440:	4b47      	ldr	r3, [pc, #284]	@ (800e560 <PID_Calulate+0x7a0>)
 800e442:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e444:	e230      	b.n	800e8a8 <PID_Calulate+0xae8>
                PID_Motor_Ctrl(pid->Motor_Duty);
 800e446:	4b46      	ldr	r3, [pc, #280]	@ (800e560 <PID_Calulate+0x7a0>)
 800e448:	2200      	movs	r2, #0
 800e44a:	639a      	str	r2, [r3, #56]	@ 0x38
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e452:	425a      	negs	r2, r3
 800e454:	4b42      	ldr	r3, [pc, #264]	@ (800e560 <PID_Calulate+0x7a0>)
 800e456:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800e458:	e226      	b.n	800e8a8 <PID_Calulate+0xae8>
            pid->V_set = 0U;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f04f 0200 	mov.w	r2, #0
 800e460:	625a      	str	r2, [r3, #36]	@ 0x24
            pid->EnC_now = pid->EnC_set;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	63da      	str	r2, [r3, #60]	@ 0x3c
            pid->E_Pos = 0;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f04f 0200 	mov.w	r2, #0
 800e470:	655a      	str	r2, [r3, #84]	@ 0x54
            pid->E1_Pos = pid->E2_Pos = pid->E_Pos;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	665a      	str	r2, [r3, #100]	@ 0x64
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	65da      	str	r2, [r3, #92]	@ 0x5c
            pid->E_Sped = 0;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f04f 0200 	mov.w	r2, #0
 800e488:	659a      	str	r2, [r3, #88]	@ 0x58
            pid->E2_Sped = pid->E1_Sped = pid->E_Sped;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	661a      	str	r2, [r3, #96]	@ 0x60
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	669a      	str	r2, [r3, #104]	@ 0x68
            pid->P_Sped = pid->I_Sped = pid->D_Sped = 0.0f;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f04f 0200 	mov.w	r2, #0
 800e4a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
            pid->Output_Sped = 0.0f;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f04f 0200 	mov.w	r2, #0
 800e4c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
            pid->lastOutput_Sped = pid->Output_Sped;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
            pid->Motor_Duty = (int16_t)pid->Output_Sped;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7f2 fddb 	bl	8001094 <__aeabi_f2iz>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	b21a      	sxth	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            PID_Motor_Ctrl(pid->Motor_Duty);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	db08      	blt.n	800e504 <PID_Calulate+0x744>
 800e4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800e560 <PID_Calulate+0x7a0>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	635a      	str	r2, [r3, #52]	@ 0x34
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800e4fe:	4b18      	ldr	r3, [pc, #96]	@ (800e560 <PID_Calulate+0x7a0>)
 800e500:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e502:	e1d1      	b.n	800e8a8 <PID_Calulate+0xae8>
            PID_Motor_Ctrl(pid->Motor_Duty);
 800e504:	4b16      	ldr	r3, [pc, #88]	@ (800e560 <PID_Calulate+0x7a0>)
 800e506:	2200      	movs	r2, #0
 800e508:	639a      	str	r2, [r3, #56]	@ 0x38
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e510:	425a      	negs	r2, r3
 800e512:	4b13      	ldr	r3, [pc, #76]	@ (800e560 <PID_Calulate+0x7a0>)
 800e514:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800e516:	e1c7      	b.n	800e8a8 <PID_Calulate+0xae8>
    else if(pid->mode == PID_Position)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	7c5b      	ldrb	r3, [r3, #17]
 800e51c:	2b09      	cmp	r3, #9
 800e51e:	f040 812b 	bne.w	800e778 <PID_Calulate+0x9b8>
        if(pid->Time_step < 15)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e528:	b29b      	uxth	r3, r3
 800e52a:	2b0e      	cmp	r3, #14
 800e52c:	d81a      	bhi.n	800e564 <PID_Calulate+0x7a4>
            pid->Kd_Pos = pid->Kd_def;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800e538:	e03d      	b.n	800e5b6 <PID_Calulate+0x7f6>
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w
 800e540:	aaaaaaab 	.word	0xaaaaaaab
 800e544:	408a0aaa 	.word	0x408a0aaa
 800e548:	aaaaaaab 	.word	0xaaaaaaab
 800e54c:	c08a0aaa 	.word	0xc08a0aaa
 800e550:	4478c000 	.word	0x4478c000
 800e554:	c478c000 	.word	0xc478c000
 800e558:	44505555 	.word	0x44505555
 800e55c:	c4505555 	.word	0xc4505555
 800e560:	40012c00 	.word	0x40012c00
        else if(pid->Time_step >= 15)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	2b0e      	cmp	r3, #14
 800e56e:	d922      	bls.n	800e5b6 <PID_Calulate+0x7f6>
            pid->Kd_Pos = pid->Kd_def/(pid->Time_step*0.1);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e574:	4618      	mov	r0, r3
 800e576:	f7f1 ff4f 	bl	8000418 <__aeabi_f2d>
 800e57a:	4604      	mov	r4, r0
 800e57c:	460d      	mov	r5, r1
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e584:	b29b      	uxth	r3, r3
 800e586:	4618      	mov	r0, r3
 800e588:	f7f1 ff34 	bl	80003f4 <__aeabi_i2d>
 800e58c:	a39e      	add	r3, pc, #632	@ (adr r3, 800e808 <PID_Calulate+0xa48>)
 800e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e592:	f7f1 ff99 	bl	80004c8 <__aeabi_dmul>
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4620      	mov	r0, r4
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f2 f8bd 	bl	800071c <__aeabi_ddiv>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	f7f2 fa4f 	bl	8000a4c <__aeabi_d2f>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        pid->EnC_set = pid->Value_Set * 4;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	009a      	lsls	r2, r3, #2
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->E_Pos = (pid->EnC_set - pid->EnC_now);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7f2 fb48 	bl	8000c60 <__aeabi_i2f>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	655a      	str	r2, [r3, #84]	@ 0x54
        pid->P_Pos = pid->Kp_Pos * pid->E_Pos;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	f7f2 fb91 	bl	8000d08 <__aeabi_fmul>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pid->I_Pos += pid->Ki_Pos * pid->E_Pos * pid->Delta_T;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5fe:	4619      	mov	r1, r3
 800e600:	4610      	mov	r0, r2
 800e602:	f7f2 fb81 	bl	8000d08 <__aeabi_fmul>
 800e606:	4603      	mov	r3, r0
 800e608:	461a      	mov	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e60e:	4619      	mov	r1, r3
 800e610:	4610      	mov	r0, r2
 800e612:	f7f2 fb79 	bl	8000d08 <__aeabi_fmul>
 800e616:	4603      	mov	r3, r0
 800e618:	4619      	mov	r1, r3
 800e61a:	4620      	mov	r0, r4
 800e61c:	f7f2 fa6c 	bl	8000af8 <__addsf3>
 800e620:	4603      	mov	r3, r0
 800e622:	461a      	mov	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        LimitMax(pid->I_Pos,maxOuput);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e630:	4977      	ldr	r1, [pc, #476]	@ (800e810 <PID_Calulate+0xa50>)
 800e632:	4618      	mov	r0, r3
 800e634:	f7f2 fd24 	bl	8001080 <__aeabi_fcmpgt>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d004      	beq.n	800e648 <PID_Calulate+0x888>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a73      	ldr	r2, [pc, #460]	@ (800e810 <PID_Calulate+0xa50>)
 800e642:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800e646:	e00d      	b.n	800e664 <PID_Calulate+0x8a4>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e64e:	4971      	ldr	r1, [pc, #452]	@ (800e814 <PID_Calulate+0xa54>)
 800e650:	4618      	mov	r0, r3
 800e652:	f7f2 fcf7 	bl	8001044 <__aeabi_fcmplt>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d003      	beq.n	800e664 <PID_Calulate+0x8a4>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a6d      	ldr	r2, [pc, #436]	@ (800e814 <PID_Calulate+0xa54>)
 800e660:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pid->D_Pos = -(pid->Kd_Pos * (pid->EnC_now - pid->lastEnC) / pid->Delta_T);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e672:	1ad3      	subs	r3, r2, r3
 800e674:	4618      	mov	r0, r3
 800e676:	f7f2 faf3 	bl	8000c60 <__aeabi_i2f>
 800e67a:	4603      	mov	r3, r0
 800e67c:	4619      	mov	r1, r3
 800e67e:	4620      	mov	r0, r4
 800e680:	f7f2 fb42 	bl	8000d08 <__aeabi_fmul>
 800e684:	4603      	mov	r3, r0
 800e686:	461a      	mov	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e68c:	4619      	mov	r1, r3
 800e68e:	4610      	mov	r0, r2
 800e690:	f7f2 fbee 	bl	8000e70 <__aeabi_fdiv>
 800e694:	4603      	mov	r3, r0
 800e696:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pid->Output_Pos = pid->P_Pos + pid->I_Pos + pid->D_Pos;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	f7f2 fa22 	bl	8000af8 <__addsf3>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f7f2 fa19 	bl	8000af8 <__addsf3>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        LimitMax(pid->Output_Pos,maxOuput);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e6d6:	494e      	ldr	r1, [pc, #312]	@ (800e810 <PID_Calulate+0xa50>)
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7f2 fcd1 	bl	8001080 <__aeabi_fcmpgt>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d004      	beq.n	800e6ee <PID_Calulate+0x92e>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	4a4a      	ldr	r2, [pc, #296]	@ (800e810 <PID_Calulate+0xa50>)
 800e6e8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800e6ec:	e00d      	b.n	800e70a <PID_Calulate+0x94a>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e6f4:	4947      	ldr	r1, [pc, #284]	@ (800e814 <PID_Calulate+0xa54>)
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7f2 fca4 	bl	8001044 <__aeabi_fcmplt>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d003      	beq.n	800e70a <PID_Calulate+0x94a>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	4a43      	ldr	r2, [pc, #268]	@ (800e814 <PID_Calulate+0xa54>)
 800e706:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        pid->lastEnC = pid->EnC_now;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	641a      	str	r2, [r3, #64]	@ 0x40
        pid->E1_Pos = pid->E_Pos;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	65da      	str	r2, [r3, #92]	@ 0x5c
        pid->Motor_Duty = (int16_t)round(pid->Output_Pos);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e720:	4618      	mov	r0, r3
 800e722:	f7f1 fe79 	bl	8000418 <__aeabi_f2d>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	4610      	mov	r0, r2
 800e72c:	4619      	mov	r1, r3
 800e72e:	f000 fc23 	bl	800ef78 <round>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4610      	mov	r0, r2
 800e738:	4619      	mov	r1, r3
 800e73a:	f7f2 f95f 	bl	80009fc <__aeabi_d2iz>
 800e73e:	4603      	mov	r3, r0
 800e740:	b21a      	sxth	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
        PID_Motor_Ctrl(pid->Motor_Duty);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e74e:	2b00      	cmp	r3, #0
 800e750:	db08      	blt.n	800e764 <PID_Calulate+0x9a4>
 800e752:	4b31      	ldr	r3, [pc, #196]	@ (800e818 <PID_Calulate+0xa58>)
 800e754:	2200      	movs	r2, #0
 800e756:	635a      	str	r2, [r3, #52]	@ 0x34
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800e75e:	4b2e      	ldr	r3, [pc, #184]	@ (800e818 <PID_Calulate+0xa58>)
 800e760:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e762:	e0a1      	b.n	800e8a8 <PID_Calulate+0xae8>
        PID_Motor_Ctrl(pid->Motor_Duty);
 800e764:	4b2c      	ldr	r3, [pc, #176]	@ (800e818 <PID_Calulate+0xa58>)
 800e766:	2200      	movs	r2, #0
 800e768:	639a      	str	r2, [r3, #56]	@ 0x38
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e770:	425a      	negs	r2, r3
 800e772:	4b29      	ldr	r3, [pc, #164]	@ (800e818 <PID_Calulate+0xa58>)
 800e774:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800e776:	e097      	b.n	800e8a8 <PID_Calulate+0xae8>
    else if(pid->mode == None_PID)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	7c5b      	ldrb	r3, [r3, #17]
 800e77c:	2b05      	cmp	r3, #5
 800e77e:	f040 8093 	bne.w	800e8a8 <PID_Calulate+0xae8>
        pid->EnC_now = pid->EnC_set;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	63da      	str	r2, [r3, #60]	@ 0x3c
        pid->E_Pos = 0;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f04f 0200 	mov.w	r2, #0
 800e790:	655a      	str	r2, [r3, #84]	@ 0x54
        pid->E1_Pos = pid->E2_Pos = pid->E_Pos;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	665a      	str	r2, [r3, #100]	@ 0x64
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        pid->P_Sped = pid->I_Sped = pid->D_Sped = 0.0f;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f04f 0200 	mov.w	r2, #0
 800e7a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        pid->Output_Sped = 0.0f;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f04f 0200 	mov.w	r2, #0
 800e7ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        pid->lastOutput_Sped = pid->Output_Sped;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        pid->Motor_Duty = (pid->Dir == 0) ? ((int16_t)pid->Value_Set * Duty_scale) : -((int16_t)pid->Value_Set * Duty_scale);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	7d1b      	ldrb	r3, [r3, #20]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d11e      	bne.n	800e820 <PID_Calulate+0xa60>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6a1b      	ldr	r3, [r3, #32]
 800e7e6:	b21b      	sxth	r3, r3
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f2 fa39 	bl	8000c60 <__aeabi_i2f>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	490a      	ldr	r1, [pc, #40]	@ (800e81c <PID_Calulate+0xa5c>)
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7f2 fa88 	bl	8000d08 <__aeabi_fmul>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7f2 fc4a 	bl	8001094 <__aeabi_f2iz>
 800e800:	4603      	mov	r3, r0
 800e802:	b21b      	sxth	r3, r3
 800e804:	e01f      	b.n	800e846 <PID_Calulate+0xa86>
 800e806:	bf00      	nop
 800e808:	9999999a 	.word	0x9999999a
 800e80c:	3fb99999 	.word	0x3fb99999
 800e810:	4478c000 	.word	0x4478c000
 800e814:	c478c000 	.word	0xc478c000
 800e818:	40012c00 	.word	0x40012c00
 800e81c:	407eb852 	.word	0x407eb852
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6a1b      	ldr	r3, [r3, #32]
 800e824:	b21b      	sxth	r3, r3
 800e826:	4618      	mov	r0, r3
 800e828:	f7f2 fa1a 	bl	8000c60 <__aeabi_i2f>
 800e82c:	4603      	mov	r3, r0
 800e82e:	4920      	ldr	r1, [pc, #128]	@ (800e8b0 <PID_Calulate+0xaf0>)
 800e830:	4618      	mov	r0, r3
 800e832:	f7f2 fa69 	bl	8000d08 <__aeabi_fmul>
 800e836:	4603      	mov	r3, r0
 800e838:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7f2 fc29 	bl	8001094 <__aeabi_f2iz>
 800e842:	4603      	mov	r3, r0
 800e844:	b21b      	sxth	r3, r3
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	f8a2 3050 	strh.w	r3, [r2, #80]	@ 0x50
        LimitMax(pid->Motor_Duty, maxOuput);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e852:	f5b3 7f79 	cmp.w	r3, #996	@ 0x3e4
 800e856:	db05      	blt.n	800e864 <PID_Calulate+0xaa4>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800e85e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 800e862:	e00a      	b.n	800e87a <PID_Calulate+0xaba>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e86a:	f513 7f79 	cmn.w	r3, #996	@ 0x3e4
 800e86e:	dc04      	bgt.n	800e87a <PID_Calulate+0xaba>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f64f 421d 	movw	r2, #64541	@ 0xfc1d
 800e876:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
        PID_Motor_Ctrl(pid->Motor_Duty);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e880:	2b00      	cmp	r3, #0
 800e882:	db08      	blt.n	800e896 <PID_Calulate+0xad6>
 800e884:	4b0b      	ldr	r3, [pc, #44]	@ (800e8b4 <PID_Calulate+0xaf4>)
 800e886:	2200      	movs	r2, #0
 800e888:	635a      	str	r2, [r3, #52]	@ 0x34
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 800e890:	4b08      	ldr	r3, [pc, #32]	@ (800e8b4 <PID_Calulate+0xaf4>)
 800e892:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e894:	e008      	b.n	800e8a8 <PID_Calulate+0xae8>
        PID_Motor_Ctrl(pid->Motor_Duty);
 800e896:	4b07      	ldr	r3, [pc, #28]	@ (800e8b4 <PID_Calulate+0xaf4>)
 800e898:	2200      	movs	r2, #0
 800e89a:	639a      	str	r2, [r3, #56]	@ 0x38
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	@ 0x50
 800e8a2:	425a      	negs	r2, r3
 800e8a4:	4b03      	ldr	r3, [pc, #12]	@ (800e8b4 <PID_Calulate+0xaf4>)
 800e8a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800e8a8:	bf00      	nop
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b0:	407eb852 	.word	0x407eb852
 800e8b4:	40012c00 	.word	0x40012c00

0800e8b8 <PID_Init>:

void PID_Init(PID_typedef *pid)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
    pid->f_param_init = PID_param_init;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a08      	ldr	r2, [pc, #32]	@ (800e8e4 <PID_Init+0x2c>)
 800e8c4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    pid->f_pid_set    = PID_set;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a07      	ldr	r2, [pc, #28]	@ (800e8e8 <PID_Init+0x30>)
 800e8cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    pid->f_cal_pid	  = PID_Calulate;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a06      	ldr	r2, [pc, #24]	@ (800e8ec <PID_Init+0x34>)
 800e8d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800e8d8:	bf00      	nop
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bc80      	pop	{r7}
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	0800da01 	.word	0x0800da01
 800e8e8:	0800dd3d 	.word	0x0800dd3d
 800e8ec:	0800ddc1 	.word	0x0800ddc1

0800e8f0 <HID_param_init>:
USBD_CUSTOM_HID_HandleTypeDef     *hhid1;

dataHID_typedef usbPID;
/* Send data to PC */
static void HID_param_init(dataHID_typedef *hid)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
//    static uint8_t ID[12] = {'D','F','E','E','.','P','I','D','V','1','.','1'};
    hid->isConnected = 0;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	709a      	strb	r2, [r3, #2]
    hid->timeOut = 0;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	801a      	strh	r2, [r3, #0]
    hid->header[0] = 'N';
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	224e      	movs	r2, #78	@ 0x4e
 800e908:	70da      	strb	r2, [r3, #3]
    hid->header[1] = 'A';
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2241      	movs	r2, #65	@ 0x41
 800e90e:	711a      	strb	r2, [r3, #4]

    hid->buffer[0] = &hid->header[0];
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	1cda      	adds	r2, r3, #3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	609a      	str	r2, [r3, #8]
    hid->buffer[1] = &hid->header[1];
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	1d1a      	adds	r2, r3, #4
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	60da      	str	r2, [r3, #12]

    hid->buffer[2] = (uint8_t *)&PID.ID;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a70      	ldr	r2, [pc, #448]	@ (800eae4 <HID_param_init+0x1f4>)
 800e924:	611a      	str	r2, [r3, #16]

    hid->buffer[3] = (uint8_t *)&PID.mode;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a6f      	ldr	r2, [pc, #444]	@ (800eae8 <HID_param_init+0x1f8>)
 800e92a:	615a      	str	r2, [r3, #20]

    hid->buffer[4] = (uint8_t *)&PID.Dir;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a6f      	ldr	r2, [pc, #444]	@ (800eaec <HID_param_init+0x1fc>)
 800e930:	619a      	str	r2, [r3, #24]

    hid->buffer[5] = (uint8_t *)&PID.V_set;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a6e      	ldr	r2, [pc, #440]	@ (800eaf0 <HID_param_init+0x200>)
 800e936:	61da      	str	r2, [r3, #28]
    hid->buffer[6] = (uint8_t *)&PID.V_set + 1;
 800e938:	4a6e      	ldr	r2, [pc, #440]	@ (800eaf4 <HID_param_init+0x204>)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	621a      	str	r2, [r3, #32]
    hid->buffer[7] = (uint8_t *)&PID.V_set + 2;
 800e93e:	4a6e      	ldr	r2, [pc, #440]	@ (800eaf8 <HID_param_init+0x208>)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	625a      	str	r2, [r3, #36]	@ 0x24
    hid->buffer[8] = (uint8_t *)&PID.V_set + 3;
 800e944:	4a6d      	ldr	r2, [pc, #436]	@ (800eafc <HID_param_init+0x20c>)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	629a      	str	r2, [r3, #40]	@ 0x28

    hid->buffer[9]  = (uint8_t *)&PID.Speed;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a6c      	ldr	r2, [pc, #432]	@ (800eb00 <HID_param_init+0x210>)
 800e94e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hid->buffer[10] = (uint8_t *)&PID.Speed + 1;
 800e950:	4a6c      	ldr	r2, [pc, #432]	@ (800eb04 <HID_param_init+0x214>)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	631a      	str	r2, [r3, #48]	@ 0x30
    hid->buffer[11] = (uint8_t *)&PID.Speed + 2;
 800e956:	4a6c      	ldr	r2, [pc, #432]	@ (800eb08 <HID_param_init+0x218>)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	635a      	str	r2, [r3, #52]	@ 0x34
    hid->buffer[12] = (uint8_t *)&PID.Speed + 3;
 800e95c:	4a6b      	ldr	r2, [pc, #428]	@ (800eb0c <HID_param_init+0x21c>)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	639a      	str	r2, [r3, #56]	@ 0x38

    hid->buffer[13] = (uint8_t *)&PID.V_now;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a6a      	ldr	r2, [pc, #424]	@ (800eb10 <HID_param_init+0x220>)
 800e966:	63da      	str	r2, [r3, #60]	@ 0x3c

    hid->buffer[14] = (uint8_t *)&PID.ptlCtrl;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4a6a      	ldr	r2, [pc, #424]	@ (800eb14 <HID_param_init+0x224>)
 800e96c:	641a      	str	r2, [r3, #64]	@ 0x40

    hid->buffer[15] = (uint8_t *)&PID.PPR;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a69      	ldr	r2, [pc, #420]	@ (800eb18 <HID_param_init+0x228>)
 800e972:	645a      	str	r2, [r3, #68]	@ 0x44
    hid->buffer[16] = (uint8_t *)&PID.PPR + 1;
 800e974:	4a69      	ldr	r2, [pc, #420]	@ (800eb1c <HID_param_init+0x22c>)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	649a      	str	r2, [r3, #72]	@ 0x48

    hid->buffer[17] = (uint8_t *)&PID.RPM;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a68      	ldr	r2, [pc, #416]	@ (800eb20 <HID_param_init+0x230>)
 800e97e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hid->buffer[18] = (uint8_t *)&PID.RPM + 1;
 800e980:	4a68      	ldr	r2, [pc, #416]	@ (800eb24 <HID_param_init+0x234>)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	651a      	str	r2, [r3, #80]	@ 0x50

    hid->buffer[19] = (uint8_t *)&PID.Kp_def;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a67      	ldr	r2, [pc, #412]	@ (800eb28 <HID_param_init+0x238>)
 800e98a:	655a      	str	r2, [r3, #84]	@ 0x54
    hid->buffer[20] = (uint8_t *)&PID.Kp_def + 1;
 800e98c:	4a67      	ldr	r2, [pc, #412]	@ (800eb2c <HID_param_init+0x23c>)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	659a      	str	r2, [r3, #88]	@ 0x58
    hid->buffer[21] = (uint8_t *)&PID.Kp_def + 2;
 800e992:	4a67      	ldr	r2, [pc, #412]	@ (800eb30 <HID_param_init+0x240>)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	65da      	str	r2, [r3, #92]	@ 0x5c
    hid->buffer[22] = (uint8_t *)&PID.Kp_def + 3;
 800e998:	4a66      	ldr	r2, [pc, #408]	@ (800eb34 <HID_param_init+0x244>)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	661a      	str	r2, [r3, #96]	@ 0x60

    hid->buffer[23] = (uint8_t *)&PID.Ki_def;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a65      	ldr	r2, [pc, #404]	@ (800eb38 <HID_param_init+0x248>)
 800e9a2:	665a      	str	r2, [r3, #100]	@ 0x64
    hid->buffer[24] = (uint8_t *)&PID.Ki_def + 1;
 800e9a4:	4a65      	ldr	r2, [pc, #404]	@ (800eb3c <HID_param_init+0x24c>)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	669a      	str	r2, [r3, #104]	@ 0x68
    hid->buffer[25] = (uint8_t *)&PID.Ki_def + 2;
 800e9aa:	4a65      	ldr	r2, [pc, #404]	@ (800eb40 <HID_param_init+0x250>)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    hid->buffer[26] = (uint8_t *)&PID.Ki_def + 3;
 800e9b0:	4a64      	ldr	r2, [pc, #400]	@ (800eb44 <HID_param_init+0x254>)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	671a      	str	r2, [r3, #112]	@ 0x70

    hid->buffer[27] = (uint8_t *)&PID.Kd_def;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a63      	ldr	r2, [pc, #396]	@ (800eb48 <HID_param_init+0x258>)
 800e9ba:	675a      	str	r2, [r3, #116]	@ 0x74
    hid->buffer[28] = (uint8_t *)&PID.Kd_def + 1;
 800e9bc:	4a63      	ldr	r2, [pc, #396]	@ (800eb4c <HID_param_init+0x25c>)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	679a      	str	r2, [r3, #120]	@ 0x78
    hid->buffer[29] = (uint8_t *)&PID.Kd_def + 2;
 800e9c2:	4a63      	ldr	r2, [pc, #396]	@ (800eb50 <HID_param_init+0x260>)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	67da      	str	r2, [r3, #124]	@ 0x7c
    hid->buffer[30] = (uint8_t *)&PID.Kd_def + 3;
 800e9c8:	4a62      	ldr	r2, [pc, #392]	@ (800eb54 <HID_param_init+0x264>)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    hid->buffer[31] = (uint8_t*)&PID.Motor_Duty;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a61      	ldr	r2, [pc, #388]	@ (800eb58 <HID_param_init+0x268>)
 800e9d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hid->buffer[32] = (uint8_t*)&PID.Motor_Duty + 1;
 800e9d8:	4a60      	ldr	r2, [pc, #384]	@ (800eb5c <HID_param_init+0x26c>)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    hid->buffer[33] = (uint8_t*)&PID.E_Sped;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a5f      	ldr	r2, [pc, #380]	@ (800eb60 <HID_param_init+0x270>)
 800e9e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hid->buffer[34] = (uint8_t*)&PID.E_Sped + 1;
 800e9e8:	4a5e      	ldr	r2, [pc, #376]	@ (800eb64 <HID_param_init+0x274>)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hid->buffer[35] = (uint8_t*)&PID.E_Sped + 2;
 800e9f0:	4a5d      	ldr	r2, [pc, #372]	@ (800eb68 <HID_param_init+0x278>)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hid->buffer[36] = (uint8_t*)&PID.E_Sped + 3;
 800e9f8:	4a5c      	ldr	r2, [pc, #368]	@ (800eb6c <HID_param_init+0x27c>)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    hid->buffer[37] = (uint8_t*)&PID.EnC_set;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a5b      	ldr	r2, [pc, #364]	@ (800eb70 <HID_param_init+0x280>)
 800ea04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    hid->buffer[38] = (uint8_t*)&PID.EnC_set + 1;
 800ea08:	4a5a      	ldr	r2, [pc, #360]	@ (800eb74 <HID_param_init+0x284>)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    hid->buffer[39] = (uint8_t*)&PID.EnC_set + 2;
 800ea10:	4a59      	ldr	r2, [pc, #356]	@ (800eb78 <HID_param_init+0x288>)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hid->buffer[40] = (uint8_t*)&PID.EnC_set + 3;
 800ea18:	4a58      	ldr	r2, [pc, #352]	@ (800eb7c <HID_param_init+0x28c>)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    hid->buffer[41] = (uint8_t*)&PID.EnC_now;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a57      	ldr	r2, [pc, #348]	@ (800eb80 <HID_param_init+0x290>)
 800ea24:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    hid->buffer[42] = (uint8_t*)&PID.EnC_now + 1;
 800ea28:	4a56      	ldr	r2, [pc, #344]	@ (800eb84 <HID_param_init+0x294>)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    hid->buffer[43] = (uint8_t*)&PID.EnC_now + 2;
 800ea30:	4a55      	ldr	r2, [pc, #340]	@ (800eb88 <HID_param_init+0x298>)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    hid->buffer[44] = (uint8_t*)&PID.EnC_now + 3;
 800ea38:	4a54      	ldr	r2, [pc, #336]	@ (800eb8c <HID_param_init+0x29c>)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

    hid->buffer[45] = (uint8_t*)&PID.targetPos;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	4a53      	ldr	r2, [pc, #332]	@ (800eb90 <HID_param_init+0x2a0>)
 800ea44:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    hid->buffer[46] = (uint8_t*)&PID.targetPos + 1;
 800ea48:	4a52      	ldr	r2, [pc, #328]	@ (800eb94 <HID_param_init+0x2a4>)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    hid->buffer[47] = (uint8_t*)&PID.targetPos + 2;
 800ea50:	4a51      	ldr	r2, [pc, #324]	@ (800eb98 <HID_param_init+0x2a8>)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    hid->buffer[48] = (uint8_t*)&PID.targetPos + 3;
 800ea58:	4a50      	ldr	r2, [pc, #320]	@ (800eb9c <HID_param_init+0x2ac>)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    hid->buffer[49] = (uint8_t*)&PID.Time_step;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	4a4f      	ldr	r2, [pc, #316]	@ (800eba0 <HID_param_init+0x2b0>)
 800ea64:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    hid->buffer[50] = (uint8_t*)&PID.Time_step + 1;
 800ea68:	4a4e      	ldr	r2, [pc, #312]	@ (800eba4 <HID_param_init+0x2b4>)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    hid->buffer[51] = (uint8_t*)&PID.scalefactor;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4a4d      	ldr	r2, [pc, #308]	@ (800eba8 <HID_param_init+0x2b8>)
 800ea74:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

    hid->buffer[52] = (uint8_t*)&PID.E_Pos;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4a4c      	ldr	r2, [pc, #304]	@ (800ebac <HID_param_init+0x2bc>)
 800ea7c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    hid->buffer[53] = (uint8_t*)&PID.E_Pos + 1;
 800ea80:	4a4b      	ldr	r2, [pc, #300]	@ (800ebb0 <HID_param_init+0x2c0>)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    hid->buffer[54] = (uint8_t*)&PID.E_Pos + 2;
 800ea88:	4a4a      	ldr	r2, [pc, #296]	@ (800ebb4 <HID_param_init+0x2c4>)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    hid->buffer[55] = (uint8_t*)&PID.E_Pos + 3;
 800ea90:	4a49      	ldr	r2, [pc, #292]	@ (800ebb8 <HID_param_init+0x2c8>)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

    hid->buffer[56] = 0;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    hid->buffer[57] = 0;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    hid->buffer[58] = 0;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    hid->buffer[59] = 0;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    hid->buffer[60] = 0;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    hid->buffer[61] = 0;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    hid->buffer[62] = 0;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2200      	movs	r2, #0
 800eacc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    hid->buffer[63] = 0;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	bc80      	pop	{r7}
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	20002c9f 	.word	0x20002c9f
 800eae8:	20002c9d 	.word	0x20002c9d
 800eaec:	20002ca0 	.word	0x20002ca0
 800eaf0:	20002cb0 	.word	0x20002cb0
 800eaf4:	20002cb1 	.word	0x20002cb1
 800eaf8:	20002cb2 	.word	0x20002cb2
 800eafc:	20002cb3 	.word	0x20002cb3
 800eb00:	20002cb8 	.word	0x20002cb8
 800eb04:	20002cb9 	.word	0x20002cb9
 800eb08:	20002cba 	.word	0x20002cba
 800eb0c:	20002cbb 	.word	0x20002cbb
 800eb10:	20002cb4 	.word	0x20002cb4
 800eb14:	20002c9e 	.word	0x20002c9e
 800eb18:	20002cda 	.word	0x20002cda
 800eb1c:	20002cdb 	.word	0x20002cdb
 800eb20:	20002cd8 	.word	0x20002cd8
 800eb24:	20002cd9 	.word	0x20002cd9
 800eb28:	20002cf8 	.word	0x20002cf8
 800eb2c:	20002cf9 	.word	0x20002cf9
 800eb30:	20002cfa 	.word	0x20002cfa
 800eb34:	20002cfb 	.word	0x20002cfb
 800eb38:	20002cfc 	.word	0x20002cfc
 800eb3c:	20002cfd 	.word	0x20002cfd
 800eb40:	20002cfe 	.word	0x20002cfe
 800eb44:	20002cff 	.word	0x20002cff
 800eb48:	20002d00 	.word	0x20002d00
 800eb4c:	20002d01 	.word	0x20002d01
 800eb50:	20002d02 	.word	0x20002d02
 800eb54:	20002d03 	.word	0x20002d03
 800eb58:	20002cdc 	.word	0x20002cdc
 800eb5c:	20002cdd 	.word	0x20002cdd
 800eb60:	20002ce4 	.word	0x20002ce4
 800eb64:	20002ce5 	.word	0x20002ce5
 800eb68:	20002ce6 	.word	0x20002ce6
 800eb6c:	20002ce7 	.word	0x20002ce7
 800eb70:	20002cc4 	.word	0x20002cc4
 800eb74:	20002cc5 	.word	0x20002cc5
 800eb78:	20002cc6 	.word	0x20002cc6
 800eb7c:	20002cc7 	.word	0x20002cc7
 800eb80:	20002cc8 	.word	0x20002cc8
 800eb84:	20002cc9 	.word	0x20002cc9
 800eb88:	20002cca 	.word	0x20002cca
 800eb8c:	20002ccb 	.word	0x20002ccb
 800eb90:	20002cd0 	.word	0x20002cd0
 800eb94:	20002cd1 	.word	0x20002cd1
 800eb98:	20002cd2 	.word	0x20002cd2
 800eb9c:	20002cd3 	.word	0x20002cd3
 800eba0:	20002cd4 	.word	0x20002cd4
 800eba4:	20002cd5 	.word	0x20002cd5
 800eba8:	20002cd6 	.word	0x20002cd6
 800ebac:	20002ce0 	.word	0x20002ce0
 800ebb0:	20002ce1 	.word	0x20002ce1
 800ebb4:	20002ce2 	.word	0x20002ce2
 800ebb8:	20002ce3 	.word	0x20002ce3

0800ebbc <HID_WD>:
static void HID_WD(dataHID_typedef *hid)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
    // Get data from pointer array to Dataout
    for(uint8_t i = 0; i < DATA_SIZE; i++)
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	73fb      	strb	r3, [r7, #15]
 800ebc8:	e017      	b.n	800ebfa <HID_WD+0x3e>
        hid->dataOut[i] = (hid->buffer[i] != NULL) ? *hid->buffer[i] : 0;
 800ebca:	7bfa      	ldrb	r2, [r7, #15]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	3202      	adds	r2, #2
 800ebd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d006      	beq.n	800ebe6 <HID_WD+0x2a>
 800ebd8:	7bfa      	ldrb	r2, [r7, #15]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	3202      	adds	r2, #2
 800ebde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebe2:	7819      	ldrb	r1, [r3, #0]
 800ebe4:	e000      	b.n	800ebe8 <HID_WD+0x2c>
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	4413      	add	r3, r2
 800ebee:	460a      	mov	r2, r1
 800ebf0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    for(uint8_t i = 0; i < DATA_SIZE; i++)
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	73fb      	strb	r3, [r7, #15]
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
 800ebfc:	2b3f      	cmp	r3, #63	@ 0x3f
 800ebfe:	d9e4      	bls.n	800ebca <HID_WD+0xe>
    USBD_CUSTOM_HID_SendReport(pdev1,hid->dataOut, DATA_SIZE);
 800ec00:	4b06      	ldr	r3, [pc, #24]	@ (800ec1c <HID_WD+0x60>)
 800ec02:	6818      	ldr	r0, [r3, #0]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ec0a:	2240      	movs	r2, #64	@ 0x40
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	f7fb fa15 	bl	800a03c <USBD_CUSTOM_HID_SendReport>
}
 800ec12:	bf00      	nop
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20002d54 	.word	0x20002d54

0800ec20 <HID_RD>:
/* Recieve data from PC */
static void HID_RD(dataHID_typedef *hid)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
    // Copy data from USB buffer to DataIn
    memcpy(hid->dataIn + 1,hhid1->Report_buf,DATA_SIZE);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ec2e:	3301      	adds	r3, #1
 800ec30:	4a4d      	ldr	r2, [pc, #308]	@ (800ed68 <HID_RD+0x148>)
 800ec32:	6812      	ldr	r2, [r2, #0]
 800ec34:	4611      	mov	r1, r2
 800ec36:	2240      	movs	r2, #64	@ 0x40
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f000 f93b 	bl	800eeb4 <memcpy>
    hid->resquetCMD = *(uint8_t *)(hid->dataIn + 4);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	715a      	strb	r2, [r3, #5]
    PID.ptlCtrl     = *(uint8_t *)(hid->dataIn + 40);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800ec4e:	4b47      	ldr	r3, [pc, #284]	@ (800ed6c <HID_RD+0x14c>)
 800ec50:	749a      	strb	r2, [r3, #18]
    if(PID.ptlCtrl == USB_C)
 800ec52:	4b46      	ldr	r3, [pc, #280]	@ (800ed6c <HID_RD+0x14c>)
 800ec54:	7c9b      	ldrb	r3, [r3, #18]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d133      	bne.n	800ecc2 <HID_RD+0xa2>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,1);
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	2110      	movs	r1, #16
 800ec5e:	4844      	ldr	r0, [pc, #272]	@ (800ed70 <HID_RD+0x150>)
 800ec60:	f7f4 f97a 	bl	8002f58 <HAL_GPIO_WritePin>
        if(PID.mode == PID_Speed || PID.mode == None_PID)
 800ec64:	4b41      	ldr	r3, [pc, #260]	@ (800ed6c <HID_RD+0x14c>)
 800ec66:	7c5b      	ldrb	r3, [r3, #17]
 800ec68:	2b04      	cmp	r3, #4
 800ec6a:	d003      	beq.n	800ec74 <HID_RD+0x54>
 800ec6c:	4b3f      	ldr	r3, [pc, #252]	@ (800ed6c <HID_RD+0x14c>)
 800ec6e:	7c5b      	ldrb	r3, [r3, #17]
 800ec70:	2b05      	cmp	r3, #5
 800ec72:	d10c      	bne.n	800ec8e <HID_RD+0x6e>
        {
            PID.Value_Set   = *(int32_t *)(hid->dataIn + 5);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ec7a:	3305      	adds	r3, #5
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4a3b      	ldr	r2, [pc, #236]	@ (800ed6c <HID_RD+0x14c>)
 800ec80:	6213      	str	r3, [r2, #32]
            PID.Dir         = *(uint8_t *)(hid->dataIn + 9);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 800ec88:	4b38      	ldr	r3, [pc, #224]	@ (800ed6c <HID_RD+0x14c>)
 800ec8a:	751a      	strb	r2, [r3, #20]
 800ec8c:	e022      	b.n	800ecd4 <HID_RD+0xb4>
        }
        else if(PID.mode == PID_Position)
 800ec8e:	4b37      	ldr	r3, [pc, #220]	@ (800ed6c <HID_RD+0x14c>)
 800ec90:	7c5b      	ldrb	r3, [r3, #17]
 800ec92:	2b09      	cmp	r3, #9
 800ec94:	d11e      	bne.n	800ecd4 <HID_RD+0xb4>
        {
            PID.Time_step   = *(uint16_t *)(hid->dataIn + 49);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ec9c:	3331      	adds	r3, #49	@ 0x31
 800ec9e:	881a      	ldrh	r2, [r3, #0]
 800eca0:	4b32      	ldr	r3, [pc, #200]	@ (800ed6c <HID_RD+0x14c>)
 800eca2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            PID.scalefactor = *(uint8_t *)(hid->dataIn + 51);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 213b 	ldrb.w	r2, [r3, #315]	@ 0x13b
 800ecac:	4b2f      	ldr	r3, [pc, #188]	@ (800ed6c <HID_RD+0x14c>)
 800ecae:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            PID.targetPos   = *(int32_t *)(hid->dataIn + 45);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ecb8:	332d      	adds	r3, #45	@ 0x2d
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ed6c <HID_RD+0x14c>)
 800ecbe:	6453      	str	r3, [r2, #68]	@ 0x44
 800ecc0:	e008      	b.n	800ecd4 <HID_RD+0xb4>
        }
    }
    else if(PID.ptlCtrl == UARTCOM)
 800ecc2:	4b2a      	ldr	r3, [pc, #168]	@ (800ed6c <HID_RD+0x14c>)
 800ecc4:	7c9b      	ldrb	r3, [r3, #18]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d104      	bne.n	800ecd4 <HID_RD+0xb4>
    {
        //Coming soon
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,0);
 800ecca:	2200      	movs	r2, #0
 800eccc:	2110      	movs	r1, #16
 800ecce:	4828      	ldr	r0, [pc, #160]	@ (800ed70 <HID_RD+0x150>)
 800ecd0:	f7f4 f942 	bl	8002f58 <HAL_GPIO_WritePin>
    }
    else if(PID.ptlCtrl == CAN_BUS)
    {
        //Coming soon
    }
    if(hid->resquetCMD == Save_data)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	795b      	ldrb	r3, [r3, #5]
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d138      	bne.n	800ed4e <HID_RD+0x12e>
    {
        PID.mode        = *(uint8_t *)(hid->dataIn + 37);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f893 212d 	ldrb.w	r2, [r3, #301]	@ 0x12d
 800ece2:	4b22      	ldr	r3, [pc, #136]	@ (800ed6c <HID_RD+0x14c>)
 800ece4:	745a      	strb	r2, [r3, #17]
        PID.ID          = *(uint8_t *)(hid->dataIn + 43);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 800ecec:	4b1f      	ldr	r3, [pc, #124]	@ (800ed6c <HID_RD+0x14c>)
 800ecee:	74da      	strb	r2, [r3, #19]
        if(PID.mode == PID_Speed)
 800ecf0:	4b1e      	ldr	r3, [pc, #120]	@ (800ed6c <HID_RD+0x14c>)
 800ecf2:	7c5b      	ldrb	r3, [r3, #17]
 800ecf4:	2b04      	cmp	r3, #4
 800ecf6:	d110      	bne.n	800ed1a <HID_RD+0xfa>
        {
            PID.PPR     = *(uint16_t *)(hid->dataIn + 14);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ecfe:	330e      	adds	r3, #14
 800ed00:	881a      	ldrh	r2, [r3, #0]
 800ed02:	4b1a      	ldr	r3, [pc, #104]	@ (800ed6c <HID_RD+0x14c>)
 800ed04:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
            PID.RPM     = *(uint16_t *)(hid->dataIn + 16);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ed0e:	3310      	adds	r3, #16
 800ed10:	881a      	ldrh	r2, [r3, #0]
 800ed12:	4b16      	ldr	r3, [pc, #88]	@ (800ed6c <HID_RD+0x14c>)
 800ed14:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    }
    else if(hid->resquetCMD == Get_infor)
    {
        PID.mode        = *(uint8_t *)(hid->dataIn + 37);
    }
}
 800ed18:	e022      	b.n	800ed60 <HID_RD+0x140>
        else if(PID.mode == PID_Position)
 800ed1a:	4b14      	ldr	r3, [pc, #80]	@ (800ed6c <HID_RD+0x14c>)
 800ed1c:	7c5b      	ldrb	r3, [r3, #17]
 800ed1e:	2b09      	cmp	r3, #9
 800ed20:	d11e      	bne.n	800ed60 <HID_RD+0x140>
            PID.Kp_def = *(float *)(hid->dataIn + 18);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ed28:	3312      	adds	r3, #18
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a0f      	ldr	r2, [pc, #60]	@ (800ed6c <HID_RD+0x14c>)
 800ed2e:	66d3      	str	r3, [r2, #108]	@ 0x6c
            PID.Ki_def = *(float *)(hid->dataIn + 22);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ed36:	3316      	adds	r3, #22
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a0c      	ldr	r2, [pc, #48]	@ (800ed6c <HID_RD+0x14c>)
 800ed3c:	6713      	str	r3, [r2, #112]	@ 0x70
            PID.Kd_def = *(float *)(hid->dataIn + 27);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ed44:	331b      	adds	r3, #27
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a08      	ldr	r2, [pc, #32]	@ (800ed6c <HID_RD+0x14c>)
 800ed4a:	6753      	str	r3, [r2, #116]	@ 0x74
}
 800ed4c:	e008      	b.n	800ed60 <HID_RD+0x140>
    else if(hid->resquetCMD == Get_infor)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	795b      	ldrb	r3, [r3, #5]
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d104      	bne.n	800ed60 <HID_RD+0x140>
        PID.mode        = *(uint8_t *)(hid->dataIn + 37);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 212d 	ldrb.w	r2, [r3, #301]	@ 0x12d
 800ed5c:	4b03      	ldr	r3, [pc, #12]	@ (800ed6c <HID_RD+0x14c>)
 800ed5e:	745a      	strb	r2, [r3, #17]
}
 800ed60:	bf00      	nop
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	20002d58 	.word	0x20002d58
 800ed6c:	20002c8c 	.word	0x20002c8c
 800ed70:	40010c00 	.word	0x40010c00

0800ed74 <HID_Data_Init>:

void HID_Data_Init(dataHID_typedef *hid)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
    hid->f_param_init = HID_param_init;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a08      	ldr	r2, [pc, #32]	@ (800eda0 <HID_Data_Init+0x2c>)
 800ed80:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    hid->f_data_write = HID_WD;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a07      	ldr	r2, [pc, #28]	@ (800eda4 <HID_Data_Init+0x30>)
 800ed88:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hid->f_data_read  = HID_RD;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a06      	ldr	r2, [pc, #24]	@ (800eda8 <HID_Data_Init+0x34>)
 800ed90:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bc80      	pop	{r7}
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	0800e8f1 	.word	0x0800e8f1
 800eda4:	0800ebbd 	.word	0x0800ebbd
 800eda8:	0800ec21 	.word	0x0800ec21

0800edac <memset>:
 800edac:	4603      	mov	r3, r0
 800edae:	4402      	add	r2, r0
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d100      	bne.n	800edb6 <memset+0xa>
 800edb4:	4770      	bx	lr
 800edb6:	f803 1b01 	strb.w	r1, [r3], #1
 800edba:	e7f9      	b.n	800edb0 <memset+0x4>

0800edbc <_reclaim_reent>:
 800edbc:	4b29      	ldr	r3, [pc, #164]	@ (800ee64 <_reclaim_reent+0xa8>)
 800edbe:	b570      	push	{r4, r5, r6, lr}
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4604      	mov	r4, r0
 800edc4:	4283      	cmp	r3, r0
 800edc6:	d04b      	beq.n	800ee60 <_reclaim_reent+0xa4>
 800edc8:	69c3      	ldr	r3, [r0, #28]
 800edca:	b1ab      	cbz	r3, 800edf8 <_reclaim_reent+0x3c>
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	b16b      	cbz	r3, 800edec <_reclaim_reent+0x30>
 800edd0:	2500      	movs	r5, #0
 800edd2:	69e3      	ldr	r3, [r4, #28]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	5959      	ldr	r1, [r3, r5]
 800edd8:	2900      	cmp	r1, #0
 800edda:	d13b      	bne.n	800ee54 <_reclaim_reent+0x98>
 800eddc:	3504      	adds	r5, #4
 800edde:	2d80      	cmp	r5, #128	@ 0x80
 800ede0:	d1f7      	bne.n	800edd2 <_reclaim_reent+0x16>
 800ede2:	69e3      	ldr	r3, [r4, #28]
 800ede4:	4620      	mov	r0, r4
 800ede6:	68d9      	ldr	r1, [r3, #12]
 800ede8:	f000 f872 	bl	800eed0 <_free_r>
 800edec:	69e3      	ldr	r3, [r4, #28]
 800edee:	6819      	ldr	r1, [r3, #0]
 800edf0:	b111      	cbz	r1, 800edf8 <_reclaim_reent+0x3c>
 800edf2:	4620      	mov	r0, r4
 800edf4:	f000 f86c 	bl	800eed0 <_free_r>
 800edf8:	6961      	ldr	r1, [r4, #20]
 800edfa:	b111      	cbz	r1, 800ee02 <_reclaim_reent+0x46>
 800edfc:	4620      	mov	r0, r4
 800edfe:	f000 f867 	bl	800eed0 <_free_r>
 800ee02:	69e1      	ldr	r1, [r4, #28]
 800ee04:	b111      	cbz	r1, 800ee0c <_reclaim_reent+0x50>
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 f862 	bl	800eed0 <_free_r>
 800ee0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee0e:	b111      	cbz	r1, 800ee16 <_reclaim_reent+0x5a>
 800ee10:	4620      	mov	r0, r4
 800ee12:	f000 f85d 	bl	800eed0 <_free_r>
 800ee16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee18:	b111      	cbz	r1, 800ee20 <_reclaim_reent+0x64>
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f000 f858 	bl	800eed0 <_free_r>
 800ee20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ee22:	b111      	cbz	r1, 800ee2a <_reclaim_reent+0x6e>
 800ee24:	4620      	mov	r0, r4
 800ee26:	f000 f853 	bl	800eed0 <_free_r>
 800ee2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ee2c:	b111      	cbz	r1, 800ee34 <_reclaim_reent+0x78>
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f000 f84e 	bl	800eed0 <_free_r>
 800ee34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ee36:	b111      	cbz	r1, 800ee3e <_reclaim_reent+0x82>
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 f849 	bl	800eed0 <_free_r>
 800ee3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ee40:	b111      	cbz	r1, 800ee48 <_reclaim_reent+0x8c>
 800ee42:	4620      	mov	r0, r4
 800ee44:	f000 f844 	bl	800eed0 <_free_r>
 800ee48:	6a23      	ldr	r3, [r4, #32]
 800ee4a:	b14b      	cbz	r3, 800ee60 <_reclaim_reent+0xa4>
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee52:	4718      	bx	r3
 800ee54:	680e      	ldr	r6, [r1, #0]
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 f83a 	bl	800eed0 <_free_r>
 800ee5c:	4631      	mov	r1, r6
 800ee5e:	e7bb      	b.n	800edd8 <_reclaim_reent+0x1c>
 800ee60:	bd70      	pop	{r4, r5, r6, pc}
 800ee62:	bf00      	nop
 800ee64:	20000160 	.word	0x20000160

0800ee68 <__libc_init_array>:
 800ee68:	b570      	push	{r4, r5, r6, lr}
 800ee6a:	2600      	movs	r6, #0
 800ee6c:	4d0c      	ldr	r5, [pc, #48]	@ (800eea0 <__libc_init_array+0x38>)
 800ee6e:	4c0d      	ldr	r4, [pc, #52]	@ (800eea4 <__libc_init_array+0x3c>)
 800ee70:	1b64      	subs	r4, r4, r5
 800ee72:	10a4      	asrs	r4, r4, #2
 800ee74:	42a6      	cmp	r6, r4
 800ee76:	d109      	bne.n	800ee8c <__libc_init_array+0x24>
 800ee78:	f000 f8c4 	bl	800f004 <_init>
 800ee7c:	2600      	movs	r6, #0
 800ee7e:	4d0a      	ldr	r5, [pc, #40]	@ (800eea8 <__libc_init_array+0x40>)
 800ee80:	4c0a      	ldr	r4, [pc, #40]	@ (800eeac <__libc_init_array+0x44>)
 800ee82:	1b64      	subs	r4, r4, r5
 800ee84:	10a4      	asrs	r4, r4, #2
 800ee86:	42a6      	cmp	r6, r4
 800ee88:	d105      	bne.n	800ee96 <__libc_init_array+0x2e>
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}
 800ee8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee90:	4798      	blx	r3
 800ee92:	3601      	adds	r6, #1
 800ee94:	e7ee      	b.n	800ee74 <__libc_init_array+0xc>
 800ee96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee9a:	4798      	blx	r3
 800ee9c:	3601      	adds	r6, #1
 800ee9e:	e7f2      	b.n	800ee86 <__libc_init_array+0x1e>
 800eea0:	0800f3dc 	.word	0x0800f3dc
 800eea4:	0800f3dc 	.word	0x0800f3dc
 800eea8:	0800f3dc 	.word	0x0800f3dc
 800eeac:	0800f3e0 	.word	0x0800f3e0

0800eeb0 <__retarget_lock_acquire_recursive>:
 800eeb0:	4770      	bx	lr

0800eeb2 <__retarget_lock_release_recursive>:
 800eeb2:	4770      	bx	lr

0800eeb4 <memcpy>:
 800eeb4:	440a      	add	r2, r1
 800eeb6:	4291      	cmp	r1, r2
 800eeb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eebc:	d100      	bne.n	800eec0 <memcpy+0xc>
 800eebe:	4770      	bx	lr
 800eec0:	b510      	push	{r4, lr}
 800eec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eec6:	4291      	cmp	r1, r2
 800eec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eecc:	d1f9      	bne.n	800eec2 <memcpy+0xe>
 800eece:	bd10      	pop	{r4, pc}

0800eed0 <_free_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4605      	mov	r5, r0
 800eed4:	2900      	cmp	r1, #0
 800eed6:	d040      	beq.n	800ef5a <_free_r+0x8a>
 800eed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eedc:	1f0c      	subs	r4, r1, #4
 800eede:	2b00      	cmp	r3, #0
 800eee0:	bfb8      	it	lt
 800eee2:	18e4      	addlt	r4, r4, r3
 800eee4:	f000 f83c 	bl	800ef60 <__malloc_lock>
 800eee8:	4a1c      	ldr	r2, [pc, #112]	@ (800ef5c <_free_r+0x8c>)
 800eeea:	6813      	ldr	r3, [r2, #0]
 800eeec:	b933      	cbnz	r3, 800eefc <_free_r+0x2c>
 800eeee:	6063      	str	r3, [r4, #4]
 800eef0:	6014      	str	r4, [r2, #0]
 800eef2:	4628      	mov	r0, r5
 800eef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eef8:	f000 b838 	b.w	800ef6c <__malloc_unlock>
 800eefc:	42a3      	cmp	r3, r4
 800eefe:	d908      	bls.n	800ef12 <_free_r+0x42>
 800ef00:	6820      	ldr	r0, [r4, #0]
 800ef02:	1821      	adds	r1, r4, r0
 800ef04:	428b      	cmp	r3, r1
 800ef06:	bf01      	itttt	eq
 800ef08:	6819      	ldreq	r1, [r3, #0]
 800ef0a:	685b      	ldreq	r3, [r3, #4]
 800ef0c:	1809      	addeq	r1, r1, r0
 800ef0e:	6021      	streq	r1, [r4, #0]
 800ef10:	e7ed      	b.n	800eeee <_free_r+0x1e>
 800ef12:	461a      	mov	r2, r3
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	b10b      	cbz	r3, 800ef1c <_free_r+0x4c>
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	d9fa      	bls.n	800ef12 <_free_r+0x42>
 800ef1c:	6811      	ldr	r1, [r2, #0]
 800ef1e:	1850      	adds	r0, r2, r1
 800ef20:	42a0      	cmp	r0, r4
 800ef22:	d10b      	bne.n	800ef3c <_free_r+0x6c>
 800ef24:	6820      	ldr	r0, [r4, #0]
 800ef26:	4401      	add	r1, r0
 800ef28:	1850      	adds	r0, r2, r1
 800ef2a:	4283      	cmp	r3, r0
 800ef2c:	6011      	str	r1, [r2, #0]
 800ef2e:	d1e0      	bne.n	800eef2 <_free_r+0x22>
 800ef30:	6818      	ldr	r0, [r3, #0]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	4408      	add	r0, r1
 800ef36:	6010      	str	r0, [r2, #0]
 800ef38:	6053      	str	r3, [r2, #4]
 800ef3a:	e7da      	b.n	800eef2 <_free_r+0x22>
 800ef3c:	d902      	bls.n	800ef44 <_free_r+0x74>
 800ef3e:	230c      	movs	r3, #12
 800ef40:	602b      	str	r3, [r5, #0]
 800ef42:	e7d6      	b.n	800eef2 <_free_r+0x22>
 800ef44:	6820      	ldr	r0, [r4, #0]
 800ef46:	1821      	adds	r1, r4, r0
 800ef48:	428b      	cmp	r3, r1
 800ef4a:	bf01      	itttt	eq
 800ef4c:	6819      	ldreq	r1, [r3, #0]
 800ef4e:	685b      	ldreq	r3, [r3, #4]
 800ef50:	1809      	addeq	r1, r1, r0
 800ef52:	6021      	streq	r1, [r4, #0]
 800ef54:	6063      	str	r3, [r4, #4]
 800ef56:	6054      	str	r4, [r2, #4]
 800ef58:	e7cb      	b.n	800eef2 <_free_r+0x22>
 800ef5a:	bd38      	pop	{r3, r4, r5, pc}
 800ef5c:	2000302c 	.word	0x2000302c

0800ef60 <__malloc_lock>:
 800ef60:	4801      	ldr	r0, [pc, #4]	@ (800ef68 <__malloc_lock+0x8>)
 800ef62:	f7ff bfa5 	b.w	800eeb0 <__retarget_lock_acquire_recursive>
 800ef66:	bf00      	nop
 800ef68:	20003028 	.word	0x20003028

0800ef6c <__malloc_unlock>:
 800ef6c:	4801      	ldr	r0, [pc, #4]	@ (800ef74 <__malloc_unlock+0x8>)
 800ef6e:	f7ff bfa0 	b.w	800eeb2 <__retarget_lock_release_recursive>
 800ef72:	bf00      	nop
 800ef74:	20003028 	.word	0x20003028

0800ef78 <round>:
 800ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ef7e:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800ef82:	2a13      	cmp	r2, #19
 800ef84:	4604      	mov	r4, r0
 800ef86:	460d      	mov	r5, r1
 800ef88:	460b      	mov	r3, r1
 800ef8a:	dc1a      	bgt.n	800efc2 <round+0x4a>
 800ef8c:	2a00      	cmp	r2, #0
 800ef8e:	da0b      	bge.n	800efa8 <round+0x30>
 800ef90:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ef94:	3201      	adds	r2, #1
 800ef96:	bf04      	itt	eq
 800ef98:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ef9c:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800efa0:	2200      	movs	r2, #0
 800efa2:	461d      	mov	r5, r3
 800efa4:	4614      	mov	r4, r2
 800efa6:	e016      	b.n	800efd6 <round+0x5e>
 800efa8:	4815      	ldr	r0, [pc, #84]	@ (800f000 <round+0x88>)
 800efaa:	4110      	asrs	r0, r2
 800efac:	4001      	ands	r1, r0
 800efae:	4321      	orrs	r1, r4
 800efb0:	d011      	beq.n	800efd6 <round+0x5e>
 800efb2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800efb6:	fa41 f202 	asr.w	r2, r1, r2
 800efba:	4413      	add	r3, r2
 800efbc:	ea23 0300 	bic.w	r3, r3, r0
 800efc0:	e7ee      	b.n	800efa0 <round+0x28>
 800efc2:	2a33      	cmp	r2, #51	@ 0x33
 800efc4:	dd0a      	ble.n	800efdc <round+0x64>
 800efc6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800efca:	d104      	bne.n	800efd6 <round+0x5e>
 800efcc:	4602      	mov	r2, r0
 800efce:	f7f1 f8c5 	bl	800015c <__adddf3>
 800efd2:	4604      	mov	r4, r0
 800efd4:	460d      	mov	r5, r1
 800efd6:	4620      	mov	r0, r4
 800efd8:	4629      	mov	r1, r5
 800efda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efdc:	f04f 30ff 	mov.w	r0, #4294967295
 800efe0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800efe4:	40f8      	lsrs	r0, r7
 800efe6:	4220      	tst	r0, r4
 800efe8:	d0f5      	beq.n	800efd6 <round+0x5e>
 800efea:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800efee:	2201      	movs	r2, #1
 800eff0:	408a      	lsls	r2, r1
 800eff2:	1912      	adds	r2, r2, r4
 800eff4:	bf28      	it	cs
 800eff6:	3301      	addcs	r3, #1
 800eff8:	ea22 0200 	bic.w	r2, r2, r0
 800effc:	e7d1      	b.n	800efa2 <round+0x2a>
 800effe:	bf00      	nop
 800f000:	000fffff 	.word	0x000fffff

0800f004 <_init>:
 800f004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f006:	bf00      	nop
 800f008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f00a:	bc08      	pop	{r3}
 800f00c:	469e      	mov	lr, r3
 800f00e:	4770      	bx	lr

0800f010 <_fini>:
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f012:	bf00      	nop
 800f014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f016:	bc08      	pop	{r3}
 800f018:	469e      	mov	lr, r3
 800f01a:	4770      	bx	lr
