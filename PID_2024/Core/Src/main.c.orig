/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "crc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "usb_device.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <PID.h>
#include <IRQ.h>
#include <stdlib.h>
#include <USB_App.h>
#include <Flash_Func.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define SOFTWARE_VERSION "V1.1.0"

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

void Auto_RDP_LV1()
{
    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASH_Unlock();
    HAL_FLASH_OB_Unlock();

    HAL_FLASHEx_OBGetConfig(&OBInit);
    if (OBInit.RDPLevel == OB_RDP_LEVEL_0)
    {
        OBInit.OptionType = OPTIONBYTE_RDP;
        OBInit.RDPLevel = OB_RDP_LEVEL_1;  // Setting RDP level 1

        if (HAL_FLASHEx_OBProgram(&OBInit) == HAL_OK)
        {
            HAL_FLASH_OB_Launch();  // Launch setting
        }
    }
    
    HAL_FLASH_OB_Lock();
    HAL_FLASH_Lock();
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t time_led = 0;

//volatile uint16_t check_hid = 0;
//__IO float check_hid2 = 0;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
//    Auto_RDP_LV1();
  /* USER CODE END 1 */
    
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  PID_Init(&PID);
  HID_Data_Init(&usbPID);
  Flash_data_init(&Flash_data);
  
  usbPID.f_param_init(&usbPID);
  Flash_data.f_init_param(&Flash_data);
  Flash_data.f_read_param(&Flash_data);
  PID.f_param_init(&PID);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
//  MX_TIM4_Init();
  MX_USART1_UART_Init();
  MX_USB_DEVICE_Init();
  MX_CRC_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
    MX_CAN_Init();
    HAL_CAN_DeInit(&hcan);
    
    if(PID.mode == PID_Position)
    {
        HAL_TIM_Base_Start_IT(&htim3);
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
    }

    PID_Motor_Ctrl(PID.Motor_Duty);
    MX_TIM4_Init();
    HAL_TIM_Base_Start_IT(&htim4);
    HAL_UART_Receive_IT(&huart1,PID.rev_UART.rxData,PID.mode);

    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        if(PID.enablePID == 1)
        {
            Update_Encoder(&PID);
            PID.f_cal_pid(&PID);
            PID.enablePID = 0;
        }
        if(HAL_GetTick() - time_led >= 10000/(PID.Value_Set+1) 
          || HAL_GetTick() - time_led >= 700)
        {
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
            time_led = HAL_GetTick();
        }

        if(usbPID.resquetCMD == Save_data)
        {
            Flash_data.f_write_param(&Flash_data);
            Flash_data.f_read_param(&Flash_data);
            PID.f_param_init(&PID);
            usbPID.resquetCMD = NoneCMD;
        }
        else if(usbPID.resquetCMD == Get_infor)
        {
          Flash_data.f_change_mode(&Flash_data,&PID);
          PID.f_param_init(&PID);
          usbPID.resquetCMD = NoneCMD;
        }
        if(usbPID.isConnected == 1)
        {
            usbPID.updateMonitor = 1;
            usbPID.f_data_read(&usbPID);
            usbPID.isConnected = 0;
        }
        else
        {
            usbPID.updateMonitor = 0;
        }
        if(usbPID.updateMonitor == 1)
        {
        if(HAL_GetTick() - usbPID.timeOut > TIME_OUT_SEND)
        {
            usbPID.f_data_write(&usbPID);
            //            check_hid = *(uint16_t*)(usbPID.dataOut + 18);
            //            check_hid2 = *(float *)(usbPID.dataOut + 49);
            usbPID.timeOut =  HAL_GetTick();
        }
    }
    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
    }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
